/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Directionality } from '@angular/cdk/bidi';
import { Overlay, OverlaySizeConfig, PositionStrategy } from '@angular/cdk/overlay';
/**
 * Overridable factory responsible for configuring how cdkPopoverEdit popovers are positioned
 * and sized.
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class PopoverEditPositionStrategyFactory {
    /**
     * Creates a PositionStrategy based on the specified table cells.
     * The cells will be provided in DOM order.
     */
    abstract positionStrategyForCells(cells: HTMLElement[]): PositionStrategy;
    /**
     * Creates an OverlaySizeConfig based on the specified table cells.
     * The cells will be provided in DOM order.
     */
    abstract sizeConfigForCells(cells: HTMLElement[]): OverlaySizeConfig;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PopoverEditPositionStrategyFactory, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<PopoverEditPositionStrategyFactory>;
}
/**
 * Default implementation of PopoverEditPositionStrategyFactory.
 * Uses a FlexibleConnectedPositionStrategy anchored to the start + top of the cell.
 * Note: This will change to CoverPositionStrategy once it implemented.
 */
export declare class DefaultPopoverEditPositionStrategyFactory extends PopoverEditPositionStrategyFactory {
    protected readonly direction: Directionality;
    protected readonly overlay: Overlay;
    constructor(direction: Directionality, overlay: Overlay);
    positionStrategyForCells(cells: HTMLElement[]): PositionStrategy;
    sizeConfigForCells(cells: HTMLElement[]): OverlaySizeConfig;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DefaultPopoverEditPositionStrategyFactory, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<DefaultPopoverEditPositionStrategyFactory>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1lZGl0LXBvc2l0aW9uLXN0cmF0ZWd5LWZhY3RvcnkuZC50cyIsInNvdXJjZXMiOlsicG9wb3Zlci1lZGl0LXBvc2l0aW9uLXN0cmF0ZWd5LWZhY3RvcnkuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBEaXJlY3Rpb25hbGl0eSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9iaWRpJztcbmltcG9ydCB7IE92ZXJsYXksIE92ZXJsYXlTaXplQ29uZmlnLCBQb3NpdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuLyoqXG4gKiBPdmVycmlkYWJsZSBmYWN0b3J5IHJlc3BvbnNpYmxlIGZvciBjb25maWd1cmluZyBob3cgY2RrUG9wb3ZlckVkaXQgcG9wb3ZlcnMgYXJlIHBvc2l0aW9uZWRcbiAqIGFuZCBzaXplZC5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgUG9wb3ZlckVkaXRQb3NpdGlvblN0cmF0ZWd5RmFjdG9yeSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIFBvc2l0aW9uU3RyYXRlZ3kgYmFzZWQgb24gdGhlIHNwZWNpZmllZCB0YWJsZSBjZWxscy5cbiAgICAgKiBUaGUgY2VsbHMgd2lsbCBiZSBwcm92aWRlZCBpbiBET00gb3JkZXIuXG4gICAgICovXG4gICAgYWJzdHJhY3QgcG9zaXRpb25TdHJhdGVneUZvckNlbGxzKGNlbGxzOiBIVE1MRWxlbWVudFtdKTogUG9zaXRpb25TdHJhdGVneTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIE92ZXJsYXlTaXplQ29uZmlnIGJhc2VkIG9uIHRoZSBzcGVjaWZpZWQgdGFibGUgY2VsbHMuXG4gICAgICogVGhlIGNlbGxzIHdpbGwgYmUgcHJvdmlkZWQgaW4gRE9NIG9yZGVyLlxuICAgICAqL1xuICAgIGFic3RyYWN0IHNpemVDb25maWdGb3JDZWxscyhjZWxsczogSFRNTEVsZW1lbnRbXSk6IE92ZXJsYXlTaXplQ29uZmlnO1xufVxuLyoqXG4gKiBEZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIFBvcG92ZXJFZGl0UG9zaXRpb25TdHJhdGVneUZhY3RvcnkuXG4gKiBVc2VzIGEgRmxleGlibGVDb25uZWN0ZWRQb3NpdGlvblN0cmF0ZWd5IGFuY2hvcmVkIHRvIHRoZSBzdGFydCArIHRvcCBvZiB0aGUgY2VsbC5cbiAqIE5vdGU6IFRoaXMgd2lsbCBjaGFuZ2UgdG8gQ292ZXJQb3NpdGlvblN0cmF0ZWd5IG9uY2UgaXQgaW1wbGVtZW50ZWQuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERlZmF1bHRQb3BvdmVyRWRpdFBvc2l0aW9uU3RyYXRlZ3lGYWN0b3J5IGV4dGVuZHMgUG9wb3ZlckVkaXRQb3NpdGlvblN0cmF0ZWd5RmFjdG9yeSB7XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGRpcmVjdGlvbjogRGlyZWN0aW9uYWxpdHk7XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IG92ZXJsYXk6IE92ZXJsYXk7XG4gICAgY29uc3RydWN0b3IoZGlyZWN0aW9uOiBEaXJlY3Rpb25hbGl0eSwgb3ZlcmxheTogT3ZlcmxheSk7XG4gICAgcG9zaXRpb25TdHJhdGVneUZvckNlbGxzKGNlbGxzOiBIVE1MRWxlbWVudFtdKTogUG9zaXRpb25TdHJhdGVneTtcbiAgICBzaXplQ29uZmlnRm9yQ2VsbHMoY2VsbHM6IEhUTUxFbGVtZW50W10pOiBPdmVybGF5U2l6ZUNvbmZpZztcbn1cbiJdfQ==