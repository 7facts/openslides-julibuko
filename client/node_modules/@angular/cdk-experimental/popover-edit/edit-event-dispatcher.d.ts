/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { NgZone } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { EditRef } from './edit-ref';
/**
 * The possible states for hover content:
 * OFF - Not rendered.
 * FOCUSABLE - Rendered in the dom and styled for its contents to be focusable but invisible.
 * ON - Rendered and fully visible.
 */
import * as ɵngcc0 from '@angular/core';
export declare const enum HoverContentState {
    OFF = 0,
    FOCUSABLE = 1,
    ON = 2
}
/**
 * Service for sharing delegated events and state for triggering table edits.
 */
export declare class EditEventDispatcher {
    private readonly _ngZone;
    /** A subject that indicates which table cell is currently editing (unless it is disabled). */
    readonly editing: Subject<Element | null>;
    /** A subject that indicates which table row is currently hovered. */
    readonly hovering: Subject<Element | null>;
    /** A subject that indicates which table row currently contains focus. */
    readonly focused: Subject<Element | null>;
    /** A subject that indicates all elements in the table matching ROW_SELECTOR. */
    readonly allRows: Subject<NodeList>;
    /** A subject that emits mouse move events from the table indicating the targeted row. */
    readonly mouseMove: Subject<Element | null>;
    /**
     * Tracks the currently disabled editable cells - edit calls will be ignored
     * for these cells.
     */
    readonly disabledCells: WeakMap<Element, boolean>;
    /** The EditRef for the currently active edit lens (if any). */
    get editRef(): EditRef<any> | null;
    private _editRef;
    private readonly _distinctUntilChanged;
    private readonly _startWithNull;
    private readonly _distinctShare;
    private readonly _startWithNullDistinct;
    readonly editingAndEnabled: Observable<Element | null>;
    /** An observable that emits the row containing focus or an active edit. */
    readonly editingOrFocused: Observable<Element | null>;
    /** Tracks rows that contain hover content with a reference count. */
    private _rowsWithHoverContent;
    /** The table cell that has an active edit lens (or null). */
    private _currentlyEditing;
    /** The combined set of row hover content states organized by row. */
    private readonly _hoveredContentStateDistinct;
    private readonly _editingAndEnabledDistinct;
    private _lastSeenRow;
    private _lastSeenRowHoverOrFocus;
    constructor(_ngZone: NgZone);
    /**
     * Gets an Observable that emits true when the specified element's cell
     * is editing and false when not.
     */
    editingCell(element: Element | EventTarget): Observable<boolean>;
    /**
     * Stops editing for the specified cell. If the specified cell is not the current
     * edit cell, does nothing.
     */
    doneEditingCell(element: Element | EventTarget): void;
    /** Sets the currently active EditRef. */
    setActiveEditRef(ref: EditRef<any>): void;
    /** Unsets the currently active EditRef, if the specified editRef is active. */
    unsetActiveEditRef(ref: EditRef<any>): void;
    /** Adds the specified table row to be tracked for first/last row comparisons. */
    registerRowWithHoverContent(row: Element): void;
    /**
     * Reference decrements and ultimately removes the specified table row from first/last row
     * comparisons.
     */
    deregisterRowWithHoverContent(row: Element): void;
    /**
     * Gets an Observable that emits true when the specified element's row
     * contains the focused element or is being hovered over and false when not.
     * Hovering is defined as when the mouse has momentarily stopped moving over the cell.
     */
    hoverOrFocusOnRow(row: Element): Observable<HoverContentState>;
    /**
     * RxJS operator that enters the Angular zone, used to reduce boilerplate in
     * re-entering the zone for stream pipelines.
     */
    private _enterZone;
    private _getFirstRowWithHoverContent;
    private _getLastRowWithHoverContent;
    private _mapAllRowsToSingleRow;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<EditEventDispatcher, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<EditEventDispatcher>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdC1ldmVudC1kaXNwYXRjaGVyLmQudHMiLCJzb3VyY2VzIjpbImVkaXQtZXZlbnQtZGlzcGF0Y2hlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEVkaXRSZWYgfSBmcm9tICcuL2VkaXQtcmVmJztcbi8qKlxuICogVGhlIHBvc3NpYmxlIHN0YXRlcyBmb3IgaG92ZXIgY29udGVudDpcbiAqIE9GRiAtIE5vdCByZW5kZXJlZC5cbiAqIEZPQ1VTQUJMRSAtIFJlbmRlcmVkIGluIHRoZSBkb20gYW5kIHN0eWxlZCBmb3IgaXRzIGNvbnRlbnRzIHRvIGJlIGZvY3VzYWJsZSBidXQgaW52aXNpYmxlLlxuICogT04gLSBSZW5kZXJlZCBhbmQgZnVsbHkgdmlzaWJsZS5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgZW51bSBIb3ZlckNvbnRlbnRTdGF0ZSB7XG4gICAgT0ZGID0gMCxcbiAgICBGT0NVU0FCTEUgPSAxLFxuICAgIE9OID0gMlxufVxuLyoqXG4gKiBTZXJ2aWNlIGZvciBzaGFyaW5nIGRlbGVnYXRlZCBldmVudHMgYW5kIHN0YXRlIGZvciB0cmlnZ2VyaW5nIHRhYmxlIGVkaXRzLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBFZGl0RXZlbnREaXNwYXRjaGVyIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9uZ1pvbmU7XG4gICAgLyoqIEEgc3ViamVjdCB0aGF0IGluZGljYXRlcyB3aGljaCB0YWJsZSBjZWxsIGlzIGN1cnJlbnRseSBlZGl0aW5nICh1bmxlc3MgaXQgaXMgZGlzYWJsZWQpLiAqL1xuICAgIHJlYWRvbmx5IGVkaXRpbmc6IFN1YmplY3Q8RWxlbWVudCB8IG51bGw+O1xuICAgIC8qKiBBIHN1YmplY3QgdGhhdCBpbmRpY2F0ZXMgd2hpY2ggdGFibGUgcm93IGlzIGN1cnJlbnRseSBob3ZlcmVkLiAqL1xuICAgIHJlYWRvbmx5IGhvdmVyaW5nOiBTdWJqZWN0PEVsZW1lbnQgfCBudWxsPjtcbiAgICAvKiogQSBzdWJqZWN0IHRoYXQgaW5kaWNhdGVzIHdoaWNoIHRhYmxlIHJvdyBjdXJyZW50bHkgY29udGFpbnMgZm9jdXMuICovXG4gICAgcmVhZG9ubHkgZm9jdXNlZDogU3ViamVjdDxFbGVtZW50IHwgbnVsbD47XG4gICAgLyoqIEEgc3ViamVjdCB0aGF0IGluZGljYXRlcyBhbGwgZWxlbWVudHMgaW4gdGhlIHRhYmxlIG1hdGNoaW5nIFJPV19TRUxFQ1RPUi4gKi9cbiAgICByZWFkb25seSBhbGxSb3dzOiBTdWJqZWN0PE5vZGVMaXN0PjtcbiAgICAvKiogQSBzdWJqZWN0IHRoYXQgZW1pdHMgbW91c2UgbW92ZSBldmVudHMgZnJvbSB0aGUgdGFibGUgaW5kaWNhdGluZyB0aGUgdGFyZ2V0ZWQgcm93LiAqL1xuICAgIHJlYWRvbmx5IG1vdXNlTW92ZTogU3ViamVjdDxFbGVtZW50IHwgbnVsbD47XG4gICAgLyoqXG4gICAgICogVHJhY2tzIHRoZSBjdXJyZW50bHkgZGlzYWJsZWQgZWRpdGFibGUgY2VsbHMgLSBlZGl0IGNhbGxzIHdpbGwgYmUgaWdub3JlZFxuICAgICAqIGZvciB0aGVzZSBjZWxscy5cbiAgICAgKi9cbiAgICByZWFkb25seSBkaXNhYmxlZENlbGxzOiBXZWFrTWFwPEVsZW1lbnQsIGJvb2xlYW4+O1xuICAgIC8qKiBUaGUgRWRpdFJlZiBmb3IgdGhlIGN1cnJlbnRseSBhY3RpdmUgZWRpdCBsZW5zIChpZiBhbnkpLiAqL1xuICAgIGdldCBlZGl0UmVmKCk6IEVkaXRSZWY8YW55PiB8IG51bGw7XG4gICAgcHJpdmF0ZSBfZWRpdFJlZjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9kaXN0aW5jdFVudGlsQ2hhbmdlZDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9zdGFydFdpdGhOdWxsO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX2Rpc3RpbmN0U2hhcmU7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfc3RhcnRXaXRoTnVsbERpc3RpbmN0O1xuICAgIHJlYWRvbmx5IGVkaXRpbmdBbmRFbmFibGVkOiBPYnNlcnZhYmxlPEVsZW1lbnQgfCBudWxsPjtcbiAgICAvKiogQW4gb2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHRoZSByb3cgY29udGFpbmluZyBmb2N1cyBvciBhbiBhY3RpdmUgZWRpdC4gKi9cbiAgICByZWFkb25seSBlZGl0aW5nT3JGb2N1c2VkOiBPYnNlcnZhYmxlPEVsZW1lbnQgfCBudWxsPjtcbiAgICAvKiogVHJhY2tzIHJvd3MgdGhhdCBjb250YWluIGhvdmVyIGNvbnRlbnQgd2l0aCBhIHJlZmVyZW5jZSBjb3VudC4gKi9cbiAgICBwcml2YXRlIF9yb3dzV2l0aEhvdmVyQ29udGVudDtcbiAgICAvKiogVGhlIHRhYmxlIGNlbGwgdGhhdCBoYXMgYW4gYWN0aXZlIGVkaXQgbGVucyAob3IgbnVsbCkuICovXG4gICAgcHJpdmF0ZSBfY3VycmVudGx5RWRpdGluZztcbiAgICAvKiogVGhlIGNvbWJpbmVkIHNldCBvZiByb3cgaG92ZXIgY29udGVudCBzdGF0ZXMgb3JnYW5pemVkIGJ5IHJvdy4gKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IF9ob3ZlcmVkQ29udGVudFN0YXRlRGlzdGluY3Q7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfZWRpdGluZ0FuZEVuYWJsZWREaXN0aW5jdDtcbiAgICBwcml2YXRlIF9sYXN0U2VlblJvdztcbiAgICBwcml2YXRlIF9sYXN0U2VlblJvd0hvdmVyT3JGb2N1cztcbiAgICBjb25zdHJ1Y3Rvcihfbmdab25lOiBOZ1pvbmUpO1xuICAgIC8qKlxuICAgICAqIEdldHMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHRydWUgd2hlbiB0aGUgc3BlY2lmaWVkIGVsZW1lbnQncyBjZWxsXG4gICAgICogaXMgZWRpdGluZyBhbmQgZmFsc2Ugd2hlbiBub3QuXG4gICAgICovXG4gICAgZWRpdGluZ0NlbGwoZWxlbWVudDogRWxlbWVudCB8IEV2ZW50VGFyZ2V0KTogT2JzZXJ2YWJsZTxib29sZWFuPjtcbiAgICAvKipcbiAgICAgKiBTdG9wcyBlZGl0aW5nIGZvciB0aGUgc3BlY2lmaWVkIGNlbGwuIElmIHRoZSBzcGVjaWZpZWQgY2VsbCBpcyBub3QgdGhlIGN1cnJlbnRcbiAgICAgKiBlZGl0IGNlbGwsIGRvZXMgbm90aGluZy5cbiAgICAgKi9cbiAgICBkb25lRWRpdGluZ0NlbGwoZWxlbWVudDogRWxlbWVudCB8IEV2ZW50VGFyZ2V0KTogdm9pZDtcbiAgICAvKiogU2V0cyB0aGUgY3VycmVudGx5IGFjdGl2ZSBFZGl0UmVmLiAqL1xuICAgIHNldEFjdGl2ZUVkaXRSZWYocmVmOiBFZGl0UmVmPGFueT4pOiB2b2lkO1xuICAgIC8qKiBVbnNldHMgdGhlIGN1cnJlbnRseSBhY3RpdmUgRWRpdFJlZiwgaWYgdGhlIHNwZWNpZmllZCBlZGl0UmVmIGlzIGFjdGl2ZS4gKi9cbiAgICB1bnNldEFjdGl2ZUVkaXRSZWYocmVmOiBFZGl0UmVmPGFueT4pOiB2b2lkO1xuICAgIC8qKiBBZGRzIHRoZSBzcGVjaWZpZWQgdGFibGUgcm93IHRvIGJlIHRyYWNrZWQgZm9yIGZpcnN0L2xhc3Qgcm93IGNvbXBhcmlzb25zLiAqL1xuICAgIHJlZ2lzdGVyUm93V2l0aEhvdmVyQ29udGVudChyb3c6IEVsZW1lbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlZmVyZW5jZSBkZWNyZW1lbnRzIGFuZCB1bHRpbWF0ZWx5IHJlbW92ZXMgdGhlIHNwZWNpZmllZCB0YWJsZSByb3cgZnJvbSBmaXJzdC9sYXN0IHJvd1xuICAgICAqIGNvbXBhcmlzb25zLlxuICAgICAqL1xuICAgIGRlcmVnaXN0ZXJSb3dXaXRoSG92ZXJDb250ZW50KHJvdzogRWxlbWVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogR2V0cyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgdHJ1ZSB3aGVuIHRoZSBzcGVjaWZpZWQgZWxlbWVudCdzIHJvd1xuICAgICAqIGNvbnRhaW5zIHRoZSBmb2N1c2VkIGVsZW1lbnQgb3IgaXMgYmVpbmcgaG92ZXJlZCBvdmVyIGFuZCBmYWxzZSB3aGVuIG5vdC5cbiAgICAgKiBIb3ZlcmluZyBpcyBkZWZpbmVkIGFzIHdoZW4gdGhlIG1vdXNlIGhhcyBtb21lbnRhcmlseSBzdG9wcGVkIG1vdmluZyBvdmVyIHRoZSBjZWxsLlxuICAgICAqL1xuICAgIGhvdmVyT3JGb2N1c09uUm93KHJvdzogRWxlbWVudCk6IE9ic2VydmFibGU8SG92ZXJDb250ZW50U3RhdGU+O1xuICAgIC8qKlxuICAgICAqIFJ4SlMgb3BlcmF0b3IgdGhhdCBlbnRlcnMgdGhlIEFuZ3VsYXIgem9uZSwgdXNlZCB0byByZWR1Y2UgYm9pbGVycGxhdGUgaW5cbiAgICAgKiByZS1lbnRlcmluZyB0aGUgem9uZSBmb3Igc3RyZWFtIHBpcGVsaW5lcy5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9lbnRlclpvbmU7XG4gICAgcHJpdmF0ZSBfZ2V0Rmlyc3RSb3dXaXRoSG92ZXJDb250ZW50O1xuICAgIHByaXZhdGUgX2dldExhc3RSb3dXaXRoSG92ZXJDb250ZW50O1xuICAgIHByaXZhdGUgX21hcEFsbFJvd3NUb1NpbmdsZVJvdztcbn1cbiJdfQ==