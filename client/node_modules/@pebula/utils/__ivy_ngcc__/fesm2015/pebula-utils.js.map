{"version":3,"file":"pebula-utils.js","sources":["ng:/@pebula/utils/lib/unrx.ts","ng:/@pebula/utils/lib/array.ts","ng:/@pebula/utils/lib/mixin.ts","ng:/@pebula/utils/lib/checks.ts","ng:/@pebula/utils/lib/proto.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\n/**\n * Emits the values emitted by the source observable until a kill signal is sent to the group.\n * You can also specify a `subKillGroup` which can be used to kill specific subscriptions within a group.\n *\n * When a `killGroup` is \"killed\" all `subKillGroup` are killed as well. When a `subKillGroup` is \"killed\" the group remains\n * as well as other \"subKillGroup\" registered for that group.\n *\n * > WARNING: Do not apply operators that subscribe internally (e.g. combineLatest, switchMap) after the `killOnDestroy` operator.\n * Internal subscriptions will not unsubscribe automatically.\n * For more information see {@link https://blog.angularindepth.com/rxjs-avoiding-takeuntil-leaks-fb5182d047ef | this blog post}\n */\nexport function unrx<T>(killGroup: any, subKillGroup?: any): (source: Observable<T>) => Observable<T> {\n  return unrx.pipe<T>(killGroup, subKillGroup);\n}\n\nexport namespace unrx {\n  const ALL_HANDLERS_TOKEN = {};\n  const notifierStore = new WeakMap<any, Subject<any>>();\n\n  function getNotifier(component: any, create = false): Subject<any> | undefined {\n    let notifier = notifierStore.get(component);\n    if (!notifier && create === true) {\n      notifierStore.set(component, notifier = new Subject<any>());\n    }\n    return notifier;\n  }\n\n  /**\n   * Send a \"kill\" signal to the specified `killGroup`.\n   * This will immediately unsubscribe all subscriptions with the `unrx` pipe registered under the specified `killGroup`.\n   *\n   * Note that the entire `killGroup` is destroyed.\n   */\n  export function kill(killGroup: any): void;\n  /**\n   * Send a \"kill\" signal to a specific `subKillGroup` in the specified `killGroup`.\n   * This will immediately unsubscribe all subscriptions with the `unrx` pipe registered under the specified `killGroup` and `subKillGroup`.\n   *\n   */\n  export function kill(killGroup: any, ...subKillGroup: any[]): void;\n  export function kill(killGroup: any, ...subKillGroup: any[]): void {\n    if (subKillGroup.length === 0) {\n      killAll(killGroup);\n    } else {\n      const notifier = getNotifier(killGroup);\n      if (notifier) {\n        for (const h of subKillGroup) {\n          notifier.next(h);\n        }\n      }\n    }\n  }\n\n  /** {@inheritdoc unrx} */\n  export function pipe<T>(killGroup: any, subKillGroup?: any): (source: Observable<T>) => Observable<T> {\n    return (source: Observable<T>) => source.pipe(\n      takeUntil(getNotifier(killGroup, true).pipe(filter( h => h === ALL_HANDLERS_TOKEN || (subKillGroup && h === subKillGroup ) )))\n    );\n  }\n\n  function killAll(obj: any): void {\n    const notifier = getNotifier(obj);\n    if (notifier) {\n      notifier.next(ALL_HANDLERS_TOKEN);\n      notifier.complete();\n      notifierStore.delete(obj);\n    }\n  }\n}\n\n/**\n * Emits the values emitted by the source Observable until the angular component instance is destroyed. (`ngOnDestroy` is called).\n * If the component already implements `ngOnDestroy` it will wrap it.\n *\n * You can also destroy on-demand by providing a handler and use `UnRx.kill` to unsubscribe.\n * Note that using the same handler id for multiple subscriptions will kill all of them together, i.e. the handler is also a group.\n *\n * > WARNING: Do not apply operators that subscribe internally (e.g. combineLatest, switchMap) after the `killOnDestroy` operator.\n * Internal subscriptions will not unsubscribe automatically. For more information see https://blog.angularindepth.com/rxjs-avoiding-takeuntil-leaks-fb5182d047ef\n */\nexport function UnRx<T>(component: any, handler?: any): (source: Observable<T>) => Observable<T>;\n/**\n * A Decorator that add support for automatic unsubscription in angular components.\n *\n * When applied on a component, `UnRx` will wrap the `ngOnDestroy` life-cycle` hook (or create if doesn't exist) and automatically\n * destroy all open subscriptions that contain the `UnRx` pipe in their emission stream.\n *\n * @remarks\n *\n * The following example demonstrate a component using the HTTP client to call a server.\n * We add the `UnRx` pipe to the response observable (`pipe(UnRx(this))`) so when the component is destroyed the subscription is closed as well.\n *\n * This might seem redundant because the `HttpClient` will automatically close the subscription after the response but what happen when\n * the response arrived AFTER the component is destroyed (user left the page)?\n *\n * In this case the subscription will emit the response and the handler will run, we don't want that!\n *\n * By applying the pipe we ensure that nothing will run once the component is destroyed.\n *\n * The BIG BONUS here is http cancellation, once destroyed `UnRx` will close the subscription which will cancel the HTTP request!\n * ```ts\n * import { Component } from '@angular/core';\n * import { HttpClient } from '@angular/common/http';\n *\n * @Component({\n *  selector: 'my-cmp',\n *  template: ``\n * })\n * @UnRx() // Will un-subscribe all open subscriptions when component is destroyed\n * export class MyComponent {\n *   static URL = '/some-endpoint';\n *\n *   constructor(private http: HttpClient) { }\n *\n *   getData() {\n *     this.http.get(MyComponent.URL)\n *       .pipe(UnRx(this))             // Register the stream for auto-kill on destroy\n *       .subscribe( response => {\n *         console.log(response);\n *       });\n *   }\n * }\n * ```\n *\n * The following example is an improved version of the previous one.\n * All pending request will be cancelled when the component is destroyed but we will also cancel all pending requests\n * when a new request is fired.\n *\n * With this we ensure state and flow integrity (no race condition between 2 requests).\n * We also make sure that resources are not wasted (multiple redundant requests.)\n * ```ts\n * import { Component } from '@angular/core';\n * import { HttpClient } from '@angular/common/http';\n *\n * @Component({\n *  selector: 'my-cmp',\n *  template: ``\n * })\n * @UnRx() // Will un-subscribe all open subscriptions when component is destroyed\n * export class MyComponent {\n *   static URL = '/some-endpoint';\n *\n *   constructor(private http: HttpClient) { }\n *\n *   getData() {\n *     UnRx.kill(this, MyComponent.URL); // Kill (cancel) pending HTTP requests\n *     this.http.get(MyComponent.URL)\n *       .pipe(UnRx(this, MyComponent.URL)) // Register the stream for auto-kill on destroy and add a handler for ad-hoc unsubscribe\n *       .subscribe( response => {\n *         console.log(response);\n *       });\n *   }\n * }\n * ```\n *\n * @internalremarks\n * Based on work from:\n *   - https://github.com/w11k/ng2-rx-componentdestroyed/blob/master/src/index.ts\n *   - https://stackoverflow.com/questions/38008334/angular-rxjs-when-should-i-unsubscribe-from-subscription/41177163#41177163\n */\nexport function UnRx<T = any>(): ClassDecorator;\nexport function UnRx<T>(component?: any, handler?: any): ClassDecorator | ( (source: Observable<T>) => Observable<T> ) {\n  return component\n    ? unrx<T>(component, handler)\n    : UnRx.decorateComponent\n  ;\n}\n\nexport namespace UnRx {\n  let invokeTypeStack: any[] = [];\n  const originalOnDestroyFunctionStore = new Map<any, () => void>();\n\n  function ngOnDestroy(): void {\n    const len = invokeTypeStack.length;\n    let type = this.constructor;\n\n    if (len > 0) {\n      const lastType = invokeTypeStack[len - 1];\n      if (type === lastType) {\n        type = Object.getPrototypeOf(type);\n      }\n    }\n\n    invokeTypeStack.push(type);\n\n    const oldNgOnDestroy = originalOnDestroyFunctionStore.get(type);\n    if (oldNgOnDestroy) {\n      try {\n        oldNgOnDestroy.apply(this);\n      } catch (err) {\n        invokeTypeStack = [];\n        throw err;\n      }\n    }\n\n    invokeTypeStack.pop();\n\n    if (len === 0) {\n      unrx.kill(this);\n    }\n  }\n\n  export function decorateComponent(target: any): any {\n    const proto = target.prototype;\n    if (proto.ngOnDestroy) {\n      originalOnDestroyFunctionStore.set(target, proto.ngOnDestroy);\n    }\n    proto.ngOnDestroy = ngOnDestroy;\n    return target;\n  }\n\n  /**\n   * Send a \"kill\" signal to the specified `component` instance.\n   * This will immediately unsubscribe all subscriptions with the `UnRx` pipe registered under the specified component instance.\n   */\n  export function kill(killGroup: any): void;\n  /**\n   * Send a \"kill\" signal to a specific `token` in the specified `component` instance.\n   * This will immediately unsubscribe all subscriptions with the `UnRx` pipe registered under the specified `component` instance and `token`.\n   *\n   */\n  export function kill(component: any, ...tokens: any[]): void;\n  export function kill(component: any, ...tokens: any[]): void {\n    unrx.kill(component, ...tokens);\n  }\n\n}\n","export function removeFromArray<T = any>(arr: T[], predicate: (value: T, index?: number) => boolean): boolean;\nexport function removeFromArray<T = any>(arr: T[], value: T): boolean;\nexport function removeFromArray<T = any>(arr: T[], values: T[]): boolean[];\nexport function removeFromArray<T = any>(arr: T[], value: T | T[] | ((value: T, index?: number) => boolean)): boolean | boolean[] {\n  if (Array.isArray(value)) {\n    return value.map( v => _removeFromArray(arr, v) );\n  } else if (typeof value === 'function') {\n    const idx = arr.findIndex(value as any);\n    if (idx > -1) {\n      arr.splice(idx, 1);\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return _removeFromArray<T>(arr, value);\n  }\n}\n\nfunction _removeFromArray<T = any>(arr: T[], value: T): boolean {\n  const idx = arr.indexOf(value);\n  if (idx > -1) {\n    arr.splice(idx, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n","/* tslint:disable:max-line-length */\nexport interface Constructor<T> extends Function {\n  new (...args: any[]): T;\n}\n\nexport type Mixin<BASE, MIXIN> = BASE & MIXIN;\n\nfunction mixObjects(base: any, mixins: any[]): void {\n  mixins.forEach(mixin => {\n    Object.getOwnPropertyNames(mixin)\n      .concat(Object.getOwnPropertySymbols(mixin) as any)\n      .forEach(name => {\n        // mixin can't override base behavior, only add\n        if (!base.hasOwnProperty(name)) {\n          // if its a property descriptor we need to rewire the context\n          const propDesc = Object.getOwnPropertyDescriptor(mixin, name);\n          if (propDesc) {\n            Object.defineProperty(base, name, propDesc);\n          } else {\n            base[name] = mixin[name];\n          }\n        }\n      });\n  });\n}\n\n/**\n * Type-less mixin\n */\nexport function MixinFree(base: any, mixin: any, extend: 'class' | 'proto' | 'both' = 'both'): any {\n  if (extend === 'proto' || extend === 'both') {\n    mixObjects(base.prototype, [mixin.prototype]);\n  }\n  if (extend === 'class' || extend === 'both') {\n    mixObjects(base, [mixin]);\n  }\n  return base as any;\n}\n\nexport function Mixin<TBASE, CBASE, T1, C1>(base: CBASE & Constructor<TBASE>, m1: C1 & Constructor<T1>): Constructor<TBASE & T1> & CBASE & C1;\nexport function Mixin<TBASE, CBASE, T1, C1, T2, C2>(base: CBASE & Constructor<TBASE>, m1: C1 & Constructor<T1>, m2: C2 & Constructor<T2>): Constructor<TBASE & T1 & T2> & CBASE & C1 & C2;\nexport function Mixin<TBASE, CBASE, T1, C1, T2, C2, T3, C3>(base: CBASE & Constructor<TBASE>, m1: C1 & Constructor<T1>, m2: C2 & Constructor<T2>, m3: C3 & Constructor<T3>): Constructor<TBASE & T1 & T2 & T3> & CBASE & C1 & C2 & C3;\nexport function Mixin<TBASE, CBASE, T1, C1, T2, C2, T3, C3, T4, C4>(base: CBASE & Constructor<TBASE>, m1: C1 & Constructor<T1>, m2: C2 & Constructor<T2>, m3: C3 & Constructor<T3>, m4: C4 & Constructor<T4>): Constructor<TBASE & T1 & T2 & T3 & T4> & CBASE & C1 & C2 & C3 & C4;\nexport function Mixin<TBASE, CBASE, T1, C1, T2, C2, T3, C3, T4, C4, T5, C5>(base: CBASE & Constructor<TBASE>, m1: C1 & Constructor<T1>, m2: C2 & Constructor<T2>, m3: C3 & Constructor<T3>, m4: C4 & Constructor<T4>, m5: C5 & Constructor<T5>): Constructor<TBASE & T1 & T2 & T3 & T4 & T5> & CBASE & C1 & C2 & C3 & C4 & C5;\nexport function Mixin<TBASE, CBASE, T1, C1, T2, C2, T3, C3, T4, C4, T5, C5, T6, C6>(base: CBASE & Constructor<TBASE>, m1: C1 & Constructor<T1>, m2: C2 & Constructor<T2>, m3: C3 & Constructor<T3>, m4: C4 & Constructor<T4>, m5: C5 & Constructor<T5>, m6: C6 & Constructor<T6>): Constructor<TBASE & T1 & T2 & T3 & T4 & T5 & T6> & CBASE & C1 & C2 & C3 & C4 & C5 & C6;\nexport function Mixin<TBASE, CBASE, T1, C1, T2, C2, T3, C3, T4, C4, T5, C5, T6, C6, T7, C7>(base: CBASE & Constructor<TBASE>, m1: C1 & Constructor<T1>, m2: C2 & Constructor<T2>, m3: C3 & Constructor<T3>, m4: C4 & Constructor<T4>, m5: C5 & Constructor<T5>, m6: C6 & Constructor<T6>, m7: C7 & Constructor<T7>): Constructor<TBASE & T1 & T2 & T3 & T4 & T5 & T6 & T7> & CBASE & C1 & C2 & C3 & C4 & C5 & C6 & C7;\n/**\n * A type friendly, class based, mixin functions that mix in instance and static members.\n *\n * EXAMPLE:\n * ```ts\n * class User_ {\n *   id: number;\n *   firstName: string;\n *   lastName: string;\n * }\n *\n * class FullName {\n *   get fullName(): string {\n *     return `${this['firstName']} ${this['lastName']}`;\n *   }\n *\n *   static createId(): number {\n *     // a shady id generator.\n *     return Date.now();\n *   }\n * }\n *\n * export const User = Mixin(User_, FullName);\n * export type User = Mixin<User_, FullName>;\n *\n * // not using it:\n * const user = new User();\n * user.id = User.createId();\n * user.firstName = 'John';\n * user.lastName = 'Doe';\n * console.log(user.fullName); // John Doe\n * ```\n *\n * > To allow Generics in static members (e.g. static createUser(): T) see MixinExt\n *\n * ## Limitations:\n * From a type perspective this utility has limitations.\n *\n * #### You can't (currently) extend a mixed in type.\n *```ts\n *  export const User = Mixin(User_, FullName);\n *\n *  export class MyExtendedUser extends User { // <- Type Error\n *  }\n *```\n *\n * ```\n * Type 'Type<User_ & FullName> & typeof FullName & typeof User_' is not a constructor function type.\n * ```\n *\n * The error is misleading, this is a current known TS limitation (see [Github Issue](https://github.com/Microsoft/TypeScript/issues/4890))\n *\n * #### You can use generic inference once, from that point the generic param types for mixin have to be explicitly set:\n * ```ts\n *   export const User = Mixin(User_, FullName); // fine\n *\n *   export const UserNumber2 = Mixin(User, OtherMixin); // Error\n * ```\n *\n * ```\n * The type argument for type parameter 'TBASE' cannot be inferred from the usage.\n * Consider specifying the type arguments explicitly.\n * Type argument candidate 'FullName' is not a valid type argument because it is not a supertype of candidate 'User_'.\n * Property 'fullName' is missing in type 'User_'.\n * ```\n * This might be related to the previous limitation, or not...\n *\n *\n * There are 2 solution:\n *\n * 1) Using the built in interface that supports up to 6 mixins at once. (base + 6)\n * ```ts\n * export const User = Mixin(User_, FullName, OtherMixin); //  FullName, OtherMixin are 2, you can rest param your way for 5 more...\n * export type User = User_ & FullName & OtherMixin\n * ```\n * > This time we cant use `Mixin` to apply the User **type** so we just do it manually...\n *\n * 2) going the long way:\n * ```ts\n *   export const User = Mixin(User_, FullName); // fine\n *\n *   export const UserNumber2 = Mixin<User, typeof User, OtherMixin, typeof OtherMixin>(User, OtherMixin);\n * ```\n *\n *\n * @param base\n * @param mixin\n */\nexport function Mixin<TBASE, CBASE, TMIXIN, CMIXIN>(base: CBASE & Constructor<TBASE>, ...mixins: Array<CMIXIN & Constructor<TMIXIN>>): Constructor<TBASE & TMIXIN> & CMIXIN & CBASE {\n  mixObjects(base.prototype, mixins.map(m => m.prototype));\n  mixObjects(base, mixins);\n  return base as any;\n}\n\nexport function MixinExt<TBASE, CBASE, SMIXIN, T1, C1>(base: CBASE & Constructor<TBASE>, extraStatic: SMIXIN, m1: C1 & Constructor<T1>): Constructor<TBASE & T1> & SMIXIN & CBASE & C1;\nexport function MixinExt<TBASE, CBASE, SMIXIN, T1, C1, T2, C2>(base: CBASE & Constructor<TBASE>, extraStatic: SMIXIN, m1: C1 & Constructor<T1>, m2: C2 & Constructor<T2>): Constructor<TBASE & T1 & T2> & SMIXIN & CBASE & C1 & C2;\nexport function MixinExt<TBASE, CBASE, SMIXIN, T1, C1, T2, C2, T3, C3>(base: CBASE & Constructor<TBASE>, extraStatic: SMIXIN, m1: C1 & Constructor<T1>, m2: C2 & Constructor<T2>, m3: C3 & Constructor<T3>): Constructor<TBASE & T1 & T2 & T3> & SMIXIN & CBASE & C1 & C2 & C3;\nexport function MixinExt<TBASE, CBASE, SMIXIN, T1, C1, T2, C2, T3, C3, T4, C4>(base: CBASE & Constructor<TBASE>, extraStatic: SMIXIN, m1: C1 & Constructor<T1>, m2: C2 & Constructor<T2>, m3: C3 & Constructor<T3>, m4: C4 & Constructor<T4>): Constructor<TBASE & T1 & T2 & T3 & T4> & SMIXIN & CBASE & C1 & C2 & C3 & C4;\nexport function MixinExt<TBASE, CBASE, SMIXIN, T1, C1, T2, C2, T3, C3, T4, C4, T5, C5>(base: CBASE & Constructor<TBASE>, extraStatic: SMIXIN, m1: C1 & Constructor<T1>, m2: C2 & Constructor<T2>, m3: C3 & Constructor<T3>, m4: C4 & Constructor<T4>, m5: C5 & Constructor<T5>): Constructor<TBASE & T1 & T2 & T3 & T4 & T5> & SMIXIN & CBASE & C1 & C2 & C3 & C4 & C5;\nexport function MixinExt<TBASE, CBASE, SMIXIN, T1, C1, T2, C2, T3, C3, T4, C4, T5, C5, T6, C6>(base: CBASE & Constructor<TBASE>, extraStatic: SMIXIN, m1: C1 & Constructor<T1>, m2: C2 & Constructor<T2>, m3: C3 & Constructor<T3>, m4: C4 & Constructor<T4>, m5: C5 & Constructor<T5>, m6: C6 & Constructor<T6>): Constructor<TBASE & T1 & T2 & T3 & T4 & T5 & T6> & SMIXIN & CBASE & C1 & C2 & C3 & C4 & C5 & C6;\nexport function MixinExt<TBASE, CBASE, SMIXIN, T1, C1, T2, C2, T3, C3, T4, C4, T5, C5, T6, C6, T7, C7>(base: CBASE & Constructor<TBASE>, extraStatic: SMIXIN, m1: C1 & Constructor<T1>, m2: C2 & Constructor<T2>, m3: C3 & Constructor<T3>, m4: C4 & Constructor<T4>, m5: C5 & Constructor<T5>, m6: C6 & Constructor<T6>, m7: C7 & Constructor<T7>): Constructor<TBASE & T1 & T2 & T3 & T4 & T5 & T6 & T7> & SMIXIN & CBASE & C1 & C2 & C3 & C4 & C5 & C6 & C7;\n/**\n * For full description see Mixin function.\n *\n * The MixinExt utility does the same as Mixin but also allows adding an extra static type to the intersection.\n *\n * Although static members are mixed in there is a situation that requires an additional static mixin.\n * In a TypeScript class we can not apply generics on static members in the class level, only in a member based level.\n * If we want to return our final mixin type from a static member (e.g: factory) we need a different type.\n *\n * Example:\n * ```ts\n * class User_ {\n *   id: number;\n *   firstName: string;\n *   lastName: string;\n * }\n *\n * class FullName {\n *   get fullName(): string {\n *     return `${this['firstName']} ${this['lastName']}`;\n *   }\n * }\n *\n * const createNew = {\n *   create(): any {\n *     return new User_(); // at this point User_ is fully mixed in.\n *   }\n * }\n *\n * interface CreateStatic<T> {\n *   create(): Mixin<T, FullName>;\n * }\n *\n * export const User = MixinExt(User_, createNew as CreateStatic<User_>, FullName );\n * export type User = Mixin<User_, FullName>;\n * ```\n *\n * > Same as Mixin, MixinExt supports up to 6 mixins but only 1 extra static member.\n * If you need more then 1 just intersect all of your extera static interfaces to 1.\n * @param base\n * @param extraStatic Optional object for extra static member, use for static functions that require generics with Generics.\n * @param mixins\n */\nexport function MixinExt<TBASE, CBASE, SMIXIN, TMIXIN, CMIXIN>(base: CBASE & Constructor<TBASE>, extraStatic: SMIXIN, ...mixins: Array<CMIXIN & Constructor<TMIXIN>>): Constructor<TBASE & TMIXIN> & CBASE & SMIXIN & CMIXIN {\n  (Mixin as any)(base, ...mixins);\n  mixObjects(base, Array.of(extraStatic));\n  return base as any;\n}\n","export function isNumber(obj: any): obj is number {\n  return typeof obj === 'number';\n}\n\nexport function isString(obj: any): obj is string {\n  return typeof obj === 'string';\n}\n\nexport function isFunction(obj: any): obj is Function {\n  return typeof obj === 'function';\n}\n\nexport function isStaticDecorator(target: any): boolean {\n  return isFunction(target);\n}\n\nconst undef = undefined;\nexport function isUndefined(obj: any): obj is undefined {\n  return obj === undef;\n}\n\nexport function ensureTargetIsType(type: any): any {\n  return isFunction(type) ? type : type.constructor;\n}\n\nexport function isJsObject(obj: any): boolean {\n  return obj !== null && (typeof obj === 'function' || typeof obj === 'object');\n}\nexport function isPrimitive(obj: any): boolean {\n  return !isJsObject(obj);\n}\n\n/**\n * See https://github.com/angular/angular/blob/2.0.0-rc.4/modules/%40angular/facade/src/lang.ts#L149\n * @param token\n * @returns\n */\nexport function stringify(token: any): string {\n  if (typeof token === 'string') {\n    return token;\n  }\n\n  if (token === undefined || token === null) {\n    return '' + token;\n  }\n\n  if (token.name) {\n    return token.name;\n  }\n  if (token.overriddenName) {\n    return token.overriddenName;\n  }\n\n  const res = token.toString();\n  const newLineIndex = res.indexOf('\\n');\n  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n","import { Constructor } from './mixin';\nimport { isFunction } from './checks';\n\n/**\n * Returns the chain of prototypes up to Object (not included)\n * @pluginApi\n * @param cls\n */\nexport function getProtoChain(cls: Constructor<any>): Array<Constructor<any>> {\n  const classes = [];\n  while (cls && cls !== Object) {\n    classes.push(cls);\n\n    const proto = Object.getPrototypeOf(cls.prototype);\n    cls = isFunction(proto) || !proto ? proto : proto.constructor;\n  }\n  return classes;\n}\n\nexport function getBaseClass(cls: Constructor<any>): Constructor<any> | void {\n  const proto = Object.getPrototypeOf(cls.prototype);\n  return !proto || isFunction(proto) ? proto : proto.constructor;\n}\n"]}