(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@pebula/utils', ['exports', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory((global.pebula = global.pebula || {}, global.pebula.utils = {}), global.rxjs, global.rxjs.operators));
}(this, function (exports, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Emits the values emitted by the source observable until a kill signal is sent to the group.
     * You can also specify a `subKillGroup` which can be used to kill specific subscriptions within a group.
     *
     * When a `killGroup` is "killed" all `subKillGroup` are killed as well. When a `subKillGroup` is "killed" the group remains
     * as well as other "subKillGroup" registered for that group.
     *
     * > WARNING: Do not apply operators that subscribe internally (e.g. combineLatest, switchMap) after the `killOnDestroy` operator.
     * Internal subscriptions will not unsubscribe automatically.
     * For more information see {\@link https://blog.angularindepth.com/rxjs-avoiding-takeuntil-leaks-fb5182d047ef | this blog post}
     * @template T
     * @param {?} killGroup
     * @param {?=} subKillGroup
     * @return {?}
     */
    function unrx(killGroup, subKillGroup) {
        return unrx.pipe(killGroup, subKillGroup);
    }
    (function (unrx) {
        /** @type {?} */
        var ALL_HANDLERS_TOKEN = {};
        /** @type {?} */
        var notifierStore = new WeakMap();
        /**
         * @param {?} component
         * @param {?=} create
         * @return {?}
         */
        function getNotifier(component, create) {
            if (create === void 0) { create = false; }
            /** @type {?} */
            var notifier = notifierStore.get(component);
            if (!notifier && create === true) {
                notifierStore.set(component, notifier = new rxjs.Subject());
            }
            return notifier;
        }
        /**
         * @param {?} killGroup
         * @param {...?} subKillGroup
         * @return {?}
         */
        function kill(killGroup) {
            var e_1, _a;
            var subKillGroup = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                subKillGroup[_i - 1] = arguments[_i];
            }
            if (subKillGroup.length === 0) {
                killAll(killGroup);
            }
            else {
                /** @type {?} */
                var notifier = getNotifier(killGroup);
                if (notifier) {
                    try {
                        for (var subKillGroup_1 = __values(subKillGroup), subKillGroup_1_1 = subKillGroup_1.next(); !subKillGroup_1_1.done; subKillGroup_1_1 = subKillGroup_1.next()) {
                            var h = subKillGroup_1_1.value;
                            notifier.next(h);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (subKillGroup_1_1 && !subKillGroup_1_1.done && (_a = subKillGroup_1.return)) _a.call(subKillGroup_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            }
        }
        unrx.kill = kill;
        /**
         * {\@inheritdoc unrx}
         * @template T
         * @param {?} killGroup
         * @param {?=} subKillGroup
         * @return {?}
         */
        function pipe(killGroup, subKillGroup) {
            return (/**
             * @param {?} source
             * @return {?}
             */
            function (source) { return source.pipe(operators.takeUntil(getNotifier(killGroup, true).pipe(operators.filter((/**
             * @param {?} h
             * @return {?}
             */
            function (h) { return h === ALL_HANDLERS_TOKEN || (subKillGroup && h === subKillGroup); }))))); });
        }
        unrx.pipe = pipe;
        /**
         * @param {?} obj
         * @return {?}
         */
        function killAll(obj) {
            /** @type {?} */
            var notifier = getNotifier(obj);
            if (notifier) {
                notifier.next(ALL_HANDLERS_TOKEN);
                notifier.complete();
                notifierStore.delete(obj);
            }
        }
    })(unrx || (unrx = {}));
    /**
     * @template T
     * @param {?=} component
     * @param {?=} handler
     * @return {?}
     */
    function UnRx(component, handler) {
        return component
            ? unrx(component, handler)
            : UnRx.decorateComponent;
    }
    (function (UnRx) {
        /** @type {?} */
        var invokeTypeStack = [];
        /** @type {?} */
        var originalOnDestroyFunctionStore = new Map();
        /**
         * @return {?}
         */
        function ngOnDestroy() {
            /** @type {?} */
            var len = invokeTypeStack.length;
            /** @type {?} */
            var type = this.constructor;
            if (len > 0) {
                /** @type {?} */
                var lastType = invokeTypeStack[len - 1];
                if (type === lastType) {
                    type = Object.getPrototypeOf(type);
                }
            }
            invokeTypeStack.push(type);
            /** @type {?} */
            var oldNgOnDestroy = originalOnDestroyFunctionStore.get(type);
            if (oldNgOnDestroy) {
                try {
                    oldNgOnDestroy.apply(this);
                }
                catch (err) {
                    invokeTypeStack = [];
                    throw err;
                }
            }
            invokeTypeStack.pop();
            if (len === 0) {
                unrx.kill(this);
            }
        }
        /**
         * @param {?} target
         * @return {?}
         */
        function decorateComponent(target) {
            /** @type {?} */
            var proto = target.prototype;
            if (proto.ngOnDestroy) {
                originalOnDestroyFunctionStore.set(target, proto.ngOnDestroy);
            }
            proto.ngOnDestroy = ngOnDestroy;
            return target;
        }
        UnRx.decorateComponent = decorateComponent;
        /**
         * @param {?} component
         * @param {...?} tokens
         * @return {?}
         */
        function kill(component) {
            var tokens = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                tokens[_i - 1] = arguments[_i];
            }
            unrx.kill.apply(unrx, __spread([component], tokens));
        }
        UnRx.kill = kill;
    })(UnRx || (UnRx = {}));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template T
     * @param {?} arr
     * @param {?} value
     * @return {?}
     */
    function removeFromArray(arr, value) {
        if (Array.isArray(value)) {
            return value.map((/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return _removeFromArray(arr, v); }));
        }
        else if (typeof value === 'function') {
            /** @type {?} */
            var idx = arr.findIndex((/** @type {?} */ (value)));
            if (idx > -1) {
                arr.splice(idx, 1);
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return _removeFromArray(arr, value);
        }
    }
    /**
     * @template T
     * @param {?} arr
     * @param {?} value
     * @return {?}
     */
    function _removeFromArray(arr, value) {
        /** @type {?} */
        var idx = arr.indexOf(value);
        if (idx > -1) {
            arr.splice(idx, 1);
            return true;
        }
        else {
            return false;
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     * @template T
     */
    function Constructor() { }
    /**
     * @param {?} base
     * @param {?} mixins
     * @return {?}
     */
    function mixObjects(base, mixins) {
        mixins.forEach((/**
         * @param {?} mixin
         * @return {?}
         */
        function (mixin) {
            Object.getOwnPropertyNames(mixin)
                .concat((/** @type {?} */ (Object.getOwnPropertySymbols(mixin))))
                .forEach((/**
             * @param {?} name
             * @return {?}
             */
            function (name) {
                // mixin can't override base behavior, only add
                if (!base.hasOwnProperty(name)) {
                    // if its a property descriptor we need to rewire the context
                    /** @type {?} */
                    var propDesc = Object.getOwnPropertyDescriptor(mixin, name);
                    if (propDesc) {
                        Object.defineProperty(base, name, propDesc);
                    }
                    else {
                        base[name] = mixin[name];
                    }
                }
            }));
        }));
    }
    /**
     * Type-less mixin
     * @param {?} base
     * @param {?} mixin
     * @param {?=} extend
     * @return {?}
     */
    function MixinFree(base, mixin, extend) {
        if (extend === void 0) { extend = 'both'; }
        if (extend === 'proto' || extend === 'both') {
            mixObjects(base.prototype, [mixin.prototype]);
        }
        if (extend === 'class' || extend === 'both') {
            mixObjects(base, [mixin]);
        }
        return (/** @type {?} */ (base));
    }
    /**
     * A type friendly, class based, mixin functions that mix in instance and static members.
     *
     * EXAMPLE:
     * ```ts
     * class User_ {
     *   id: number;
     *   firstName: string;
     *   lastName: string;
     * }
     *
     * class FullName {
     *   get fullName(): string {
     *     return `${this['firstName']} ${this['lastName']}`;
     *   }
     *
     *   static createId(): number {
     *     // a shady id generator.
     *     return Date.now();
     *   }
     * }
     *
     * export const User = Mixin(User_, FullName);
     * export type User = Mixin<User_, FullName>;
     *
     * // not using it:
     * const user = new User();
     * user.id = User.createId();
     * user.firstName = 'John';
     * user.lastName = 'Doe';
     * console.log(user.fullName); // John Doe
     * ```
     *
     * > To allow Generics in static members (e.g. static createUser(): T) see MixinExt
     *
     * ## Limitations:
     * From a type perspective this utility has limitations.
     *
     * #### You can't (currently) extend a mixed in type.
     * ```ts
     *  export const User = Mixin(User_, FullName);
     *
     *  export class MyExtendedUser extends User { // <- Type Error
     *  }
     * ```
     *
     * ```
     * Type 'Type<User_ & FullName> & typeof FullName & typeof User_' is not a constructor function type.
     * ```
     *
     * The error is misleading, this is a current known TS limitation (see [Github Issue](https://github.com/Microsoft/TypeScript/issues/4890))
     *
     * #### You can use generic inference once, from that point the generic param types for mixin have to be explicitly set:
     * ```ts
     *   export const User = Mixin(User_, FullName); // fine
     *
     *   export const UserNumber2 = Mixin(User, OtherMixin); // Error
     * ```
     *
     * ```
     * The type argument for type parameter 'TBASE' cannot be inferred from the usage.
     * Consider specifying the type arguments explicitly.
     * Type argument candidate 'FullName' is not a valid type argument because it is not a supertype of candidate 'User_'.
     * Property 'fullName' is missing in type 'User_'.
     * ```
     * This might be related to the previous limitation, or not...
     *
     *
     * There are 2 solution:
     *
     * 1) Using the built in interface that supports up to 6 mixins at once. (base + 6)
     * ```ts
     * export const User = Mixin(User_, FullName, OtherMixin); //  FullName, OtherMixin are 2, you can rest param your way for 5 more...
     * export type User = User_ & FullName & OtherMixin
     * ```
     * > This time we cant use `Mixin` to apply the User **type** so we just do it manually...
     *
     * 2) going the long way:
     * ```ts
     *   export const User = Mixin(User_, FullName); // fine
     *
     *   export const UserNumber2 = Mixin<User, typeof User, OtherMixin, typeof OtherMixin>(User, OtherMixin);
     * ```
     *
     *
     * @template TBASE, CBASE, TMIXIN, CMIXIN
     * @param {?} base
     * @param {...?} mixins
     * @return {?}
     */
    function Mixin(base) {
        var mixins = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            mixins[_i - 1] = arguments[_i];
        }
        mixObjects(base.prototype, mixins.map((/**
         * @param {?} m
         * @return {?}
         */
        function (m) { return m.prototype; })));
        mixObjects(base, mixins);
        return (/** @type {?} */ (base));
    }
    /**
     * For full description see Mixin function.
     *
     * The MixinExt utility does the same as Mixin but also allows adding an extra static type to the intersection.
     *
     * Although static members are mixed in there is a situation that requires an additional static mixin.
     * In a TypeScript class we can not apply generics on static members in the class level, only in a member based level.
     * If we want to return our final mixin type from a static member (e.g: factory) we need a different type.
     *
     * Example:
     * ```ts
     * class User_ {
     *   id: number;
     *   firstName: string;
     *   lastName: string;
     * }
     *
     * class FullName {
     *   get fullName(): string {
     *     return `${this['firstName']} ${this['lastName']}`;
     *   }
     * }
     *
     * const createNew = {
     *   create(): any {
     *     return new User_(); // at this point User_ is fully mixed in.
     *   }
     * }
     *
     * interface CreateStatic<T> {
     *   create(): Mixin<T, FullName>;
     * }
     *
     * export const User = MixinExt(User_, createNew as CreateStatic<User_>, FullName );
     * export type User = Mixin<User_, FullName>;
     * ```
     *
     * > Same as Mixin, MixinExt supports up to 6 mixins but only 1 extra static member.
     * If you need more then 1 just intersect all of your extera static interfaces to 1.
     * @template TBASE, CBASE, SMIXIN, TMIXIN, CMIXIN
     * @param {?} base
     * @param {?} extraStatic Optional object for extra static member, use for static functions that require generics with Generics.
     * @param {...?} mixins
     * @return {?}
     */
    function MixinExt(base, extraStatic) {
        var mixins = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            mixins[_i - 2] = arguments[_i];
        }
        ((/** @type {?} */ (Mixin))).apply(void 0, __spread([base], mixins));
        mixObjects(base, Array.of(extraStatic));
        return (/** @type {?} */ (base));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} obj
     * @return {?}
     */
    function isNumber(obj) {
        return typeof obj === 'number';
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    function isString(obj) {
        return typeof obj === 'string';
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    function isFunction(obj) {
        return typeof obj === 'function';
    }
    /**
     * @param {?} target
     * @return {?}
     */
    function isStaticDecorator(target) {
        return isFunction(target);
    }
    /** @type {?} */
    var undef = undefined;
    /**
     * @param {?} obj
     * @return {?}
     */
    function isUndefined(obj) {
        return obj === undef;
    }
    /**
     * @param {?} type
     * @return {?}
     */
    function ensureTargetIsType(type) {
        return isFunction(type) ? type : type.constructor;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    function isJsObject(obj) {
        return obj !== null && (typeof obj === 'function' || typeof obj === 'object');
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    function isPrimitive(obj) {
        return !isJsObject(obj);
    }
    /**
     * See https://github.com/angular/angular/blob/2.0.0-rc.4/modules/%40angular/facade/src/lang.ts#L149
     * @param {?} token
     * @return {?}
     */
    function stringify(token) {
        if (typeof token === 'string') {
            return token;
        }
        if (token === undefined || token === null) {
            return '' + token;
        }
        if (token.name) {
            return token.name;
        }
        if (token.overriddenName) {
            return token.overriddenName;
        }
        /** @type {?} */
        var res = token.toString();
        /** @type {?} */
        var newLineIndex = res.indexOf('\n');
        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Returns the chain of prototypes up to Object (not included)
     * \@pluginApi
     * @param {?} cls
     * @return {?}
     */
    function getProtoChain(cls) {
        /** @type {?} */
        var classes = [];
        while (cls && cls !== Object) {
            classes.push(cls);
            /** @type {?} */
            var proto = Object.getPrototypeOf(cls.prototype);
            cls = isFunction(proto) || !proto ? proto : proto.constructor;
        }
        return classes;
    }
    /**
     * @param {?} cls
     * @return {?}
     */
    function getBaseClass(cls) {
        /** @type {?} */
        var proto = Object.getPrototypeOf(cls.prototype);
        return !proto || isFunction(proto) ? proto : proto.constructor;
    }

    exports.Mixin = Mixin;
    exports.MixinExt = MixinExt;
    exports.MixinFree = MixinFree;
    exports.UnRx = UnRx;
    exports.ensureTargetIsType = ensureTargetIsType;
    exports.getBaseClass = getBaseClass;
    exports.getProtoChain = getProtoChain;
    exports.isFunction = isFunction;
    exports.isJsObject = isJsObject;
    exports.isNumber = isNumber;
    exports.isPrimitive = isPrimitive;
    exports.isStaticDecorator = isStaticDecorator;
    exports.isString = isString;
    exports.isUndefined = isUndefined;
    exports.removeFromArray = removeFromArray;
    exports.stringify = stringify;
    exports.ɵa = unrx;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=pebula-utils.umd.js.map
