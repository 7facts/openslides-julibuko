import { ElementRef, QueryList, OnDestroy, AfterViewInit, OnInit } from '@angular/core';
import { CdkDropList, CdkDrag, CdkDragHandle } from '@angular/cdk/drag-drop';
import { PblDropListRef } from './drop-list-ref';
import { PblDragRef } from './drag-ref';
import * as ɵngcc0 from '@angular/core';
export declare class CdkLazyDropList<T = any, DRef = any> extends CdkDropList<T> implements OnInit {
    get pblDropListRef(): PblDropListRef<DRef>;
    /**
     * Selector that will be used to determine the direct container element, starting from
     * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element
     * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)
     * of the draggable elements.
     */
    directContainerElement: string;
    _draggables: QueryList<CdkDrag>;
    originalElement: ElementRef<HTMLElement>;
    _draggablesSet: Set<CdkDrag<any>>;
    ngOnInit(): void;
    addDrag(drag: CdkDrag): void;
    removeDrag(drag: CdkDrag): boolean;
    beforeStarted(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CdkLazyDropList<any, any>, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<CdkLazyDropList<any, any>, "[cdkLazyDropList]", ["cdkLazyDropList"], { "directContainerElement": "cdkDropListDirectContainerElement"; }, {}, never>;
}
export declare class CdkLazyDrag<T = any, Z extends CdkLazyDropList<T> = CdkLazyDropList<T>, DRef = any> extends CdkDrag<T> implements OnInit, AfterViewInit, OnDestroy {
    /**
     * A class to set when the root element is not the host element. (i.e. when `cdkDragRootElement` is used).
     */
    set rootElementSelectorClass(value: string);
    get pblDragRef(): PblDragRef<DRef>;
    get cdkDropList(): Z;
    set cdkDropList(value: Z);
    _rootClass: string;
    _hostNotRoot: boolean;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CdkLazyDrag<any, any, any>, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<CdkLazyDrag<any, any, any>, "[cdkLazyDrag]", ["cdkLazyDrag"], { "rootElementSelectorClass": "cdkDragRootElementClass"; "cdkDropList": "cdkDropList"; }, {}, never>;
}
/** Handle that can be used to drag and CdkDrag instance. */
export declare class PblDragHandle extends CdkDragHandle {
    element: ElementRef<HTMLElement>;
    constructor(element: ElementRef<HTMLElement>, parentDrag?: CdkDrag);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PblDragHandle, [null, { optional: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PblDragHandle, "[pblDragHandle]", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS1kcmFnLWRyb3AuZC50cyIsInNvdXJjZXMiOlsibGF6eS1kcmFnLWRyb3AuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBRdWVyeUxpc3QsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDZGtEcm9wTGlzdCwgQ2RrRHJhZywgQ2RrRHJhZ0hhbmRsZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9kcmFnLWRyb3AnO1xuaW1wb3J0IHsgUGJsRHJvcExpc3RSZWYgfSBmcm9tICcuL2Ryb3AtbGlzdC1yZWYnO1xuaW1wb3J0IHsgUGJsRHJhZ1JlZiB9IGZyb20gJy4vZHJhZy1yZWYnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2RrTGF6eURyb3BMaXN0PFQgPSBhbnksIERSZWYgPSBhbnk+IGV4dGVuZHMgQ2RrRHJvcExpc3Q8VD4gaW1wbGVtZW50cyBPbkluaXQge1xuICAgIGdldCBwYmxEcm9wTGlzdFJlZigpOiBQYmxEcm9wTGlzdFJlZjxEUmVmPjtcbiAgICAvKipcbiAgICAgKiBTZWxlY3RvciB0aGF0IHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgdGhlIGRpcmVjdCBjb250YWluZXIgZWxlbWVudCwgc3RhcnRpbmcgZnJvbVxuICAgICAqIHRoZSBgY2RrRHJvcExpc3RgIGVsZW1lbnQgYW5kIGdvaW5nIGRvd24gdGhlIERPTS4gUGFzc2luZyBhbiBhbHRlcm5hdGUgZGlyZWN0IGNvbnRhaW5lciBlbGVtZW50XG4gICAgICogaXMgdXNlZnVsIHdoZW4gdGhlIGBjZGtEcm9wTGlzdGAgaXMgbm90IHRoZSBkaXJlY3QgcGFyZW50IChpLmUuIGFuY2VzdG9yIGJ1dCBub3QgZmF0aGVyKVxuICAgICAqIG9mIHRoZSBkcmFnZ2FibGUgZWxlbWVudHMuXG4gICAgICovXG4gICAgZGlyZWN0Q29udGFpbmVyRWxlbWVudDogc3RyaW5nO1xuICAgIF9kcmFnZ2FibGVzOiBRdWVyeUxpc3Q8Q2RrRHJhZz47XG4gICAgb3JpZ2luYWxFbGVtZW50OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PjtcbiAgICBfZHJhZ2dhYmxlc1NldDogU2V0PENka0RyYWc8YW55Pj47XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBhZGREcmFnKGRyYWc6IENka0RyYWcpOiB2b2lkO1xuICAgIHJlbW92ZURyYWcoZHJhZzogQ2RrRHJhZyk6IGJvb2xlYW47XG4gICAgYmVmb3JlU3RhcnRlZCgpOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2RrTGF6eURyYWc8VCA9IGFueSwgWiBleHRlbmRzIENka0xhenlEcm9wTGlzdDxUPiA9IENka0xhenlEcm9wTGlzdDxUPiwgRFJlZiA9IGFueT4gZXh0ZW5kcyBDZGtEcmFnPFQ+IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICAgIC8qKlxuICAgICAqIEEgY2xhc3MgdG8gc2V0IHdoZW4gdGhlIHJvb3QgZWxlbWVudCBpcyBub3QgdGhlIGhvc3QgZWxlbWVudC4gKGkuZS4gd2hlbiBgY2RrRHJhZ1Jvb3RFbGVtZW50YCBpcyB1c2VkKS5cbiAgICAgKi9cbiAgICBzZXQgcm9vdEVsZW1lbnRTZWxlY3RvckNsYXNzKHZhbHVlOiBzdHJpbmcpO1xuICAgIGdldCBwYmxEcmFnUmVmKCk6IFBibERyYWdSZWY8RFJlZj47XG4gICAgZ2V0IGNka0Ryb3BMaXN0KCk6IFo7XG4gICAgc2V0IGNka0Ryb3BMaXN0KHZhbHVlOiBaKTtcbiAgICBfcm9vdENsYXNzOiBzdHJpbmc7XG4gICAgX2hvc3ROb3RSb290OiBib29sZWFuO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbi8qKiBIYW5kbGUgdGhhdCBjYW4gYmUgdXNlZCB0byBkcmFnIGFuZCBDZGtEcmFnIGluc3RhbmNlLiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUGJsRHJhZ0hhbmRsZSBleHRlbmRzIENka0RyYWdIYW5kbGUge1xuICAgIGVsZW1lbnQ6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+O1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LCBwYXJlbnREcmFnPzogQ2RrRHJhZyk7XG59XG4iXX0=