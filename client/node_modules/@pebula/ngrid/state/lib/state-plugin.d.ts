import { Observable } from 'rxjs';
import { OnDestroy, Injector } from '@angular/core';
import { PblNgridComponent, PblNgridPluginController } from '@pebula/ngrid';
import { PblNgridStateLoadOptions, PblNgridStateSaveOptions } from './core/index';
import * as ɵngcc0 from '@angular/core';
declare module '@pebula/ngrid/lib/grid/services/config' {
    interface PblNgridConfig {
        state?: {
            /** When set to true will enable the state plugin on all table instances by default. */
            autoEnable?: boolean;
            /**
             * Options to use when auto-loading the plugin
             */
            autoEnableOptions?: {
                loadOptions?: PblNgridStateLoadOptions;
                saveOptions?: PblNgridStateSaveOptions;
            };
        };
    }
}
declare module '@pebula/ngrid/lib/ext/types' {
    interface PblNgridPluginExtension {
        state?: PblNgridStatePlugin;
    }
    interface PblNgridPluginExtensionFactories {
        state: keyof typeof PblNgridStatePlugin;
    }
}
export declare const PLUGIN_KEY: 'state';
export declare class PblNgridStatePlugin {
    grid: PblNgridComponent<any>;
    protected injector: Injector;
    protected pluginCtrl: PblNgridPluginController;
    loadOptions?: PblNgridStateLoadOptions;
    saveOptions?: PblNgridStateSaveOptions;
    afterLoadState: Observable<void>;
    afterSaveState: Observable<void>;
    onError: Observable<{
        phase: 'save' | 'load';
        error: Error;
    }>;
    private _removePlugin;
    private _events;
    constructor(grid: PblNgridComponent<any>, injector: Injector, pluginCtrl: PblNgridPluginController);
    static create(table: PblNgridComponent<any>, injector: Injector): PblNgridStatePlugin;
    load(): Promise<void>;
    save(): Promise<void>;
    destroy(): void;
    private _load;
}
export declare class PblNgridStatePluginDirective extends PblNgridStatePlugin implements OnDestroy {
    loadOptions: PblNgridStateLoadOptions;
    saveOptions: PblNgridStateSaveOptions;
    constructor(grid: PblNgridComponent<any>, injector: Injector, pluginCtrl: PblNgridPluginController);
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PblNgridStatePluginDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PblNgridStatePluginDirective, "pbl-ngrid[persistState]", never, { "loadOptions": "loadOptions"; "saveOptions": "saveOptions"; }, { "afterLoadState": "afterLoadState"; "afterSaveState": "afterSaveState"; "onError": "onError"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUtcGx1Z2luLmQudHMiLCJzb3VyY2VzIjpbInN0YXRlLXBsdWdpbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgT25EZXN0cm95LCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGJsTmdyaWRDb21wb25lbnQsIFBibE5ncmlkUGx1Z2luQ29udHJvbGxlciB9IGZyb20gJ0BwZWJ1bGEvbmdyaWQnO1xuaW1wb3J0IHsgUGJsTmdyaWRTdGF0ZUxvYWRPcHRpb25zLCBQYmxOZ3JpZFN0YXRlU2F2ZU9wdGlvbnMgfSBmcm9tICcuL2NvcmUvaW5kZXgnO1xuZGVjbGFyZSBtb2R1bGUgJ0BwZWJ1bGEvbmdyaWQvbGliL2dyaWQvc2VydmljZXMvY29uZmlnJyB7XG4gICAgaW50ZXJmYWNlIFBibE5ncmlkQ29uZmlnIHtcbiAgICAgICAgc3RhdGU/OiB7XG4gICAgICAgICAgICAvKiogV2hlbiBzZXQgdG8gdHJ1ZSB3aWxsIGVuYWJsZSB0aGUgc3RhdGUgcGx1Z2luIG9uIGFsbCB0YWJsZSBpbnN0YW5jZXMgYnkgZGVmYXVsdC4gKi9cbiAgICAgICAgICAgIGF1dG9FbmFibGU/OiBib29sZWFuO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBPcHRpb25zIHRvIHVzZSB3aGVuIGF1dG8tbG9hZGluZyB0aGUgcGx1Z2luXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGF1dG9FbmFibGVPcHRpb25zPzoge1xuICAgICAgICAgICAgICAgIGxvYWRPcHRpb25zPzogUGJsTmdyaWRTdGF0ZUxvYWRPcHRpb25zO1xuICAgICAgICAgICAgICAgIHNhdmVPcHRpb25zPzogUGJsTmdyaWRTdGF0ZVNhdmVPcHRpb25zO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5kZWNsYXJlIG1vZHVsZSAnQHBlYnVsYS9uZ3JpZC9saWIvZXh0L3R5cGVzJyB7XG4gICAgaW50ZXJmYWNlIFBibE5ncmlkUGx1Z2luRXh0ZW5zaW9uIHtcbiAgICAgICAgc3RhdGU/OiBQYmxOZ3JpZFN0YXRlUGx1Z2luO1xuICAgIH1cbiAgICBpbnRlcmZhY2UgUGJsTmdyaWRQbHVnaW5FeHRlbnNpb25GYWN0b3JpZXMge1xuICAgICAgICBzdGF0ZToga2V5b2YgdHlwZW9mIFBibE5ncmlkU3RhdGVQbHVnaW47XG4gICAgfVxufVxuZXhwb3J0IGRlY2xhcmUgY29uc3QgUExVR0lOX0tFWTogJ3N0YXRlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBibE5ncmlkU3RhdGVQbHVnaW4ge1xuICAgIGdyaWQ6IFBibE5ncmlkQ29tcG9uZW50PGFueT47XG4gICAgcHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3RvcjtcbiAgICBwcm90ZWN0ZWQgcGx1Z2luQ3RybDogUGJsTmdyaWRQbHVnaW5Db250cm9sbGVyO1xuICAgIGxvYWRPcHRpb25zPzogUGJsTmdyaWRTdGF0ZUxvYWRPcHRpb25zO1xuICAgIHNhdmVPcHRpb25zPzogUGJsTmdyaWRTdGF0ZVNhdmVPcHRpb25zO1xuICAgIGFmdGVyTG9hZFN0YXRlOiBPYnNlcnZhYmxlPHZvaWQ+O1xuICAgIGFmdGVyU2F2ZVN0YXRlOiBPYnNlcnZhYmxlPHZvaWQ+O1xuICAgIG9uRXJyb3I6IE9ic2VydmFibGU8e1xuICAgICAgICBwaGFzZTogJ3NhdmUnIHwgJ2xvYWQnO1xuICAgICAgICBlcnJvcjogRXJyb3I7XG4gICAgfT47XG4gICAgcHJpdmF0ZSBfcmVtb3ZlUGx1Z2luO1xuICAgIHByaXZhdGUgX2V2ZW50cztcbiAgICBjb25zdHJ1Y3RvcihncmlkOiBQYmxOZ3JpZENvbXBvbmVudDxhbnk+LCBpbmplY3RvcjogSW5qZWN0b3IsIHBsdWdpbkN0cmw6IFBibE5ncmlkUGx1Z2luQ29udHJvbGxlcik7XG4gICAgc3RhdGljIGNyZWF0ZSh0YWJsZTogUGJsTmdyaWRDb21wb25lbnQ8YW55PiwgaW5qZWN0b3I6IEluamVjdG9yKTogUGJsTmdyaWRTdGF0ZVBsdWdpbjtcbiAgICBsb2FkKCk6IFByb21pc2U8dm9pZD47XG4gICAgc2F2ZSgpOiBQcm9taXNlPHZvaWQ+O1xuICAgIGRlc3Ryb3koKTogdm9pZDtcbiAgICBwcml2YXRlIF9sb2FkO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUGJsTmdyaWRTdGF0ZVBsdWdpbkRpcmVjdGl2ZSBleHRlbmRzIFBibE5ncmlkU3RhdGVQbHVnaW4gaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIGxvYWRPcHRpb25zOiBQYmxOZ3JpZFN0YXRlTG9hZE9wdGlvbnM7XG4gICAgc2F2ZU9wdGlvbnM6IFBibE5ncmlkU3RhdGVTYXZlT3B0aW9ucztcbiAgICBjb25zdHJ1Y3RvcihncmlkOiBQYmxOZ3JpZENvbXBvbmVudDxhbnk+LCBpbmplY3RvcjogSW5qZWN0b3IsIHBsdWdpbkN0cmw6IFBibE5ncmlkUGx1Z2luQ29udHJvbGxlcik7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==