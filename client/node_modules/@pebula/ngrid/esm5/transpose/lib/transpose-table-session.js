/**
 * @fileoverview added by tsickle
 * Generated from: lib/transpose-table-session.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isObservable, of as obsOf, from as obsFrom } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { UnRx } from '@pebula/utils';
/** @type {?} */
export var LOCAL_COLUMN_DEF = Symbol('LOCAL_COLUMN_DEF');
/** @type {?} */
export var VIRTUAL_REFRESH = {};
var TransposeTableSession = /** @class */ (function () {
    function TransposeTableSession(grid, pluginCtrl, updateColumns, sourceFactoryWrapper) {
        this.grid = grid;
        this.pluginCtrl = pluginCtrl;
        this.updateColumns = updateColumns;
        this.sourceFactoryWrapper = sourceFactoryWrapper;
        this.init();
        if (grid.columns && grid.columnApi.visibleColumns.length > 0) {
            this.onInvalidateHeaders();
        }
        this.onDataSource(this.grid.ds);
    }
    /**
     * @param {?} updateTable
     * @return {?}
     */
    TransposeTableSession.prototype.destroy = /**
     * @param {?} updateTable
     * @return {?}
     */
    function (updateTable) {
        if (!this.destroyed) {
            this.destroyed = true;
            UnRx.kill(this, this.grid);
            this.grid.showHeader = this.headerRow;
            this.grid.columns = this.columnsInput;
            if (updateTable) {
                this.grid.invalidateColumns();
                this.grid.ds.refresh(VIRTUAL_REFRESH);
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    TransposeTableSession.prototype.init = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.headerRow = this.grid.showHeader;
        this.grid.showHeader = false;
        this.pluginCtrl.events
            .pipe(UnRx(this, this.grid))
            .subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e.kind === 'onInvalidateHeaders' && _this.onInvalidateHeaders(); }));
        this.pluginCtrl.events
            .pipe(UnRx(this, this.grid))
            .subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e.kind === 'onDataSource' && _this.onDataSource(e.curr); }));
    };
    /**
     * @private
     * @return {?}
     */
    TransposeTableSession.prototype.onInvalidateHeaders = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.grid.columns[LOCAL_COLUMN_DEF]) {
            this.columnsInput = this.grid.columns;
            this.storeColumns = this.grid.columnApi.visibleColumns;
            this.updateColumns();
        }
    };
    /**
     * @private
     * @param {?=} ds
     * @return {?}
     */
    TransposeTableSession.prototype.onDataSource = /**
     * @private
     * @param {?=} ds
     * @return {?}
     */
    function (ds) {
        var _this = this;
        this.unPatchDataSource();
        if (ds) {
            this.ds = ds;
            this.dsSourceFactory = ds.adapter.sourceFactory;
            this.ds.adapter.sourceFactory = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                /** @type {?} */
                var rawSource = event.data.changed && event.data.curr === VIRTUAL_REFRESH
                    ? _this.ds.source
                    : _this.dsSourceFactory(event);
                if (rawSource === false) {
                    return rawSource;
                }
                else if (_this.destroyed) {
                    _this.unPatchDataSource();
                    return _this.rawSource;
                }
                /** @type {?} */
                var obs = isObservable(rawSource)
                    ? rawSource
                    : Array.isArray(rawSource) ? obsOf(rawSource) : obsFrom(rawSource) // promise...
                ;
                return obs
                    .pipe(tap((/**
                 * @param {?} source
                 * @return {?}
                 */
                function (source) { return _this.rawSource = source; })), map(_this.sourceFactoryWrapper));
            });
        }
    };
    /**
     * @private
     * @return {?}
     */
    TransposeTableSession.prototype.unPatchDataSource = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.ds) {
            this.ds.adapter.sourceFactory = this.dsSourceFactory;
            this.ds = this.dsSourceFactory = undefined;
        }
    };
    return TransposeTableSession;
}());
export { TransposeTableSession };
if (false) {
    /** @type {?} */
    TransposeTableSession.prototype.dsSourceFactory;
    /** @type {?} */
    TransposeTableSession.prototype.ds;
    /** @type {?} */
    TransposeTableSession.prototype.columnsInput;
    /** @type {?} */
    TransposeTableSession.prototype.storeColumns;
    /** @type {?} */
    TransposeTableSession.prototype.headerRow;
    /**
     * @type {?}
     * @private
     */
    TransposeTableSession.prototype.destroyed;
    /**
     * @type {?}
     * @private
     */
    TransposeTableSession.prototype.rawSource;
    /**
     * @type {?}
     * @private
     */
    TransposeTableSession.prototype.grid;
    /**
     * @type {?}
     * @private
     */
    TransposeTableSession.prototype.pluginCtrl;
    /**
     * @type {?}
     * @private
     */
    TransposeTableSession.prototype.updateColumns;
    /**
     * @type {?}
     * @private
     */
    TransposeTableSession.prototype.sourceFactoryWrapper;
}
//# sourceMappingURL=data:application/json;base64,