/**
 * @fileoverview added by tsickle
 * Generated from: lib/grid/services/grid-registry.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __decorate, __metadata, __read, __spread } from "tslib";
import { Subject } from 'rxjs';
import { Injectable, Optional, SkipSelf, } from '@angular/core';
import { UnRx } from '@pebula/utils';
import * as i0 from "@angular/core";
/**
 * @record
 */
export function RegistryChangedEvent() { }
if (false) {
    /** @type {?} */
    RegistryChangedEvent.prototype.op;
    /** @type {?} */
    RegistryChangedEvent.prototype.type;
    /** @type {?} */
    RegistryChangedEvent.prototype.value;
}
/**
 * A map of valid single-item value that can be registered, and their type.
 * @record
 */
export function PblNgridSingleRegistryMap() { }
if (false) {
    /** @type {?|undefined} */
    PblNgridSingleRegistryMap.prototype.noData;
    /** @type {?|undefined} */
    PblNgridSingleRegistryMap.prototype.paginator;
}
/**
 * A map of valid multi-item value that can be registered, and their type (the single type, i.e. T in Array<T>)
 * @record
 */
export function PblNgridMultiRegistryMap() { }
if (false) {
    /** @type {?|undefined} */
    PblNgridMultiRegistryMap.prototype.headerCell;
    /** @type {?|undefined} */
    PblNgridMultiRegistryMap.prototype.tableCell;
    /** @type {?|undefined} */
    PblNgridMultiRegistryMap.prototype.editorCell;
    /** @type {?|undefined} */
    PblNgridMultiRegistryMap.prototype.footerCell;
    /** @type {?|undefined} */
    PblNgridMultiRegistryMap.prototype.dataHeaderExtensions;
}
/**
 * A Registry for templates of table parts.
 *
 * The registry is hierarchical, where each instance of a registry has a parent which allows cascading templates.
 * The hierarchy is manged by angular DI.
 *
 * > The root registry does not have a parent.
 *
 * Each instance of a registry (including root) is a hierarchy by itself, composed of 2 internal levels.
 * The first level (L1 below) is used for fixed templates, the second level (L2 below) is used for dynamic templates.
 *
 * - Root Registry
 *   - Child Registry
 *     - ChildOfChild Registry
 *
 * In the example above there are 3 registries: Root, Child and ChildOfChild.
 *
 * When searching for a template in `ChildOfChild` it will search in the following order (top to bottom):
 *   - ChildOfChild
 *   - Child
 *   - Root
 *
 * If a registry does not contain the template the search will move to the next one.
 */
var PblNgridRegistryService = /** @class */ (function () {
    function PblNgridRegistryService(_parent) {
        this._parent = _parent;
        this._multi = {};
        this._multiDefaults = {};
        this._singles = {};
        this.changes$ = new Subject();
        this.changes = this.changes$.asObservable();
        if (this._parent) {
            this._parent.changes.pipe(UnRx(this)).subscribe(this.changes$);
            this.root = this._parent.root;
        }
        else {
            this.root = this;
        }
    }
    Object.defineProperty(PblNgridRegistryService.prototype, "parent", {
        get: /**
         * @return {?}
         */
        function () { return this._parent; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PblNgridRegistryService.prototype.getRoot = /**
     * @return {?}
     */
    function () { return this.root; };
    /**
     * Returns the registered value for the single `kind`.
     * If not found will try to search the parent.
     */
    /**
     * Returns the registered value for the single `kind`.
     * If not found will try to search the parent.
     * @template P
     * @param {?} kind
     * @return {?}
     */
    PblNgridRegistryService.prototype.getSingle = /**
     * Returns the registered value for the single `kind`.
     * If not found will try to search the parent.
     * @template P
     * @param {?} kind
     * @return {?}
     */
    function (kind) {
        return this._singles[kind] || (this._parent && this._parent.getSingle(kind));
    };
    /**
     * @template P
     * @param {?} kind
     * @param {?} value
     * @return {?}
     */
    PblNgridRegistryService.prototype.setSingle = /**
     * @template P
     * @param {?} kind
     * @param {?} value
     * @return {?}
     */
    function (kind, value) {
        /** @type {?} */
        var previous = this.getSingle(kind);
        if (value !== previous) {
            this._singles[kind] = value;
            this.emitChanges({ op: value ? 'add' : 'remove', type: kind, value: value });
        }
    };
    /**
     * Returns the registered default value for the multi `kind`.
     * If not found will try to search the parent.
     */
    /**
     * Returns the registered default value for the multi `kind`.
     * If not found will try to search the parent.
     * @template P
     * @param {?} kind
     * @return {?}
     */
    PblNgridRegistryService.prototype.getMultiDefault = /**
     * Returns the registered default value for the multi `kind`.
     * If not found will try to search the parent.
     * @template P
     * @param {?} kind
     * @return {?}
     */
    function (kind) {
        return this._multiDefaults[kind] || (this._parent && this._parent.getMultiDefault(kind));
    };
    /**
     * @template P
     * @param {?} kind
     * @param {?} value
     * @return {?}
     */
    PblNgridRegistryService.prototype.setMultiDefault = /**
     * @template P
     * @param {?} kind
     * @param {?} value
     * @return {?}
     */
    function (kind, value) {
        /** @type {?} */
        var previous = this.getMultiDefault(kind);
        if (value !== previous) {
            this._multiDefaults[kind] = value;
            this.emitChanges({ op: value ? 'add' : 'remove', type: kind, value: value });
        }
    };
    /**
     * Returns the registered values for the multi `kind`.
     * If not found WILL NOT search the parent.
     */
    /**
     * Returns the registered values for the multi `kind`.
     * If not found WILL NOT search the parent.
     * @template T
     * @param {?} kind
     * @return {?}
     */
    PblNgridRegistryService.prototype.getMulti = /**
     * Returns the registered values for the multi `kind`.
     * If not found WILL NOT search the parent.
     * @template T
     * @param {?} kind
     * @return {?}
     */
    function (kind) {
        return (/** @type {?} */ (this._multi[kind]));
    };
    /**
     * @template T
     * @param {?} kind
     * @param {?} cellDef
     * @return {?}
     */
    PblNgridRegistryService.prototype.addMulti = /**
     * @template T
     * @param {?} kind
     * @param {?} cellDef
     * @return {?}
     */
    function (kind, cellDef) {
        /** @type {?} */
        var multi = this.getMulti(kind) || (this._multi[kind] = []);
        multi.push(cellDef);
        if (cellDef.name === '*') {
            this.setMultiDefault(kind, cellDef);
        }
        this.emitChanges({ op: 'add', type: kind, value: cellDef });
    };
    /**
     * @template T
     * @param {?} kind
     * @param {?} cellDef
     * @return {?}
     */
    PblNgridRegistryService.prototype.removeMulti = /**
     * @template T
     * @param {?} kind
     * @param {?} cellDef
     * @return {?}
     */
    function (kind, cellDef) {
        /** @type {?} */
        var multi = this.getMulti(kind);
        if (multi) {
            /** @type {?} */
            var idx = multi.indexOf(cellDef);
            if (idx > -1) {
                multi.splice(idx, 1);
            }
            this.emitChanges({ op: 'remove', type: kind, value: cellDef });
        }
    };
    /**
     * Iterate over all multi-registry value of the provided `kind` ascending order, starting from the last ancestor (this registry) up to
     * the root parent.
     *
     * Each time a collection for the `kind` is found the handler is invoked and then repeating the process on the parent.
     * If the `kind` does not exist the handler is not called moving on to the next parent.
     *
     * To bail out (stop the process and don't iterate to the next parent), return true from the handler.
     *
     * @returns The number of times that handler was invoked, i.e 0 means no matches.
     */
    /**
     * Iterate over all multi-registry value of the provided `kind` ascending order, starting from the last ancestor (this registry) up to
     * the root parent.
     *
     * Each time a collection for the `kind` is found the handler is invoked and then repeating the process on the parent.
     * If the `kind` does not exist the handler is not called moving on to the next parent.
     *
     * To bail out (stop the process and don't iterate to the next parent), return true from the handler.
     *
     * @template T
     * @param {?} kind
     * @param {?} handler
     * @return {?} The number of times that handler was invoked, i.e 0 means no matches.
     */
    PblNgridRegistryService.prototype.forMulti = /**
     * Iterate over all multi-registry value of the provided `kind` ascending order, starting from the last ancestor (this registry) up to
     * the root parent.
     *
     * Each time a collection for the `kind` is found the handler is invoked and then repeating the process on the parent.
     * If the `kind` does not exist the handler is not called moving on to the next parent.
     *
     * To bail out (stop the process and don't iterate to the next parent), return true from the handler.
     *
     * @template T
     * @param {?} kind
     * @param {?} handler
     * @return {?} The number of times that handler was invoked, i.e 0 means no matches.
     */
    function (kind, handler) {
        /** @type {?} */
        var registry = this;
        /** @type {?} */
        var hasSome = 0;
        while (registry) {
            /** @type {?} */
            var values = registry.getMulti(kind);
            if (values) {
                hasSome++;
                if (handler(values) === true) {
                    return;
                }
            }
            registry = registry.parent;
        }
        return hasSome;
    };
    /**
     * @return {?}
     */
    PblNgridRegistryService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.changes$.complete();
    };
    /**
     * Delay all notifications sent through `changes` and buffer then until next call to `bufferEnd()`.
     * When `bufferEnd()` is called it will flush all changes.
     *
     * > It's important to note that buffering does not freeze the registry, adding and removing templates will change the
     * registry and will effect queries. Buffering block the `changes` event stream and nothing more.
     */
    /**
     * Delay all notifications sent through `changes` and buffer then until next call to `bufferEnd()`.
     * When `bufferEnd()` is called it will flush all changes.
     *
     * > It's important to note that buffering does not freeze the registry, adding and removing templates will change the
     * registry and will effect queries. Buffering block the `changes` event stream and nothing more.
     * @return {?}
     */
    PblNgridRegistryService.prototype.bufferStart = /**
     * Delay all notifications sent through `changes` and buffer then until next call to `bufferEnd()`.
     * When `bufferEnd()` is called it will flush all changes.
     *
     * > It's important to note that buffering does not freeze the registry, adding and removing templates will change the
     * registry and will effect queries. Buffering block the `changes` event stream and nothing more.
     * @return {?}
     */
    function () {
        if (!this.root.bufferedData) {
            this.root.bufferedData = [];
        }
    };
    /**
     * @return {?}
     */
    PblNgridRegistryService.prototype.bufferEnd = /**
     * @return {?}
     */
    function () {
        if (this.root.bufferedData) {
            /** @type {?} */
            var data = this.root.bufferedData;
            this.root.bufferedData = undefined;
            this.emitChanges(data);
        }
    };
    /**
     * @private
     * @param {?} events
     * @return {?}
     */
    PblNgridRegistryService.prototype.emitChanges = /**
     * @private
     * @param {?} events
     * @return {?}
     */
    function (events) {
        var _a;
        /** @type {?} */
        var e = Array.isArray(events) ? events : [events];
        if (this.root.bufferedData) {
            (_a = this.root.bufferedData).push.apply(_a, __spread(e));
        }
        else {
            this.changes$.next(e);
        }
    };
    PblNgridRegistryService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    PblNgridRegistryService.ctorParameters = function () { return [
        { type: PblNgridRegistryService, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    /** @nocollapse */ PblNgridRegistryService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PblNgridRegistryService_Factory() { return new PblNgridRegistryService(i0.ɵɵinject(PblNgridRegistryService, 12)); }, token: PblNgridRegistryService, providedIn: "root" });
    /**
     * A Registry for templates of table parts.
     *
     * The registry is hierarchical, where each instance of a registry has a parent which allows cascading templates.
     * The hierarchy is manged by angular DI.
     *
     * > The root registry does not have a parent.
     *
     * Each instance of a registry (including root) is a hierarchy by itself, composed of 2 internal levels.
     * The first level (L1 below) is used for fixed templates, the second level (L2 below) is used for dynamic templates.
     *
     * - Root Registry
     *   - Child Registry
     *     - ChildOfChild Registry
     *
     * In the example above there are 3 registries: Root, Child and ChildOfChild.
     *
     * When searching for a template in `ChildOfChild` it will search in the following order (top to bottom):
     *   - ChildOfChild
     *   - Child
     *   - Root
     *
     * If a registry does not contain the template the search will move to the next one.
     */
    PblNgridRegistryService = __decorate([
        UnRx(),
        __metadata("design:paramtypes", [PblNgridRegistryService])
    ], PblNgridRegistryService);
    return PblNgridRegistryService;
}());
export { PblNgridRegistryService };
if (false) {
    /** @type {?} */
    PblNgridRegistryService.prototype.changes;
    /**
     * @type {?}
     * @protected
     */
    PblNgridRegistryService.prototype.root;
    /**
     * @type {?}
     * @protected
     */
    PblNgridRegistryService.prototype._multi;
    /**
     * @type {?}
     * @protected
     */
    PblNgridRegistryService.prototype._multiDefaults;
    /**
     * @type {?}
     * @protected
     */
    PblNgridRegistryService.prototype._singles;
    /**
     * @type {?}
     * @protected
     */
    PblNgridRegistryService.prototype.changes$;
    /**
     * @type {?}
     * @private
     */
    PblNgridRegistryService.prototype._parent;
}
//# sourceMappingURL=data:application/json;base64,