/**
 * @fileoverview added by tsickle
 * Generated from: lib/grid/meta-rows/meta-row.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __decorate, __metadata } from "tslib";
import { Directive, Input, ElementRef, Attribute } from '@angular/core';
import { UnRx } from '@pebula/utils';
import { PblNgridMetaRowService } from './meta-row.service';
var PblMetaRowDirective = /** @class */ (function () {
    function PblMetaRowDirective(metaRows, elRef, gridWidthRow) {
        this.metaRows = metaRows;
        this.elRef = elRef;
        this.gridWidthRow = gridWidthRow !== null;
    }
    Object.defineProperty(PblMetaRowDirective.prototype, "meta", {
        // tslint:disable-next-line:no-input-rename
        get: 
        // tslint:disable-next-line:no-input-rename
        /**
         * @return {?}
         */
        function () { return this._meta; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._meta) {
                this.update(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PblMetaRowDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.metaRows.removeMetaRow(this);
    };
    /**
     * @private
     * @param {?} meta
     * @return {?}
     */
    PblMetaRowDirective.prototype.update = /**
     * @private
     * @param {?} meta
     * @return {?}
     */
    function (meta) {
        /** @type {?} */
        var oldMeta = this._meta;
        if (oldMeta) {
            if (oldMeta.rowClassName) {
                this.elRef.nativeElement.classList.remove(oldMeta.rowClassName);
            }
            this.metaRows.removeMetaRow(this);
        }
        this._meta = meta;
        if (meta) {
            if (meta.rowClassName) {
                this.elRef.nativeElement.classList.add(meta.rowClassName);
            }
            this.metaRows.addMetaRow(this);
        }
    };
    PblMetaRowDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[pblMetaRow]',
                },] }
    ];
    /** @nocollapse */
    PblMetaRowDirective.ctorParameters = function () { return [
        { type: PblNgridMetaRowService },
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Attribute, args: ['gridWidthRow',] }] }
    ]; };
    PblMetaRowDirective.propDecorators = {
        meta: [{ type: Input, args: ['pblMetaRow',] }]
    };
    PblMetaRowDirective = __decorate([
        UnRx(),
        __metadata("design:paramtypes", [PblNgridMetaRowService,
            ElementRef, Object])
    ], PblMetaRowDirective);
    return PblMetaRowDirective;
}());
export { PblMetaRowDirective };
if (false) {
    /** @type {?} */
    PblMetaRowDirective.prototype.gridWidthRow;
    /**
     * @type {?}
     * @private
     */
    PblMetaRowDirective.prototype._meta;
    /** @type {?} */
    PblMetaRowDirective.prototype.metaRows;
    /** @type {?} */
    PblMetaRowDirective.prototype.elRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YS1yb3cuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBlYnVsYS9uZ3JpZC8iLCJzb3VyY2VzIjpbImxpYi9ncmlkL21ldGEtcm93cy9tZXRhLXJvdy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFhLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3JDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDOztJQW9CMUQsNkJBQTRCLFFBQWdDLEVBQ3pDLEtBQThCLEVBQ1YsWUFBaUI7UUFGNUIsYUFBUSxHQUFSLFFBQVEsQ0FBd0I7UUFDekMsVUFBSyxHQUFMLEtBQUssQ0FBeUI7UUFFL0MsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLEtBQUssSUFBSSxDQUFDO0lBQzVDLENBQUM7SUFmRCxzQkFBeUIscUNBQUk7UUFEN0IsMkNBQTJDOzs7Ozs7UUFDM0MsY0FBeUQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzs7Ozs7UUFDN0UsVUFBUyxLQUE0QjtZQUNuQyxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3BCO1FBQ0gsQ0FBQzs7O09BTDRFOzs7O0lBaUI3RSx5Q0FBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQyxDQUFDOzs7Ozs7SUFFTyxvQ0FBTTs7Ozs7SUFBZCxVQUFlLElBQTJCOztZQUNsQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUs7UUFFMUIsSUFBSSxPQUFPLEVBQUU7WUFDWCxJQUFHLE9BQU8sQ0FBQyxZQUFZLEVBQUU7Z0JBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQ2pFO1lBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbkM7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLElBQUksRUFBRTtZQUNSLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtnQkFDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDM0Q7WUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoQztJQUNILENBQUM7O2dCQTVDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGNBQWM7aUJBQ3pCOzs7O2dCQUpRLHNCQUFzQjtnQkFMSixVQUFVO2dEQTJCdEIsU0FBUyxTQUFDLGNBQWM7Ozt1QkFicEMsS0FBSyxTQUFDLFlBQVk7O0lBSFIsbUJBQW1CO1FBRC9CLElBQUksRUFBRTt5Q0FlaUMsc0JBQXNCO1lBQ2xDLFVBQVU7T0FmekIsbUJBQW1CLENBeUMvQjtJQUFELDBCQUFDO0NBQUEsSUFBQTtTQXpDWSxtQkFBbUI7OztJQVU5QiwyQ0FBc0M7Ozs7O0lBRXRDLG9DQUFxQzs7SUFFekIsdUNBQWdEOztJQUNoRCxvQ0FBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBFbGVtZW50UmVmLCBPbkRlc3Ryb3ksIEF0dHJpYnV0ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IFVuUnggfSBmcm9tICdAcGVidWxhL3V0aWxzJztcblxuaW1wb3J0IHsgUGJsTWV0YVJvd0RlZmluaXRpb25zIH0gZnJvbSAnLi4vY29sdW1ucy90eXBlcyc7XG5pbXBvcnQgeyBQYmxOZ3JpZE1ldGFSb3dTZXJ2aWNlIH0gZnJvbSAnLi9tZXRhLXJvdy5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3BibE1ldGFSb3ddJyxcbn0pXG5AVW5SeCgpXG5leHBvcnQgY2xhc3MgUGJsTWV0YVJvd0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWlucHV0LXJlbmFtZVxuICBASW5wdXQoJ3BibE1ldGFSb3cnKSBnZXQgbWV0YSgpOiBQYmxNZXRhUm93RGVmaW5pdGlvbnMgeyByZXR1cm4gdGhpcy5fbWV0YTsgfVxuICBzZXQgbWV0YSh2YWx1ZTogUGJsTWV0YVJvd0RlZmluaXRpb25zKSB7XG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLl9tZXRhKSB7XG4gICAgICB0aGlzLnVwZGF0ZSh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlYWRvbmx5IGdyaWRXaWR0aFJvdzogYm9vbGVhbjtcblxuICBwcml2YXRlIF9tZXRhOiBQYmxNZXRhUm93RGVmaW5pdGlvbnM7XG5cbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IG1ldGFSb3dzOiBQYmxOZ3JpZE1ldGFSb3dTZXJ2aWNlLFxuICAgICAgICAgICAgICBwdWJsaWMgZWxSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICAgICAgICBAQXR0cmlidXRlKCdncmlkV2lkdGhSb3cnKSBncmlkV2lkdGhSb3c6IGFueSkge1xuICAgIHRoaXMuZ3JpZFdpZHRoUm93ID0gZ3JpZFdpZHRoUm93ICE9PSBudWxsO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5tZXRhUm93cy5yZW1vdmVNZXRhUm93KHRoaXMpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGUobWV0YTogUGJsTWV0YVJvd0RlZmluaXRpb25zKTogdm9pZCB7XG4gICAgY29uc3Qgb2xkTWV0YSA9IHRoaXMuX21ldGE7XG5cbiAgICBpZiAob2xkTWV0YSkge1xuICAgICAgaWYob2xkTWV0YS5yb3dDbGFzc05hbWUpIHtcbiAgICAgICAgdGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUob2xkTWV0YS5yb3dDbGFzc05hbWUpO1xuICAgICAgfVxuICAgICAgdGhpcy5tZXRhUm93cy5yZW1vdmVNZXRhUm93KHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLl9tZXRhID0gbWV0YTtcbiAgICBpZiAobWV0YSkge1xuICAgICAgaWYgKG1ldGEucm93Q2xhc3NOYW1lKSB7XG4gICAgICAgIHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKG1ldGEucm93Q2xhc3NOYW1lKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubWV0YVJvd3MuYWRkTWV0YVJvdyh0aGlzKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==