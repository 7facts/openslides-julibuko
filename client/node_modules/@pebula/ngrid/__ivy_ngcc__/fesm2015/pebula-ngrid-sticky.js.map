{"version":3,"file":"pebula-ngrid-sticky.js","sources":["ng:/@pebula/ngrid/sticky/lib/sticky/sticky-plugin.ts","ng:/@pebula/ngrid/sticky/lib/sticky.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { filter } from 'rxjs/operators';\nimport { Directive, Input, IterableDiffers, IterableDiffer, IterableChangeRecord, OnDestroy } from '@angular/core';\n\nimport { PblNgridComponent, PblNgridPluginController, NgridPlugin } from '@pebula/ngrid';\n\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    sticky?: PblNgridStickyPluginDirective;\n  }\n}\n\nexport const PLUGIN_KEY: 'sticky' = 'sticky';\n\nexport function setStickyRow(grid: PblNgridComponent<any>, type: 'header' | 'footer', bulk: Array<['table' | number, boolean]>): void;\nexport function setStickyRow(grid: PblNgridComponent<any>, type: 'header' | 'footer', value: 'table' | number, state: boolean): void;\nexport function setStickyRow(grid: PblNgridComponent<any>, type: 'header' | 'footer', valueOrBulk: Array<['table' | number, boolean]> | 'table' | number, state?: boolean): void {\n  const isHeader = type === 'header';\n  const queryList = isHeader ? grid._headerRowDefs : grid._footerRowDefs;\n  const bulk: Array<['table' | number, boolean]> = Array.isArray(valueOrBulk) ? valueOrBulk : [ [valueOrBulk, state] ];\n\n  const addOneIfMainExists = (isHeader && grid.showHeader) || (!isHeader && grid.showFooter) ? 1 : 0;\n\n  let changed: boolean;\n  for (const [value, state] of bulk) {\n    // the index from the user is 0 based or the grid header/footer row.\n    // we store them both, so we need to convert... our first is always the grid header/footer and then we have the same order as the user's.\n    let idx = value === 'table' ? 0 : value + addOneIfMainExists;\n    if (!isHeader) {\n      // sticky-styler stickRows() methods will reverse the order of footer columns\n      // so we actually need to set another row to make the row we want sticky.\n      // we could reverse the collection, but choosing the opposite side is better.\n      // think [0, 1, 2, 3, 4] and we want 1. sticky-styler will reverse to [4, 3, 2, 1, 0] so doing nothing will stick 3.\n      // the opposite is length MINUS 1 MINUS index which is 5 - 1 - 1 which is 3, in the revered array its the row 1 which is what we wanted.\n      idx = (queryList.length - 1) - idx;\n    }\n\n    const rowDef = queryList.toArray()[idx];\n    if (rowDef && rowDef.sticky !== state) {\n      rowDef.sticky = state;\n      changed = true;\n    }\n  }\n\n  if (changed) {\n    if (isHeader) {\n      grid._cdkTable.updateStickyHeaderRowStyles();\n    } else {\n      grid._cdkTable.updateStickyFooterRowStyles();\n    }\n  }\n}\n\nexport function setStickyColumns(grid: PblNgridComponent<any>, type: 'start' | 'end', bulk: Array<[string | number, boolean]>): void;\nexport function setStickyColumns(grid: PblNgridComponent<any>, type: 'start' | 'end', value: string  | number, state: boolean): void;\nexport function setStickyColumns(grid: PblNgridComponent<any>, type: 'start' | 'end', valueOrBulk: Array<[string  | number, boolean]> | string  | number, state?: boolean): void {\n  const bulk: Array<[string | number, boolean]> = Array.isArray(valueOrBulk) ? valueOrBulk : [ [valueOrBulk, state] ];\n  let changed: boolean;\n  for (let [columnId, state] of bulk) {\n    if (typeof columnId === 'string') {\n      columnId = grid.columnApi.visibleColumns.findIndex( c => c.orgProp === columnId );\n    }\n    const c = grid.columnApi.visibleColumns[columnId];\n    if (c) {\n      changed = true;\n      c.pin = state ? type : undefined;\n      if (type === 'end') {\n        c.columnDef.stickyEnd = state;\n        c.columnDef.sticky = false;\n      } else {\n        c.columnDef.sticky = state;\n        c.columnDef.stickyEnd = false;\n      }\n    }\n  }\n  if (changed) {\n    grid._cdkTable.updateStickyColumnStyles();\n  }\n}\n\n@NgridPlugin({ id: PLUGIN_KEY })\n@Directive({ selector: 'pbl-ngrid[stickyColumnStart], pbl-ngrid[stickyColumnEnd], pbl-ngrid[stickyHeader], pbl-ngrid[stickyFooter]' })\nexport class PblNgridStickyPluginDirective implements OnDestroy {\n  /**\n   * Set the header rows you want to apply sticky positioning to.\n   * Valid values are:\n   *   - `grid` - Literal string `grid` that will set the grid's main header row.\n   *   - number  - The index of the row, for multi-header row. The index refers to the order you defined the header/headerGroup rows (base 0);\n   *\n   * For performance considerations only new values will trigger a change (i.e. the array should be treated as immutable).\n   * Manipulating the array will not trigger a change (the sticky state will not change) unless sending a copy of it (replacing it, e.g. Array.slice())\n   */\n  @Input() set stickyColumnStart(value: Array<string | number>) {\n    if (!this._startDiffer) {\n      this._startDiffer = this._differs.find([]).create();\n    }\n    this.applyColumnDiff('start', value, this._startDiffer);\n  }\n\n  /**\n   * Set the footer rows you want to apply sticky positioning to.\n   * Valid values are:\n   *   - `grid` - Literal string `grid` that will set the grid's main footer row.\n   *   - number  - The index of the row, for multi-footer row. The index refers to the order you defined the footer rows (base 0);\n   *\n   * For performance considerations only new values will trigger a change (i.e. the array should be treated as immutable).\n   * Manipulating the array will not trigger a change (the sticky state will not change) unless sending a copy of it (replacing it, e.g. Array.slice())\n   */\n  @Input() set stickyColumnEnd(value: Array<string | number>) {\n    if (!this._endDiffer) {\n      this._endDiffer = this._differs.find([]).create();\n    }\n    this.applyColumnDiff('end', value, this._endDiffer);\n  }\n\n    /**\n   * Set the header rows you want to apply sticky positioning to.\n   * Valid values are:\n   *   - `grid` - Literal string `grid` that will set the grid's main header row.\n   *   - number  - The index of the row, for multi-header row. The index refers to the order you defined the header/headerGroup rows (base 0);\n   *\n   * For performance considerations only new values will trigger a change (i.e. the array should be treated as immutable).\n   * Manipulating the array will not trigger a change (the sticky state will not change) unless sending a copy of it (replacing it, e.g. Array.slice())\n   */\n  @Input() set stickyHeader(value: Array<'table' | number>) {\n    if (!this._headerDiffer) {\n      this._headerDiffer = this._differs.find([]).create();\n    }\n    this.applyRowDiff('header', value, this._headerDiffer);\n  }\n\n  /**\n   * Set the footer rows you want to apply sticky positioning to.\n   * Valid values are:\n   *   - `grid` - Literal string `grid` that will set the grid's main footer row.\n   *   - number  - The index of the row, for multi-footer row. The index refers to the order you defined the footer rows (base 0);\n   *\n   * For performance considerations only new values will trigger a change (i.e. the array should be treated as immutable).\n   * Manipulating the array will not trigger a change (the sticky state will not change) unless sending a copy of it (replacing it, e.g. Array.slice())\n   */\n  @Input() set stickyFooter(value: Array<'table' | number>) {\n    if (!this._footerDiffer) {\n      this._footerDiffer = this._differs.find([]).create();\n    }\n    this.applyRowDiff('footer', value, this._footerDiffer);\n  }\n\n  private _startDiffer: IterableDiffer<string | number>;\n  private _endDiffer: IterableDiffer<string | number>;\n  private _headerDiffer: IterableDiffer<'table' | number>;\n  private _footerDiffer: IterableDiffer<'table' | number>;\n\n  private _columnCache: { start: Array<string | number>; end: Array<string | number>; } = { start: [], end: [] };\n  private _removePlugin: (grid: PblNgridComponent<any>) => void;\n\n  constructor (protected readonly grid: PblNgridComponent<any>,\n               protected readonly _differs: IterableDiffers,\n               protected readonly pluginCtrl: PblNgridPluginController) {\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n\n    pluginCtrl.events\n      .pipe(filter( e => e.kind === 'onResizeRow'))\n      .subscribe( () => {\n        this.grid._cdkTable.updateStickyHeaderRowStyles();\n        this.grid._cdkTable.updateStickyColumnStyles();\n        this.grid._cdkTable.updateStickyFooterRowStyles();\n      });\n\n      pluginCtrl.events\n        .pipe(filter ( e => e.kind === 'onInvalidateHeaders' ))\n        .subscribe( () => {\n          if (this._startDiffer && this.grid.isInit) {\n            this._startDiffer.diff([]);\n            this.applyColumnDiff('start', this._columnCache.start, this._startDiffer)\n          }\n\n          if (this._endDiffer && this.grid.isInit) {\n            this._endDiffer.diff([]);\n            this.applyColumnDiff('end', this._columnCache.end, this._endDiffer)\n          }\n        });\n  }\n\n  ngOnDestroy(): void {\n    this._removePlugin(this.grid);\n  }\n\n  protected applyColumnDiff(type: 'start' | 'end', value: Array<string | number>, differ: IterableDiffer<string | number>): void {\n    if (!this.grid.isInit) {\n      const unsub = this.pluginCtrl.events.subscribe( event => {\n        if (event.kind === 'onInit') {\n          unsub.unsubscribe();\n          this.applyColumnDiff(type, value, differ);\n        }\n      });\n      return;\n    }\n\n    this._columnCache[type] = value || [];\n\n    const changes = differ.diff(value || []);\n    const bulk: Array<[string | number, boolean]> = [];\n    changes.forEachOperation((record: IterableChangeRecord<string | number>, prevIndex: number, currentIndex: number) => {\n      if (record.previousIndex == null) {\n        bulk.push([record.item, true]);\n      } else if (currentIndex == null) {\n        bulk.push([record.item, false]);\n      }\n    });\n    if (bulk.length > 0) {\n      setStickyColumns(this.grid, type, bulk);\n    }\n  }\n\n  protected applyRowDiff(type: 'header' | 'footer', value: Array<'table' | number>, differ: IterableDiffer<'table' | number>): void {\n    if (!this.grid.isInit) {\n      const unsub = this.pluginCtrl.events.subscribe( event => {\n        if (event.kind === 'onInit') {\n          unsub.unsubscribe();\n          this.applyRowDiff(type, value, differ);\n        }\n      });\n      return;\n    }\n\n    const changes = differ.diff(value || []);\n    const bulk: Array<['table' | number, boolean]> = [];\n    changes.forEachOperation((record: IterableChangeRecord<'table' | number>, prevIndex: number, currentIndex: number) => {\n      if (record.previousIndex == null) {\n        bulk.push([record.item, true]);\n      } else if (currentIndex == null) {\n        bulk.push([record.item, false]);\n      }\n    });\n    if (bulk.length > 0) {\n      setStickyRow(this.grid, type, bulk);\n    }\n  }\n}\n","import { filter, first } from 'rxjs/operators';\nimport { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { PblNgridModule, PblNgridPluginController, PblNgridConfigService } from '@pebula/ngrid';\nimport { PblNgridStickyPluginDirective, setStickyRow, setStickyColumns } from './sticky/sticky-plugin';\n\ndeclare module '@pebula/ngrid/lib/grid/services/config' {\n  interface PblNgridConfig {\n    stickyPlugin?: {\n      headers?: Array<'table' | number>;\n      footers?: Array<'table' | number>;\n      columnStart?: Array<string | number>;\n      columnEnd?: Array<string | number>;\n    }\n  }\n}\n\nconst MAPPER = <T>(v: T): [T, boolean] => [v, true];\n\n@NgModule({\n  imports: [ CommonModule, CdkTableModule, PblNgridModule ],\n  declarations: [ PblNgridStickyPluginDirective ],\n  exports: [ PblNgridStickyPluginDirective ],\n})\nexport class PblNgridStickyModule {\n  constructor(@Optional() @SkipSelf() parentModule: PblNgridStickyModule,\n              configService: PblNgridConfigService) {\n    if (parentModule) {\n      return;\n    }\n\n    PblNgridPluginController.created\n      .subscribe( event => {\n        const { table, controller } = event;\n        if (controller && !controller.hasPlugin('sticky')) {\n          controller.events\n            .pipe( filter( e => e.kind === 'onInit' ), first() )\n            .subscribe( event => {\n              const stickyPluginConfig = configService.get('stickyPlugin');\n              if (stickyPluginConfig) {\n                if (stickyPluginConfig.headers) {\n                  setStickyRow(table, 'header', stickyPluginConfig.headers.map(MAPPER));\n                }\n                if (stickyPluginConfig.footers) {\n                  setStickyRow(table, 'footer', stickyPluginConfig.footers.map(MAPPER));\n                }\n                if (stickyPluginConfig.columnStart) {\n                  setStickyColumns(table, 'start', stickyPluginConfig.columnStart.map(MAPPER));\n                }\n                if (stickyPluginConfig.columnEnd) {\n                  setStickyColumns(table, 'end', stickyPluginConfig.columnEnd.map(MAPPER));\n                }\n              }\n            });\n        }\n      });\n  }\n}\n"]}