{"version":3,"file":"pebula-ngrid-state.js","sources":["ng:/@pebula/ngrid/state/lib/core/state-visor.ts","ng:/@pebula/ngrid/state/lib/core/persistance/local-storage.ts","ng:/@pebula/ngrid/state/lib/core/models/state.ts","ng:/@pebula/ngrid/state/lib/core/models/options.ts","ng:/@pebula/ngrid/state/lib/core/handling/base.ts","ng:/@pebula/ngrid/state/lib/core/identification/index.ts","ng:/@pebula/ngrid/state/lib/core/utils.ts","ng:/@pebula/ngrid/state/lib/core/state.ts","ng:/@pebula/ngrid/state/lib/core/built-in-handlers/grid-primitives/index.ts","ng:/@pebula/ngrid/state/lib/core/built-in-handlers/column-def/children.ts","ng:/@pebula/ngrid/state/lib/core/built-in-handlers/column-def/index.ts","ng:/@pebula/ngrid/state/lib/core/built-in-handlers/column-order/index.ts","ng:/@pebula/ngrid/state/lib/core/built-in-handlers/index.ts","ng:/@pebula/ngrid/state/lib/presets.ts","ng:/@pebula/ngrid/state/lib/core/built-in-handlers/_register.ts","ng:/@pebula/ngrid/state/lib/state-plugin.ts","ng:/@pebula/ngrid/state/lib/ngrid-state.module.ts"],"names":["U.normalizeOptions","U.resolveId","U.createChunkSectionContext","U.stateKeyPredicateFactory","U.createChunkContext","U.serialize","U.deserialize"],"mappings":"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","sourcesContent":["import { PblNgridGlobalState, StateChunks, RootStateChunks, PblNgridStateChunkSectionContext } from './models/index';\nimport { PblNgridStateChunkHandlerDefinition } from './handling';\n\nexport let _instance: StateVisor;\n\nexport interface PblNgridStateChunkSectionConfig<T extends keyof RootStateChunks = keyof RootStateChunks> {\n  stateMatcher: (state: PblNgridGlobalState) => RootStateChunks[T]['state'];\n  sourceMatcher: (context: PblNgridStateChunkSectionContext) => RootStateChunks[T]['value'];\n}\n\nexport class StateVisor<T extends keyof StateChunks = keyof StateChunks> {\n\n  private rootChunkSections = new Map<keyof RootStateChunks, PblNgridStateChunkSectionConfig<keyof RootStateChunks>>();\n  private chunkHandlers = new Map<T, PblNgridStateChunkHandlerDefinition<T>[]>();\n\n  private constructor() { }\n\n  static get(): StateVisor { return _instance || (_instance = new StateVisor()); }\n\n  registerRootChunkSection<Z extends keyof RootStateChunks>(chunkId: Z, config: PblNgridStateChunkSectionConfig<Z>): void {\n    if (!this.rootChunkSections.has(chunkId)) {\n      this.rootChunkSections.set(chunkId, config);\n    }\n  }\n\n  registerChunkHandlerDefinition<Z extends T>(chunkHandlerDefs: PblNgridStateChunkHandlerDefinition<Z>): void {\n    const { chunkId } = chunkHandlerDefs;\n    const handlersForGroup = this.chunkHandlers.get(chunkId) || [];\n    handlersForGroup.push(chunkHandlerDefs);\n    this.chunkHandlers.set(chunkId, handlersForGroup);\n  }\n\n  getRootSections(): Array<[keyof RootStateChunks, PblNgridStateChunkSectionConfig<keyof RootStateChunks>]> {\n    return Array.from(this.rootChunkSections.entries());\n  }\n\n  getDefinitionsForSection(chunkId: T): PblNgridStateChunkHandlerDefinition<T>[] {\n    return this.chunkHandlers.get(chunkId) || [];\n  }\n}\n\nexport const stateVisor: StateVisor = StateVisor.get();\n","import { PblNgridGlobalState, PblNgridPersistAdapter } from '../models/index';\n\nexport class PblNgridLocalStoragePersistAdapter implements PblNgridPersistAdapter {\n  private static globalStateKey: string = 'pebulaNgridState';\n\n  save(id: string, state: PblNgridGlobalState): Promise<void> {\n    try {\n      const store = this.loadGlobalStateStore();\n      store[id] = state;\n      if (!state.__metadata__) {\n        state.__metadata__ = {} as any;\n      }\n      state.__metadata__.updatedAt = new Date().toISOString();\n\n      this.saveGlobalStateStore(store);\n      return Promise.resolve();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n\n  load(id: string): Promise<PblNgridGlobalState> {\n    return Promise.resolve(this.loadGlobalStateStore()[id] || {} as any);\n  }\n\n  exists(id: string): Promise<boolean> {\n    const store = this.loadGlobalStateStore() || {};\n    return Promise.resolve(id in store);\n  }\n\n  private loadGlobalStateStore(): { [id: string]: PblNgridGlobalState } {\n    const raw = localStorage.getItem(PblNgridLocalStoragePersistAdapter.globalStateKey);\n    return raw ? JSON.parse(raw) : {};\n  }\n\n  private saveGlobalStateStore(store: { [id: string]: PblNgridGlobalState }): void {\n    localStorage.setItem(PblNgridLocalStoragePersistAdapter.globalStateKey, JSON.stringify(store));\n  }\n}\n","import { PblNgridComponent, PblNgridExtensionApi } from '@pebula/ngrid';\nimport * as B from '../built-in-handlers/index';\nimport { PblNgridStateOptions } from './options';\n\n/* ======================= State Chunks */\n\nexport interface StateChunkItem<TState, TValue, TData = any, TKeyless = never> {\n  state: TState;\n  value?: TValue;\n  data?: TData;\n  keyless: TKeyless;\n}\n\nexport interface RootStateChunks extends B.BuiltInRootStateChunks { }\n\nexport interface StateChunks extends RootStateChunks, B.BuiltInStateChunks{ }\n\nexport interface PblNgridStateContext {\n  grid: PblNgridComponent;\n  extApi: PblNgridExtensionApi;\n  options: PblNgridStateOptions;\n}\n\nexport interface PblNgridStateChunkSectionContext extends PblNgridStateContext { }\n\nexport interface PblNgridStateChunkContext<T extends keyof StateChunks> extends PblNgridStateChunkSectionContext {\n  source: StateChunks[T]['value'];\n  data?: StateChunks[T]['data']\n  runChildChunk?<TChild extends keyof StateChunks>(childChunkId: TChild, state: StateChunks[TChild]['state'], source: StateChunks[TChild]['value'], data?: StateChunks[TChild]['data']);\n}\n\n/* ======================= State Chunks */\n\n/* ======================= Global State Object */\n\nexport interface PblNgridStateMetadata {\n  updatedAt: string;\n}\n\nexport interface PblNgridGlobalState extends B.PblNgridBuiltInGlobalState {\n  __metadata__: PblNgridStateMetadata;\n}\n\n/* ======================= Global State Object */\n","import { RootStateChunks, StateChunks, PblNgridGlobalState, PblNgridStateContext } from './state';\n\n/**\n * An interface for datasource specific logical units that can load and save state objects.\n *\n * For example, `PblNgridLocalStoragePersistAdapter` is an adapter that can loan and save the state\n * from the local storage.\n */\nexport interface PblNgridPersistAdapter {\n  save(id: string, state: PblNgridGlobalState): Promise<void>;\n  load(id: string): Promise<PblNgridGlobalState>;\n  exists(id: string): Promise<boolean>;\n}\n\n/**\n * An interface for logical units that can resolve a unique id for a grid.\n *\n * For example, `PblNgridIdAttributeIdentResolver` is a resolver that will resolve an id from the\n * `id` property of the grid (`PblNgridComponent.id`) which is bound to the `id` attribute of the grid (`<pbl-ngrid id=\"SOME ID\"></pbl-ngrid>`).\n */\nexport interface PblNgridIdentResolver {\n  resolveId(ctx: PblNgridIdentResolverContext): string | undefined;\n}\n\n/**\n * The context provided when resolving an id (`PblNgridIdentResolver`).\n */\nexport interface PblNgridIdentResolverContext extends PblNgridStateContext { }\n\n\nexport type StateChunkKeyFilter = {\n  [P in keyof StateChunks]?:\n    P extends keyof RootStateChunks\n      ? RootStateChunks[P]['keyless'] extends never ? (Array<keyof RootStateChunks[P]['state']> | boolean) : boolean\n      : Array<keyof StateChunks[P]['state']> | boolean\n    ;\n}\n\nexport interface PblNgridStateSaveOptions {\n  /**\n   * The adapter to use for persistance.\n   * @default PblNgridLocalStoragePersistAdapter\n   */\n  persistenceAdapter?: PblNgridPersistAdapter\n\n  /**\n   * The resolver used to get the unique id for an instance of the grid.\n   * If not set default's to the id property of `PblNgridComponent` which is the id attribute of `<pbl-ngrid>`\n   * @default PblNgridIdAttributeIdentResolver\n   */\n  identResolver?: PblNgridIdentResolver;\n\n  /**\n   * Instruction of chunk and chunk keys to include when serializing / deserializing.\n   * Include is strict, only the included chunks and keys are used, everything else is ignored.\n   *\n   * If `include` and `exclude` are set, `include` wins.\n   *\n   * Note that when using include with child chunks you must include the root chunk of the child chunk, if not\n   * the root chunk is skipped and so the child.\n   *\n   * For example, to include the `width` key of the `dataColumn` child chunk we must also include the `columns` root chunk.\n   *\n   * ```ts\n   *   const obj: StateChunkKeyFilter = {\n   *     columns: true,\n   *     dataColumn: [\n   *       'width',\n   *     ]\n   *   };\n   * ```\n   *\n   * We can also use the wildcard `true` to include all items in a chunk:\n   *\n   * ```ts\n   *   const obj: StateChunkKeyFilter = {\n   *     columns: true,\n   *     dataColumn: true,\n   *   };\n   * ```\n   *\n   * Same specificity rule apply here as well, `columns: true` alone will not include all of it's child chunks so we must add `dataColumn: true`.\n   * Vice versa, `dataColumn: true` alone will not get included because it's parent (`columns`) is blocked\n   */\n  include?: StateChunkKeyFilter;\n\n  /**\n   * Instruction of chunk and chunk keys to exclude when serializing / deserializing.\n   * Exclude is not strict, all known chunks and keys are used unless they are excluded and so will be ignored\n   *\n   * If `include` and `exclude` are set, `include` wins.\n   *\n   */\n  exclude?: StateChunkKeyFilter;\n}\n\nexport interface PblNgridStateLoadOptions extends PblNgridStateSaveOptions {\n  /**\n   * When set to `overwrite`, state values will run over existing runtime values.\n   * When set to `merge`, state values will not run over existing runtime values and only update values that are not set.\n   * @default overwrite\n   */\n  strategy?: 'overwrite' | 'merge';\n\n  /**\n   * When set to true the loading process will try to avoid the use of grid methods that force an immediate redrew.\n   * Usually, redrawing is not a problem but in some cases it is required, for example, avoiding redraws is useful when\n   * we load the state after the columns are initiated but before the grid draws them, in this case some of the data is\n   * missing because it depend on updates from the draw process.\n   *\n   * We use the term `avoid` because the state plugin is extensible so a plugin can also apply state for it's own use.\n   * Because of that we can't guarantee that no redraw is performed.\n   */\n  avoidRedraw?: boolean;\n}\n\nexport type PblNgridStateOptions = PblNgridStateLoadOptions | PblNgridStateSaveOptions\n","import { StateChunks, PblNgridStateChunkContext } from '../models/index';\nimport { stateVisor } from '../state-visor';\n\nexport class PblNgridStateChunkHandlerHost<T extends keyof StateChunks, Z extends keyof StateChunks[T]['state'] = keyof StateChunks[T]['state']> {\n  private keys = new Set<Z>();\n  private rKeys = new Set<Z>();\n  private sFn: Parameters<PblNgridStateChunkHandlerHost<T, Z>['serialize']>[0];\n  private dFn: Parameters<PblNgridStateChunkHandlerHost<T, Z>['deserialize']>[0];\n\n  constructor(private chunkId: T) { }\n\n  handleKeys(...keys: Array<Z>): this {\n    for (const k of keys) { this.keys.add(k) }\n    return this;\n  }\n\n  /**\n   * Required keys are keys that cannot get excluded.\n   * Either by adding the to the `exclude` option or by omitting them from the `include` option.\n   */\n  requiredKeys(...keys: Array<Z>): this {\n    for (const k of keys) {\n      this.keys.add(k)\n      this.rKeys.add(k);\n    }\n    return this;\n  }\n\n  serialize(fn: (key: Z, ctx: PblNgridStateChunkContext<T>) => StateChunks[T]['state'][Z]): this {\n    this.sFn = fn;\n    return this;\n  }\n\n  deserialize(fn: (key: Z, stateValue: StateChunks[T]['state'][Z],  ctx: PblNgridStateChunkContext<T>) => void): this {\n    this.dFn = fn;\n    return this;\n  }\n\n  register(): void {\n    if (this.keys.size === 0) {\n      throw new Error('Invalid state chunk handler, no keys defined.');\n    }\n    if (!this.sFn) {\n      throw new Error('Invalid state chunk handler, missing serialize handler.');\n    }\n    if (!this.dFn) {\n      throw new Error('Invalid state chunk handler, missing deserialize handler.');\n    }\n\n    stateVisor.registerChunkHandlerDefinition({\n      chunkId: this.chunkId,\n      keys: Array.from(this.keys.values()),\n      rKeys: Array.from(this.rKeys.values()),\n      serialize: this.sFn,\n      deserialize: this.dFn,\n    })\n  }\n}\n\nexport interface PblNgridStateChunkHandlerDefinition<T extends keyof StateChunks, Z extends keyof StateChunks[T]['state'] = keyof StateChunks[T]['state']>{\n  chunkId: T;\n  keys: Array<Z>;\n  rKeys: Array<Z>;\n  serialize: Parameters<PblNgridStateChunkHandlerHost<T, Z>['serialize']>[0];\n  deserialize: Parameters<PblNgridStateChunkHandlerHost<T, Z>['deserialize']>[0];\n}\n\nexport function createStateChunkHandler<T extends keyof StateChunks>(section: T) {\n  return new PblNgridStateChunkHandlerHost(section);\n}\n","import { PblNgridIdentResolver, PblNgridIdentResolverContext } from '../models/index';\n\nexport class PblNgridIdAttributeIdentResolver implements PblNgridIdentResolver {\n  resolveId(ctx: PblNgridIdentResolverContext): string | undefined {\n    return ctx.grid.id;\n  }\n}\n","import { PblNgridComponent, PblNgridPluginController, PblNgridExtensionApi } from '@pebula/ngrid';\nimport {\n  RootStateChunks,\n  StateChunks,\n  PblNgridStateChunkSectionContext,\n  PblNgridStateChunkContext,\n  PblNgridStateOptions,\n  PblNgridStateLoadOptions,\n} from './models/index';\nimport { PblNgridStateChunkHandlerDefinition } from './handling/base';\nimport { stateVisor, PblNgridStateChunkSectionConfig } from './state-visor';\nimport { PblNgridLocalStoragePersistAdapter } from './persistance/local-storage';\nimport { PblNgridIdAttributeIdentResolver } from './identification/index';\n\n/**\n * Pick Partial No Partial\n * Like Pick but some are partial some are not partial\n */\nexport type PickPNP<T, P extends keyof T, NP extends keyof T> = Partial<Pick<T, P>> & Pick<T, NP>\n\nexport function resolveId(grid: PblNgridComponent, options?: PblNgridStateOptions): string {\n  const id = options.identResolver.resolveId(createChunkSectionContext(grid, options));\n  if (!id) {\n    throw new Error('Could not resolve a unique id for an ngrid instance, state is disabled');\n  }\n  return id;\n}\n\nexport function serialize(def: PblNgridStateChunkHandlerDefinition<any>, state: any, ctx: PblNgridStateChunkContext<any>): void {\n  const keyPredicate = stateKeyPredicateFactory(def.chunkId, ctx.options);\n  for (const key of def.keys) {\n    if (!keyPredicate || def.rKeys.indexOf(key) > -1 || keyPredicate(key as string)) {\n      state[key] = def.serialize(key, ctx);\n    }\n  }\n}\n\nexport function deserialize(def: PblNgridStateChunkHandlerDefinition<any>, state: any, ctx: PblNgridStateChunkContext<any>): void {\n  const keyPredicate = stateKeyPredicateFactory(def.chunkId, ctx.options);\n  for (const key of def.keys) {\n    if (key in state) {\n      if (!keyPredicate || def.rKeys.indexOf(key) > -1 || keyPredicate(key as string)) {\n        def.deserialize(key, state[key], ctx);\n      }\n    }\n  }\n}\n\nexport function normalizeOptions(mode: 'save', options?: PblNgridStateOptions): PblNgridStateOptions;\nexport function normalizeOptions(mode: 'load', options?: PblNgridStateLoadOptions): PblNgridStateLoadOptions;\nexport function normalizeOptions(mode: 'save' | 'load', options?: PblNgridStateOptions | PblNgridStateLoadOptions): PblNgridStateOptions | PblNgridStateLoadOptions {\n  if (!options) {\n    options = {} as any;\n  }\n\n  if (!options.persistenceAdapter) {\n    options.persistenceAdapter = new PblNgridLocalStoragePersistAdapter();\n  }\n  if (!options.identResolver) {\n    options.identResolver = new PblNgridIdAttributeIdentResolver();\n  }\n\n  if (mode === 'load') {\n    const opt: PblNgridStateLoadOptions = options;\n    if (!opt.strategy) {\n      opt.strategy = 'overwrite'\n    }\n  }\n\n  return options;\n}\n\nexport function getExtApi(grid: PblNgridComponent): PblNgridExtensionApi {\n  const controller = PblNgridPluginController.find(grid);\n  if (controller) {\n    return controller.extApi;\n  }\n}\n\nexport function createChunkSectionContext(grid: PblNgridComponent,\n                                          options: PblNgridStateOptions | PblNgridStateLoadOptions): PblNgridStateChunkSectionContext {\n  return { grid, extApi: getExtApi(grid), options };\n}\n\nexport function createChunkContext<T extends keyof RootStateChunks>(sectionContext: PblNgridStateChunkSectionContext,\n                                                                   chunkConfig: PblNgridStateChunkSectionConfig<T>,\n                                                                   mode: 'serialize' | 'deserialize'): PblNgridStateChunkContext<T> {\n  return {\n    ...sectionContext,\n    source: chunkConfig.sourceMatcher(sectionContext),\n    runChildChunk<TChild extends keyof StateChunks>(childChunkId: TChild, state: StateChunks[TChild]['state'], source: StateChunks[TChild]['value'], data?: StateChunks[TChild]['data']) {\n      const childContext = { ...sectionContext, source, data };\n      const defs = stateVisor.getDefinitionsForSection(childChunkId);\n\n      const action = mode === 'serialize' ? serialize : deserialize;\n      for (const def of defs) {\n        action(def, state, childContext);\n      }\n    }\n  }\n}\n\nexport function stateKeyPredicateFactory(chunkId: keyof StateChunks, options: PblNgridStateOptions, rootPredicate = false): ((key: string) => boolean) | undefined {\n  // TODO: chunkId ans options include/exclude combination does not change\n  // we need to cache it... e.g. each column def will create a new predicate if we don't cache.\n  const filter = options.include || options.exclude;\n  if (filter) {\n    // -1: Exclude, 1: Include\n    const mode: -1 | 1 = filter === options.include ? 1 : -1;\n    const chunkFilter: boolean | string[] = filter[chunkId];\n    if (typeof chunkFilter === 'boolean') {\n      return mode === 1\n        ? (key: string) => chunkFilter\n        : (key: string) => !chunkFilter\n      ;\n    } else if (Array.isArray(chunkFilter)) {\n      if (rootPredicate) {\n        // root predicate is for RootStateChunks and when set to true\n        // the key itself has no impact on the predicate. If the filter is boolean nothing changes\n        // but if it's an array, the array is ignored and considered as true ignoring the key because a key does not existing when checking the root\n        return k => true;\n      } else {\n        return mode === 1\n          ? (key: string) => chunkFilter.indexOf(key) > -1\n          : (key: string) => chunkFilter.indexOf(key) === -1\n        ;\n      }\n    } else if (mode === 1) {\n      return (key: string) => false\n    }\n  }\n}\n","import { PblNgridComponent } from '@pebula/ngrid';\nimport { PblNgridGlobalState, PblNgridStateOptions, PblNgridStateSaveOptions, PblNgridStateLoadOptions } from './models/index';\nimport { stateVisor } from './state-visor';\nimport * as U from './utils';\n\nexport function hasState(grid: PblNgridComponent, options?: PblNgridStateOptions): Promise<boolean> {\n  return Promise.resolve()\n    .then( () => {\n      options = U.normalizeOptions('save', options);\n      const id = U.resolveId(grid, options);\n      return options.persistenceAdapter.exists(id);\n    });\n}\n\nexport function saveState(grid: PblNgridComponent, options?: PblNgridStateSaveOptions): Promise<void> {\n  return Promise.resolve()\n    .then( () => {\n      options = U.normalizeOptions('save', options);\n      const id = U.resolveId(grid, options);\n      const state: PblNgridGlobalState = {} as any;\n      const context = U.createChunkSectionContext(grid, options);\n\n      for (const [chunkId, chunkConfig] of stateVisor.getRootSections()) {\n        const keyPredicate = U.stateKeyPredicateFactory(chunkId, options, true);\n\n        if (!keyPredicate || keyPredicate(chunkId)) {\n          const sectionState = chunkConfig.stateMatcher(state);\n          const chunkContext = U.createChunkContext(context, chunkConfig, 'serialize');\n\n          const defs = stateVisor.getDefinitionsForSection(chunkId);\n          for (const def of defs) {\n            U.serialize(def, sectionState, chunkContext);\n          }\n        }\n      }\n      return options.persistenceAdapter.save(id, state);\n    });\n}\n\nexport function loadState(grid: PblNgridComponent, options?: PblNgridStateLoadOptions): Promise<PblNgridGlobalState> {\n  return Promise.resolve()\n    .then( () => {\n      options = U.normalizeOptions('load', options);\n      const id = U.resolveId(grid, options);\n      return options.persistenceAdapter.load(id)\n        .then( state => {\n          const context = U.createChunkSectionContext(grid, options);\n\n          for (const [chunkId, chunkConfig] of stateVisor.getRootSections()) {\n            const keyPredicate = U.stateKeyPredicateFactory(chunkId, options, true);\n\n            if (!keyPredicate || keyPredicate(chunkId)) {\n              const sectionState = chunkConfig.stateMatcher(state);\n              const chunkContext = U.createChunkContext(context, chunkConfig, 'deserialize');\n\n              const defs = stateVisor.getDefinitionsForSection(chunkId);\n              for (const def of defs) {\n                U.deserialize(def, sectionState, chunkContext);\n              }\n            }\n          }\n          return state;\n        });\n    });\n}\n","import { PblNgridComponent } from '@pebula/ngrid';\nimport { PickPNP } from '../../utils';\nimport { createStateChunkHandler } from '../../handling';\nimport { stateVisor } from '../../state-visor';\n\nexport interface PblNgridSurfaceState extends\n  PickPNP <\n    PblNgridComponent,\n    'showHeader' | 'showFooter' | 'focusMode' | 'usePagination' | 'hideColumns' | 'fallbackMinHeight',\n    never\n  > { }\n\nexport function registerGridHandlers() {\n  stateVisor.registerRootChunkSection(\n    'grid',\n    {\n      sourceMatcher: ctx => ctx.grid,\n      stateMatcher: state => state.grid || (state.grid = {} as any)\n    }\n  );\n\n  createStateChunkHandler('grid')\n    .handleKeys('showHeader', 'showFooter', 'focusMode', 'usePagination', 'hideColumns', 'fallbackMinHeight')\n    .serialize( (key, ctx) => ctx.source[key] )\n    .deserialize( (key, stateValue, ctx) => {\n      // We must assert the type starting from 3.5 onwards\n      // See \"Fixes to unsound writes to indexed access types\" in https://devblogs.microsoft.com/typescript/announcing-typescript-3-5\n      ctx.source[key as any] = stateValue;\n    })\n    .register();\n}\n","import { PblColumnTypeDefinition, PblColumn, PblColumnDefinition, PblMetaRowDefinitions } from '@pebula/ngrid';\nimport { createStateChunkHandler } from '../../handling';\n\nexport function registerColumnDefChildHandlers() {\n  /* ====================================================================================================================================================== */\n\n  createStateChunkHandler('dataColumn')\n    .requiredKeys('id', 'prop')\n    .handleKeys(\n      'label', 'css', 'type', 'width', 'minWidth', 'maxWidth',              // PblNgridBaseColumnState (all optional)\n      'headerType', 'footerType', 'sort', 'sortAlias', 'editable', 'pin'    // All Optional\n    )\n    .serialize( (key, ctx) => {\n      const c = ctx.data.activeColumn || ctx.data.pblColumn;\n      if (c) {\n        switch (key) {\n          case 'prop':\n            return c.orgProp;\n          default:\n            break;\n        }\n      }\n\n      const value = c ? c[key] : ctx.source[key];\n\n      switch (key) {\n        case 'sort':\n          if (typeof value === 'boolean') {\n            return value;\n          } else {\n            return;\n          }\n        default:\n          break;\n      }\n\n      return value;\n    })\n    .deserialize( (key, stateValue, ctx) => {\n      const { activeColumn } = ctx.data;\n      if (activeColumn) {\n        switch (key) {\n          case 'width':\n            activeColumn.updateWidth(stateValue as any);\n            break;\n        }\n      }\n      if (ctx.source) {\n        switch (key) {\n          case 'prop':\n            return;\n          case 'type':\n          case 'headerType':\n          case 'footerType':\n            const typeValue = ctx.source[key];\n            const stateTypeDef: PblColumnTypeDefinition = stateValue as any;\n            if (stateTypeDef && typeof stateTypeDef !== 'string' && typeValue && typeof typeValue !== 'string') {\n              typeValue.name = stateTypeDef.name;\n              if (stateTypeDef.data) {\n                typeValue.data = Object.assign(typeValue.data || {}, stateTypeDef.data);\n              }\n              return;\n            }\n            break;\n        }\n\n        // We must assert the type starting from 3.5 onwards\n        // See \"Fixes to unsound writes to indexed access types\" in https://devblogs.microsoft.com/typescript/announcing-typescript-3-5\n        ctx.source[key as any] = stateValue;\n      }\n\n    })\n    .register();\n\n  /* ====================================================================================================================================================== */\n\n  createStateChunkHandler('dataMetaRow')\n    .handleKeys('rowClassName', 'type')    // All Optional\n    .serialize( (key, ctx) => {\n      const active = ctx.data.active || ctx.source;\n      if (active) {\n        return active[key];\n      }\n    })\n    .deserialize( (key, stateValue, ctx) => {\n      // We must assert the type starting from 3.5 onwards\n      // See \"Fixes to unsound writes to indexed access types\" in https://devblogs.microsoft.com/typescript/announcing-typescript-3-5\n      ctx.source[key] = stateValue as any;\n    })\n    .register();\n\n\n  /* ====================================================================================================================================================== */\n\n  createStateChunkHandler('metaRow')\n    // Note that we are not handling `cols`, this should be called from the parent, as a different child chunk handling process for each column\n    .handleKeys(\n      'rowClassName', 'type',    // All Optional like dataMetaRow\n      'rowIndex',                // Required\n      )\n    .serialize( (key, ctx) => {\n      return ctx.source[key];\n    })\n    .deserialize( (key, stateValue, ctx) => {\n\n    })\n    .register();\n\n  /* ====================================================================================================================================================== */\n\n  createStateChunkHandler('metaGroupRow')\n    // Note that we are not handling `cols`, this should be called from the parent, as a different child chunk handling process for each column\n    .handleKeys(\n      'rowClassName', 'type',    // All Optional like dataMetaRow\n      'rowIndex',                // Required\n      )\n    .serialize( (key, ctx) => {\n      return ctx.source[key];\n    })\n    .deserialize( (key, stateValue, ctx) => {\n\n    })\n    .register();\n\n  /* ====================================================================================================================================================== */\n\n  createStateChunkHandler('metaColumn')\n    .requiredKeys('kind', 'rowIndex')\n    .handleKeys(\n      'id', 'label', 'css', 'type', 'width', 'minWidth', 'maxWidth',        // PblNgridBaseColumnState (all optional)\n    )\n    .serialize( (key, ctx) => {\n      return ctx.source[key];\n    })\n    .deserialize( (key, stateValue, ctx) => {\n\n    })\n    .register();\n\n  /* ====================================================================================================================================================== */\n\n  createStateChunkHandler('metaGroupColumn')\n    .requiredKeys('prop', 'rowIndex', 'span')\n    .handleKeys(\n      'id', 'label', 'css', 'type', 'width', 'minWidth', 'maxWidth',        // PblNgridBaseColumnState (all optional)\n    )\n    .serialize( (key, ctx) => {\n      return ctx.source[key];\n    })\n    .deserialize( (key, stateValue, ctx) => {\n\n    })\n    .register();\n}\n","import { PblNgridColumnDefinitionSet, PblColumnDefinition, PblColumn, utils } from '@pebula/ngrid';\nimport { createStateChunkHandler } from '../../handling';\nimport { stateVisor } from '../../state-visor';\nimport { StateChunks, PblNgridStateChunkContext } from '../../models/index';\nimport { PblNgridMetaRowSetState, PblNgridMetaColumnState, PblNgridGroupColumnState, PblNgridColumnDefinitionSetState } from './model';\nimport { registerColumnDefChildHandlers } from './children';\n\nfunction runChildChunksForRowMetaColumns<TCol, TChild extends keyof StateChunks>(childChunkId: TChild, ctx: PblNgridStateChunkContext<\"columns\">, columns: TCol[]) {\n  const stateColumns = [];\n  for (const col of columns) {\n    const c: StateChunks[TChild]['state'] = {} as any;\n    ctx.runChildChunk(childChunkId, c, col);\n    stateColumns.push(c);\n  }\n  return stateColumns;\n}\n\n/** Runs the process for the `header` and `footer` sections in the `table` section (if they exist) */\nfunction runChildChunkForDataMetaRows(mode: 's' | 'd', state: PblNgridColumnDefinitionSetState['table'], ctx: PblNgridStateChunkContext<\"columns\">) {\n  const { columnStore } = ctx.extApi;\n  const { table } = ctx.source;\n  for (const kind of ['header', 'footer'] as Array<'header' | 'footer'>) {\n    // This is a mapping of the from->to relationship (i.e serializing or deserializing)\n    const src = mode === 's' ? table : state;\n    const dest = src === table ? state : table;\n\n    // we need to have a source\n    if (src[kind]) {\n      const active = kind === 'header' ? columnStore.headerColumnDef : columnStore.footerColumnDef;\n      if (!dest[kind]) { dest[kind] = {}; }\n      ctx.runChildChunk('dataMetaRow', state[kind], table[kind], { kind, active });\n    }\n  }\n}\n\nfunction runChildChunksForRowDataColumns(mode: 's' | 'd', state: PblNgridColumnDefinitionSetState['table'], ctx: PblNgridStateChunkContext<\"columns\">) {\n  const { table } = ctx.source;\n  const src = mode === 's' ? table : state;\n\n  const resolve = src === state\n    ? col => ({ colState: col, pblColumn: table.cols.find( tCol => (utils.isPblColumn(tCol) && tCol.orgProp === col.prop) || (tCol.id === col.id || tCol.prop === col.prop) ) })\n    : col => ({ colState: state.cols[state.cols.push({} as any) - 1] , pblColumn: utils.isPblColumn(col) && col })\n  ;\n\n  if (src.cols && src.cols.length > 0) {\n    for (const col of src.cols) {\n      const { colState, pblColumn } = resolve(col)\n\n      const data = {\n        pblColumn: utils.isPblColumn(pblColumn) && pblColumn,\n        activeColumn: ctx.grid.columnApi.findColumn(col.id || col.prop),\n      }\n      ctx.runChildChunk('dataColumn', colState, pblColumn, data);\n    }\n  }\n}\n\nexport function registerColumnDefHandlers() {\n  stateVisor.registerRootChunkSection(\n    'columns',\n    {\n      sourceMatcher: ctx => ctx.grid.columns,\n      stateMatcher: state => state.columns || (state.columns = {\n        table: {\n          cols: [],\n        },\n        header: [],\n        footer: [],\n        headerGroup: [],\n      })\n    }\n  );\n\n  createStateChunkHandler('columns')\n    .handleKeys('table', 'header', 'headerGroup', 'footer')\n    .serialize( (key, ctx) => {\n      switch (key) {\n        case 'table':\n          const state: PblNgridColumnDefinitionSetState['table'] = { cols: [] };\n          runChildChunkForDataMetaRows('s', state, ctx);\n          runChildChunksForRowDataColumns('s', state, ctx);\n          return state;\n        case 'header':\n        case 'footer':\n          const source = ctx.source[key];\n          if (source && source.length > 0) {\n            const rows = [];\n            for (const row of source) {\n              const active = ctx.extApi.columnStore.metaColumnIds[key].find( r => !r.isGroup && r.rowDef.rowIndex === row.rowIndex );\n              const r: PblNgridMetaRowSetState<PblNgridMetaColumnState> = {} as any;\n              ctx.runChildChunk('metaRow', r, row);\n              r.cols = runChildChunksForRowMetaColumns('metaColumn', ctx, row.cols);\n              rows.push(r);\n            }\n            return rows;\n          }\n          break;\n        case 'headerGroup':\n          const headerGroupSource = ctx.source.headerGroup;\n          if (headerGroupSource && headerGroupSource.length > 0) {\n            const rows = [];\n            for (const row of headerGroupSource) {\n              const active = ctx.extApi.columnStore.metaColumnIds.header.find( r => !r.isGroup && r.rowDef.rowIndex === row.rowIndex );\n              const r: PblNgridMetaRowSetState<PblNgridGroupColumnState> = {} as any;\n              ctx.runChildChunk('metaGroupRow', r, row);\n              r.cols = runChildChunksForRowMetaColumns('metaColumn', ctx, row.cols);\n              rows.push(r);\n            }\n            return rows;\n          }\n          break;\n      }\n    })\n    .deserialize( (key, stateValue, ctx) => {\n      switch (key) {\n        case 'table':\n          const state = stateValue as PblNgridColumnDefinitionSetState['table'];\n          runChildChunkForDataMetaRows('d', state, ctx);\n          runChildChunksForRowDataColumns('d', state, ctx);\n          break;\n        case 'header':\n        case 'footer':\n          const source = ctx.source[key];\n          const metaRowsState = stateValue as PblNgridColumnDefinitionSetState['header'];\n          if (metaRowsState && metaRowsState.length > 0) {\n            for (const rowState of metaRowsState) {\n              const row = source.find( r => r.rowIndex === rowState.rowIndex );\n              if (row) {\n                const active = ctx.extApi.columnStore.metaColumnIds[key].find( r => !r.isGroup && r.rowDef.rowIndex === rowState.rowIndex );\n                ctx.runChildChunk('metaRow', rowState, row);\n                for (const colState of rowState.cols) {\n                  const col = row.cols.find( r => r.id === colState.id);\n                  if (col) {\n                    const activeColStore = ctx.extApi.columnStore.find(colState.id);\n                    const activeCol = activeColStore && activeColStore.header;\n                    ctx.runChildChunk('metaColumn', colState, col);\n                  }\n                }\n              }\n            }\n          }\n          break;\n        case 'headerGroup':\n          break;\n      }\n    })\n    .register();\n\n    registerColumnDefChildHandlers();\n}\n\nexport {\n  PblNgridMetaColumnState,\n  PblNgridGroupColumnState,\n  PblNgridColumnState,\n  PblNgridMetaRowState,\n  PblNgridMetaRowSetState,\n  PblNgridColumnDefinitionSetState,\n} from './model';\n","import { PblColumn } from '@pebula/ngrid';\nimport { createStateChunkHandler } from '../../handling';\nimport { stateVisor } from '../../state-visor';\nimport { PblNgridStateLoadOptions } from '../../models/index';\n\nexport function registerColumnOrderHandlers() {\n  stateVisor.registerRootChunkSection(\n    'columnOrder',\n    {\n      sourceMatcher: ctx => ctx.grid.columnApi,\n      stateMatcher: state => {\n        if (!state.columnOrder) {\n          state.columnOrder = [];\n        }\n        return state;\n      }\n    }\n  );\n\n  createStateChunkHandler('columnOrder')\n    .handleKeys('columnOrder')\n    .serialize( (key, ctx) => ctx.source.visibleColumnIds.slice() )\n    .deserialize( (key, columnOrder, ctx) => {\n      const { extApi, grid } = ctx;\n      let lastMove: [PblColumn, PblColumn];\n\n      const { visibleColumnIds } = grid.columnApi;\n      if (columnOrder && columnOrder.length === visibleColumnIds.length) {\n        for (let i = 0, len = columnOrder.length; i < len; i++) {\n          if (columnOrder[i] !== visibleColumnIds[i]) {\n            const column = grid.columnApi.findColumn(columnOrder[i]);\n            if (!column) {\n              return;\n            }\n            const anchor = grid.columnApi.findColumn(visibleColumnIds[i]);\n            lastMove = [column, anchor];\n            grid.columnApi.moveColumn(column, anchor, true);\n            extApi.columnStore.updateGroups();\n          }\n        }\n      }\n      // With this revert/redo of the last move we just trigger a redraw.\n      if (lastMove) {\n        grid.columnApi.moveColumn(lastMove[1], lastMove[0], true);\n        grid.columnApi.moveColumn(lastMove[0], lastMove[1], (ctx.options as PblNgridStateLoadOptions).avoidRedraw);\n      }\n    })\n    .register();\n  }\n","import {\n  PblNgridComponent,\n  PblMetaColumnDefinition, PblMetaColumn,\n  PblColumnGroupDefinition, PblColumnGroup,\n  PblColumnDefinition, PblColumn,\n  PblMetaRowDefinitions,\n  PblColumnSet,\n  PblNgridColumnDefinitionSet,\n  ColumnApi,\n} from '@pebula/ngrid';\n\nimport { PblNgridGlobalState, StateChunkItem } from '../models/index';\nimport * as C from './column-def/index';\nimport { PblNgridSurfaceState } from './grid-primitives/index';\n\nexport * from './grid-primitives/index';\nexport * from './column-def/index';\nexport * from './column-order/index';\n\nexport interface PblNgridBuiltInGlobalState {\n  grid: PblNgridSurfaceState;\n  columns: C.PblNgridColumnDefinitionSetState;\n  columnOrder: string[];\n}\n\nexport interface BuiltInRootStateChunks {\n  /**\n   * A state chunk that handles serialization of primitive properties on the grid instance (PblNgridComponent)\n   *\n   * - key/value chunk.\n   * - root chunk.\n   */\n  grid: StateChunkItem<PblNgridSurfaceState, PblNgridComponent>;\n  /**\n   * A state chunk that handles serialization of the entire column definition set.\n   *\n   * It include a limited set of keys that you can control (include/exclude).\n   * Based on the keys processed, additional child chunks are processed, based on the processed key and object it represents.\n   *\n   * - key/value chunk.\n   * - has children chunks\n   * - root chunk.\n   */\n  columns: StateChunkItem<C.PblNgridColumnDefinitionSetState, PblNgridColumnDefinitionSet>;\n  /**\n   * A state chunk that handles serialization of the current column order.\n   * This is a keyless chunk, in this case an array, so you can only include / exclude it as a whole.\n   *\n   * - keyless chunk.\n   * - root chunk.\n   */\n  columnOrder: StateChunkItem<Pick<PblNgridGlobalState, 'columnOrder'>, ColumnApi<any>, any, true>;\n}\n\nexport interface BuiltInStateChunks {\n  /**\n   * A state chunk that handles serialization of meta columns (header / footer).\n   *\n   * This is a child chunk of the `columns` root chunk\n   */\n  metaColumn: StateChunkItem<C.PblNgridMetaColumnState, PblMetaColumnDefinition | PblMetaColumn>;\n  /**\n   * A state chunk that handles serialization of meta group columns (header group).\n   *\n   * This is a child chunk of the `columns` root chunk\n   */\n  metaGroupColumn: StateChunkItem<C.PblNgridGroupColumnState, PblColumnGroupDefinition | PblColumnGroup>;\n  /**\n   * A state chunk that handles serialization of data columns.\n   *\n   * This is a child chunk of the `columns` root chunk\n   */\n  dataColumn: StateChunkItem<C.PblNgridColumnState, PblColumnDefinition | PblColumn, DataColumnBuiltInStateChunkExtraData>;\n  /**\n   * A state chunk that handles serialization of meta rows (A row with header / footer column).\n   *\n   * This is a child chunk of the `columns` root chunk\n   *\n   * Note that a `metaRow` does not refer to that main header/footer rows, it only refers to additional meta rows.\n   * The `dataMetaRow` section chunk is the one referring to the main header/footer rows\n   */\n  metaRow: StateChunkItem<C.PblNgridMetaRowSetState<C.PblNgridMetaColumnState>, PblColumnSet<PblMetaColumnDefinition | PblMetaColumn>>;\n  /**\n   * A state chunk that handles serialization of meta group rows (A row with header group columns).\n   *\n   * This is a child chunk of the `columns` root chunk\n   */\n  metaGroupRow: StateChunkItem<C.PblNgridMetaRowSetState<C.PblNgridGroupColumnState>, PblColumnSet<PblColumnGroupDefinition | PblColumnGroup>>;\n  /**\n   * A state chunk that handles serialization of data rows (A row with data columns).\n   *\n   * This is a child chunk of the `columns` root chunk\n   */\n  dataMetaRow: StateChunkItem<C.PblNgridMetaRowState, PblMetaRowDefinitions, { kind: 'header' | 'footer'; active?: PblMetaRowDefinitions; }>;\n}\n\nexport interface DataColumnBuiltInStateChunkExtraData {\n  /**\n   * The `PblColumn` instance, if found.\n   * If no instance is found it means that the source (`PblNgridComponent.columns`) contains `PblNgridColumnDefinitions`.\n   *\n   * Implementation must fallback to using `ctx.source` if `pblColumn` is not provided.\n   */\n  pblColumn?: PblColumn;\n\n  /**\n   * The `PblColumn` instance that is currently in the grid's column store, if found.\n   * The currently active column is not `pblColumn`, the store always has a copy of all columns.\n   *\n   * If provided, it is not a replacement for `pblColumn`, both require updates. Use the `activeColumn` to save/load the data that\n   * change during runtime.\n   */\n  activeColumn?: PblColumn;\n}\n","import { StateChunkKeyFilter } from './core/models/index';\n\n/**\n * Return's the `User Preferences` preset which focuses on saving and restoring state that the user\n * can define and would want to restore between sessions.\n *\n * For example, saving column width's which the user might have changed using the mouse or any other custom way provided to him (through API).\n * Saving the column order, so if the user re-ordered the table the order can be loaded back again...\n */\nexport function userSessionPref(...basedOn: StateChunkKeyFilter[]): StateChunkKeyFilter {\n  const resultFilter: StateChunkKeyFilter = {\n    grid: [\n      'hideColumns',\n      'showFooter',\n      'showHeader',\n    ],\n    columnOrder: true,\n    columns: [ 'table' ],\n    dataColumn: [\n      'width',\n    ]\n  }\n\n  if (basedOn.length > 0) {\n    for (const b of basedOn)\n    mergeStateChunkKeyFilter(resultFilter, b);\n  }\n\n  return resultFilter;\n}\n\n\n/**\n * Merge a head and tail chunk filters so keys from tail will be merged into head if:\n *\n * - The key does not exist in head\n * - The key exist in head but the value of it is an Array and the value of tail is an Array as well.\n *   In such case, both array's are merged into a single unique array.\n */\nfunction mergeStateChunkKeyFilter(mergeHead: StateChunkKeyFilter, mergeTail: StateChunkKeyFilter) {\n  for (const k of Object.keys(mergeTail)) {\n    const tailValue = mergeTail[k];\n    if (k in mergeHead) {\n      const tailHead = mergeHead[k];\n      if (Array.isArray(tailHead) && Array.isArray(tailValue)) {\n        const s = new Set<string>([...tailHead, ...tailValue]);\n        mergeHead[k] = Array.from(s.values());\n      }\n    } else {\n      mergeHead[k] = mergeTail[k];\n    }\n  }\n}\n","import { registerGridHandlers } from './grid-primitives/index';\nimport { registerColumnOrderHandlers } from './column-order/index';\nimport { registerColumnDefHandlers } from './column-def/index';\n\nexport function registerBuiltInHandlers() {\n  registerGridHandlers();\n  registerColumnOrderHandlers();\n  registerColumnDefHandlers();\n}\n","import { Subject, Observable, from } from 'rxjs';\nimport { map, mapTo, filter, take, skip, debounceTime } from 'rxjs/operators';\nimport { Directive, OnDestroy, Injector, Input } from '@angular/core';\n\nimport { UnRx } from '@pebula/utils';\nimport { PblNgridComponent, PblNgridPluginController, NgridPlugin } from '@pebula/ngrid';\nimport { hasState, saveState, loadState, PblNgridStateLoadOptions, PblNgridStateSaveOptions } from './core/index';\nimport { registerBuiltInHandlers } from './core/built-in-handlers/_register';\n\nimport { userSessionPref } from './presets';\n\ndeclare module '@pebula/ngrid/lib/grid/services/config' {\n  interface PblNgridConfig {\n    state?: {\n      /** When set to true will enable the state plugin on all table instances by default. */\n      autoEnable?: boolean;\n      /**\n       * Options to use when auto-loading the plugin\n       */\n      autoEnableOptions?: {\n        loadOptions?: PblNgridStateLoadOptions;\n        saveOptions?: PblNgridStateSaveOptions;\n      }\n    };\n  }\n}\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    state?: PblNgridStatePlugin;\n  }\n  interface PblNgridPluginExtensionFactories {\n    state: keyof typeof PblNgridStatePlugin;\n  }\n}\n\ninterface InternalStatePluginEvents {\n  phase: 'load' | 'save';\n  position: 'before' | 'after';\n  error?: Error;\n}\n\nexport const PLUGIN_KEY: 'state' = 'state';\n\n@NgridPlugin({ id: PLUGIN_KEY, factory: 'create', runOnce: registerBuiltInHandlers })\n@UnRx()\nexport class PblNgridStatePlugin {\n\n  loadOptions?: PblNgridStateLoadOptions;\n  saveOptions?: PblNgridStateSaveOptions;\n\n  afterLoadState: Observable<void>;\n  afterSaveState: Observable<void>;\n  onError: Observable<{ phase: 'save' | 'load'; error: Error; }>;\n\n  private _removePlugin: (table: PblNgridComponent<any>) => void;\n  private _events = new Subject<InternalStatePluginEvents>();\n\n  constructor(public grid: PblNgridComponent<any>, protected injector: Injector, protected pluginCtrl: PblNgridPluginController) {\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n\n    this.afterLoadState = this._events.pipe(filter( e => e.phase === 'load' && e.position === 'after'), mapTo(undefined) );\n    this.afterSaveState = this._events.pipe(filter( e => e.phase === 'save' && e.position === 'after'), mapTo(undefined) );\n    this.onError = this._events.pipe(filter( e => !!e.error ), map( e => ({ phase: e.phase, error: e.error })) );\n\n    pluginCtrl.events\n      .pipe(\n        filter( e => e.kind === 'onInvalidateHeaders'),\n        take(1),\n      )\n      .subscribe( event => {\n        const initialLoadOptions = { ...(this.loadOptions || {}), avoidRedraw: true };\n        hasState(grid, initialLoadOptions)\n          .then( value => {\n            if (value) {\n              return this._load(initialLoadOptions);\n            }\n          })\n          .then( () => {\n            pluginCtrl.events\n            .pipe(\n              filter( e => e.kind === 'onResizeRow'),\n              skip(1),\n              debounceTime(500),\n            )\n            .subscribe( event => this.save() );\n          });\n      });\n\n    pluginCtrl.events\n      .subscribe( event => {\n        if (event.kind === 'onDestroy') {\n          event.wait(this.save());\n          this._events.complete();\n        }\n      });\n  }\n\n  static create(table: PblNgridComponent<any>, injector: Injector): PblNgridStatePlugin {\n    const pluginCtrl = PblNgridPluginController.find(table);\n    return new PblNgridStatePlugin(table, injector, pluginCtrl);\n  }\n\n  load(): Promise<void> {\n    return this._load(this.loadOptions);\n  }\n\n  save(): Promise<void> {\n    return saveState(this.grid, this.saveOptions)\n      .then( () => this._events.next({phase: 'save', position: 'after'}) )\n      .catch( error => this._events.next({phase: 'save', position: 'after', error }) );\n  }\n\n  destroy(): void {\n    this._removePlugin(this.grid);\n  }\n\n  private _load(loadOptions: PblNgridStateLoadOptions): Promise<void> {\n    return loadState(this.grid, loadOptions)\n      .then( () => this._events.next({phase: 'load', position: 'after'}) )\n      .catch( error => this._events.next({phase: 'load', position: 'after', error }) );\n  }\n\n}\n\n@Directive({\n  selector: 'pbl-ngrid[persistState]', // tslint:disable-line:directive-selector\n  outputs: ['afterLoadState', 'afterSaveState', 'onError'],\n})\n@UnRx()\nexport class PblNgridStatePluginDirective extends PblNgridStatePlugin implements OnDestroy {\n\n  @Input() loadOptions: PblNgridStateLoadOptions = { include: userSessionPref() };\n  @Input() saveOptions: PblNgridStateSaveOptions = { include: userSessionPref() };\n\n  constructor(grid: PblNgridComponent<any>, injector: Injector, pluginCtrl: PblNgridPluginController) {\n    super(grid, injector, pluginCtrl);\n  }\n\n  ngOnDestroy() {\n    this.destroy();\n  }\n\n}\n","import { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PblNgridPluginController, PblNgridModule, PblNgridConfigService } from '@pebula/ngrid';\n\nimport { PLUGIN_KEY, PblNgridStatePluginDirective } from './state-plugin';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PblNgridModule,\n  ],\n  declarations: [\n    PblNgridStatePluginDirective,\n  ],\n  exports: [\n    PblNgridStatePluginDirective,\n  ],\n  providers: [ ],\n})\nexport class PblNgridStatePluginModule {\n  constructor(@Optional() @SkipSelf() parentModule: PblNgridStatePluginModule,\n              configService: PblNgridConfigService) {\n\n  if (parentModule) {\n    return;\n  }\n\n  PblNgridPluginController.created\n    .subscribe( event => {\n      const targetEventsConfig = configService.get(PLUGIN_KEY);\n      if (targetEventsConfig && targetEventsConfig.autoEnable === true) {\n        const pluginCtrl = event.controller;\n        let subscription = pluginCtrl.events\n          .subscribe( evt => {\n            if (evt.kind === 'onInit') {\n              if (!pluginCtrl.hasPlugin(PLUGIN_KEY)) {\n                const instance = pluginCtrl.createPlugin(PLUGIN_KEY);\n                if (targetEventsConfig.autoEnableOptions) {\n                  instance.loadOptions = targetEventsConfig.autoEnableOptions.loadOptions;\n                  instance.saveOptions = targetEventsConfig.autoEnableOptions.saveOptions;\n                }\n              }\n              subscription.unsubscribe();\n              subscription = undefined;\n            }\n          });\n      }\n    });\n  }\n}\n"]}