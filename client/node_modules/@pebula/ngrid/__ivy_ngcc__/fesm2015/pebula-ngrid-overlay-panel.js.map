{"version":3,"file":"pebula-ngrid-overlay-panel.js","sources":["ng:/@pebula/ngrid/overlay-panel/lib/component-registry-extension.ts","ng:/@pebula/ngrid/overlay-panel/lib/overlay-panel-ref.ts","ng:/@pebula/ngrid/overlay-panel/lib/overlay-panel.service.ts","ng:/@pebula/ngrid/overlay-panel/lib/overlay-panel-def.ts","ng:/@pebula/ngrid/overlay-panel/lib/overlay-panel.module.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { ComponentRef, Type, ComponentFactoryResolver, ComponentFactory, Injector } from '@angular/core';\nimport { PblNgridMultiComponentRegistry } from '@pebula/ngrid';\n\nexport class PblNgridOverlayPanelComponentExtension<T> extends PblNgridMultiComponentRegistry<T, 'overlayPanels'> {\n  readonly name: string;\n  readonly kind: 'overlayPanels' = 'overlayPanels';\n  readonly projectContent = false;\n\n  constructor(name: string,\n              public component: Type<T>,\n              public cfr?: ComponentFactoryResolver,\n              public injector?: Injector,) {\n    super();\n    this.name = name;\n  }\n\n  getFactory(context: any): ComponentFactory<T> {\n    return this.cfr.resolveComponentFactory(this.component);\n  }\n\n  onCreated(context: any, cmpRef: ComponentRef<T>): void {\n    cmpRef.changeDetectorRef.markForCheck();\n    cmpRef.changeDetectorRef.detectChanges();\n  }\n}\n","import { merge, Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { OverlayRef } from '@angular/cdk/overlay';\n\nexport class PblNgridOverlayPanelRef<T = any> {\n\n  closed: Observable<void>;\n  private _closed$ = new Subject<void>();\n\n  constructor(private overlayRef: OverlayRef, public readonly data?: T) {\n    this.closed = this._closed$.asObservable();\n    this._closingActions(this, overlayRef)\n      .pipe(\n        takeUntil(this.closed),\n      )\n      .subscribe(() => this.close());\n  }\n\n  close(): void {\n    if (this._closed$) {\n      const closed$ = this._closed$;\n      this._closed$ = undefined;\n      closed$.next();\n      closed$.complete();\n      this.overlayRef.detach();\n      this.overlayRef.dispose();\n    }\n  }\n\n  private _closingActions(overlayPanelRef: PblNgridOverlayPanelRef, overlayRef: OverlayRef) {\n    const backdrop = overlayRef!.backdropClick();\n    const detachments = overlayRef!.detachments();\n\n    return merge(backdrop, detachments, overlayPanelRef.closed);\n  }\n}\n","import { Injectable, ViewContainerRef, ElementRef, Injector, EmbeddedViewRef, TemplateRef } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport { TemplatePortal, ComponentPortal } from '@angular/cdk/portal';\nimport { RowContext } from '@angular/cdk/table';\nimport { PblNgridPluginController, PblNgridComponent, PblNgridMultiTemplateRegistry } from '@pebula/ngrid';\n\nimport { PblNgridOverlayPanelComponentExtension } from './component-registry-extension';\nimport { PblNgridOverlayPanelRef } from './overlay-panel-ref';\nimport { PblNgridOverlayPanelContext } from './overlay-panel-def';\n\ndeclare module '@pebula/ngrid/lib/grid/services/grid-registry.service' {\n  interface PblNgridMultiRegistryMap {\n    overlayPanels?:\n      | PblNgridMultiTemplateRegistry<any, 'overlayPanels'>\n      | PblNgridOverlayPanelComponentExtension<any>;\n  }\n}\n\nexport interface PblNgridOverlayPanelConfig {\n  hasBackdrop?: boolean;\n  backdropClass?: string;\n  xPos?: 'before' | 'center' | 'after';\n  yPos?: 'above' | 'center' | 'below';\n  insetPos?: boolean;\n}\n\nconst DEFAULT_OVERLAY_PANEL_CONFIG: PblNgridOverlayPanelConfig = {\n  hasBackdrop: false,\n  xPos: 'center',\n  yPos: 'center',\n  insetPos: false,\n};\n\n@Injectable()\nexport class PblNgridOverlayPanelFactory {\n  constructor(private _overlay: Overlay, private _dir: Directionality) { }\n\n  create<T>(grid: PblNgridComponent<T>): PblNgridOverlayPanel<T> {\n    return new PblNgridOverlayPanel<T>(this._overlay, this._dir, grid);\n  }\n}\n\nexport class PblNgridOverlayPanel<T = any> {\n\n  private vcRef: ViewContainerRef;\n  private injector: Injector;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  constructor(private _overlay: Overlay,\n              private _dir: Directionality,\n              public readonly grid: PblNgridComponent<T>) {\n    const controller = PblNgridPluginController.find(grid);\n    this.injector = controller.injector;\n    this.vcRef = controller.injector.get(ViewContainerRef);\n    this._scrollStrategy = () => _overlay.scrollStrategies.reposition();\n  }\n\n\n  /**\n   * Opens a panel relative to a cell element using the overlay panel extension registry template/component with the name provided in `extName`.\n   * The cell element is referenced by the `columnId` and the `rowRenderPosition`.\n   *\n   * If the `rowRenderPosition` is \"header\" or \"footer\" then the grid's header / footer rows are targeted, otherwise the number provided should reference\n   * the rendered row index to use to get the cell from.\n   *\n   * > Note that this helper method does not allow targeting meta cells.\n   */\n  openGridCell<T = any>(extName: string, columnId: string, rowRenderPosition: number | 'header' | 'footer', config?: PblNgridOverlayPanelConfig, data?: T): PblNgridOverlayPanelRef<T> {\n    const column = this.grid.columnApi.findColumn(columnId);\n    if (!column) {\n      throw new Error('Could not find the column ' + columnId);\n    }\n\n    let section: 'table' | 'header' | 'footer';\n    let rowRenderIndex = 0;\n    switch (rowRenderPosition) {\n      case 'header':\n      case 'footer':\n        section = rowRenderPosition;\n        break;\n      default:\n        if (typeof rowRenderPosition === 'number') {\n          section = 'table';\n          rowRenderIndex = rowRenderPosition;\n        }\n        break;\n    }\n\n    if (!section) {\n      throw new Error('Invalid \"rowRenderPosition\" provided, use \"header\", \"footer\" or any number >= 0.');\n    }\n\n    const el = column && column.columnDef.queryCellElements(section)[rowRenderIndex];\n    if (!el) {\n      throw new Error(`Could not find a cell for the column ${columnId} at render index ${rowRenderIndex}`);\n    }\n\n    return this.open(extName, new ElementRef(el), config, data);\n  }\n\n  open<T = any>(extName: string, source: ElementRef<HTMLElement>, config?: PblNgridOverlayPanelConfig, data?: T): PblNgridOverlayPanelRef<T> {\n    config = Object.assign({ ...DEFAULT_OVERLAY_PANEL_CONFIG }, config || {});\n    const match = this.findNamesExtension(extName);\n\n    if (!match) {\n      throw new Error('Could not find the overlay panel with the name ' + extName);\n    }\n\n    const overlayRef = this._createOverlay(source, config);\n    const overlayPanelRef = new PblNgridOverlayPanelRef(overlayRef, data);\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy, config);\n\n    if (match instanceof PblNgridMultiTemplateRegistry) {\n      const tPortal = this._getTemplatePortal(match.tRef, overlayPanelRef);\n      const viewRef = overlayRef.attach(tPortal);\n      viewRef.markForCheck();\n      viewRef.detectChanges();\n    } else {\n      const cPortal = this._getComponentPortal(overlayPanelRef, match)\n      const cmpRef = overlayRef.attach(cPortal);\n      match.onCreated(null, cmpRef);\n    }\n\n    overlayRef.updatePosition();\n    return overlayPanelRef;\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(element: ElementRef<HTMLElement>, config: PblNgridOverlayPanelConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(element, config);\n    const overlayRef = this._overlay.create(overlayConfig);\n    overlayRef.getConfig().hasBackdrop = !!config.hasBackdrop\n    // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n    // Ideally we'd also have our keyboard event logic in here, however doing so will\n    // break anybody that may have implemented the `MatMenuPanel` themselves.\n    overlayRef.keydownEvents().subscribe();\n\n    return overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(element: ElementRef<HTMLElement>, config: PblNgridOverlayPanelConfig): OverlayConfig {\n    const positionStrategy = this._overlay\n      .position()\n      .flexibleConnectedTo(element)\n      .withLockedPosition();\n\n    return new OverlayConfig({\n      positionStrategy,\n      backdropClass: config.backdropClass || 'cdk-overlay-transparent-backdrop', // TODO: don't use the cdk's class, create it\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  private _getTemplatePortal(tRef: TemplateRef<PblNgridOverlayPanelContext>, overlayPanelRef: PblNgridOverlayPanelRef) {\n    const context: PblNgridOverlayPanelContext = {\n      grid: this.grid,\n      ref: overlayPanelRef,\n    };\n    return new TemplatePortal(tRef, this.vcRef, context);\n  }\n\n  private _getComponentPortal(overlayPanelRef: PblNgridOverlayPanelRef,\n                              componentExtension: PblNgridOverlayPanelComponentExtension<any>) {\n    const portalInjector = Injector.create({\n      providers: [\n        { provide: PblNgridOverlayPanelRef, useValue: overlayPanelRef },\n      ],\n      parent: componentExtension.injector || this.injector,\n    });\n    return new ComponentPortal(componentExtension.component, this.vcRef, portalInjector, componentExtension.cfr || null)\n  }\n\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy, config: PblNgridOverlayPanelConfig) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n      config.xPos === 'center'\n        ? ['center', 'center']\n        : config.xPos === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n      config.yPos === 'center'\n        ? ['center', 'center']\n        : config.yPos === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (!config.insetPos) {\n      if (overlayY !== 'center') {\n        originY = overlayY === 'top' ? 'bottom' : 'top';\n      }\n      if (overlayFallbackY !== 'center') {\n        originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n      }\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  private findNamesExtension(extName: string) {\n    let match: PblNgridMultiTemplateRegistry<PblNgridOverlayPanelContext, 'overlayPanels'> | PblNgridOverlayPanelComponentExtension<any>;\n    this.grid.registry.forMulti('overlayPanels', values => {\n      for (const value of values) {\n        if (value.name === extName) {\n          match = value;\n          return true;\n        }\n      }\n    });\n    return match;\n  }\n}\n\n","import { Directive, TemplateRef, Input } from '@angular/core';\nimport { PblNgridComponent, PblNgridMultiTemplateRegistry, PblNgridRegistryService } from '@pebula/ngrid';\nimport { PblNgridOverlayPanelRef } from './overlay-panel-ref';\n\nexport interface PblNgridOverlayPanelContext<T = any> {\n  grid: PblNgridComponent<T>;\n  ref: PblNgridOverlayPanelRef;\n}\n\n@Directive({ selector: '[pblNgridOverlayPanelDef]' })\nexport class PblNgridOverlayPanelDef extends PblNgridMultiTemplateRegistry<PblNgridComponent, 'overlayPanels'> {\n\n  readonly kind: 'overlayPanels' = 'overlayPanels';\n  @Input('pblNgridOverlayPanelDef') name: string;\n\n  constructor(tRef: TemplateRef<PblNgridComponent>, registry: PblNgridRegistryService) { super(tRef, registry); }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { OverlayModule } from '@angular/cdk/overlay';\n\nimport { PblNgridOverlayPanelFactory } from './overlay-panel.service';\nimport { PblNgridOverlayPanelDef } from './overlay-panel-def';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    BidiModule,\n  ],\n  declarations: [\n    PblNgridOverlayPanelDef,\n  ],\n  exports: [\n    PblNgridOverlayPanelDef,\n  ],\n  providers: [\n    PblNgridOverlayPanelFactory,\n  ],\n})\nexport class PblNgridOverlayPanelModule {\n\n}\n"]}