{"version":3,"file":"pebula-ngrid-clipboard.js","sources":["ng:/@pebula/ngrid/clipboard/lib/clipboard.service.ts","ng:/@pebula/ngrid/clipboard/lib/clipboard.plugin.ts","ng:/@pebula/ngrid/clipboard/lib/clipboard.module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\n /**\n * A service for copying text to the clipboard.\n *\n * Example usage:\n *\n * clipboard.copy(\"copy this text\");\n */\n@Injectable({providedIn: 'root'})\nexport class Clipboard {\n  private _document: Document;\n\n   constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n   /**\n   * Copies the provided text into the user's clipboard.\n   *\n   * @param text The string to copy.\n   * @returns Whether the operation was successful.\n   */\n  copy(text: string): boolean {\n    const pendingCopy = this.beginCopy(text);\n    const successful = pendingCopy.copy();\n    pendingCopy.destroy();\n\n     return successful;\n  }\n\n   /**\n   * Prepares a string to be copied later. This is useful for large strings\n   * which take too long to successfully render and be copied in the same tick.\n   *\n   * The caller must call `destroy` on the returned `PendingCopy`.\n   *\n   * @param text The string to copy.\n   * @returns the pending copy operation.\n   */\n  beginCopy(text: string): PendingCopy {\n    return new PendingCopy(text, this._document);\n  }\n}\n\n /**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nexport class PendingCopy {\n  private _textarea: HTMLTextAreaElement|undefined;\n\n   constructor(text: string, private readonly _document: Document) {\n    const textarea = this._textarea = this._document.createElement('textarea');\n\n     // Hide the element for display and accessibility.\n    textarea.setAttribute('style', 'opacity: 0;');\n    textarea.setAttribute('aria-hidden', 'true');\n\n     textarea.value = text;\n    this._document.body.appendChild(textarea);\n  }\n\n   /** Finishes copying the text. */\n  copy(): boolean {\n    const textarea = this._textarea;\n    let successful = false;\n\n     try {  // Older browsers could throw if copy is not supported.\n      if (textarea) {\n        const currentFocus = document.activeElement;\n\n         textarea.select();\n        successful = this._document.execCommand('copy');\n\n         if (currentFocus instanceof HTMLElement) {\n          currentFocus.focus();\n        }\n      }\n    } catch {\n      // Discard error.\n      // Initial setting of {@code successful} will represent failure here.\n    }\n\n     return successful;\n  }\n\n   /** Cleans up DOM changes used to perform the copy operation. */\n  destroy() {\n    if (this._textarea) {\n      this._document.body.removeChild(this._textarea);\n      this._textarea = undefined;\n    }\n  }\n}\n","import { filter } from 'rxjs/operators';\nimport { Directive, Injector, OnDestroy, Input } from '@angular/core';\n\n// import { Clipboard } from '@angular/cdk-experimental/clipboard';\n// TODO: remove internal implementation in the next version of cdk-experimental (right after 8.1.3)\nimport { Clipboard } from './clipboard.service';\n\nimport { UnRx } from '@pebula/utils';\nimport { PblNgridComponent, PblNgridPluginController, NgridPlugin, PblNgridConfigService } from '@pebula/ngrid';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    clipboard?: PblNgridClipboardPlugin;\n  }\n  interface PblNgridPluginExtensionFactories {\n    clipboard: keyof typeof PblNgridClipboardPlugin;\n  }\n}\n\ndeclare module '@pebula/ngrid/lib/grid/services/config' {\n  interface PblNgridConfig {\n    clipboard?: {\n      /** When set to true will enable the clipboard plugin on all grid instances by default. */\n      autoEnable?: boolean;\n      /**\n       * The separator to use when multiple cells are copied\n       * @default \\t\n       */\n      cellSeparator?: string;\n      /**\n       * The separator to use when multiple rows are copied\n       * @default \\n\n       */\n      rowSeparator?: string;\n    };\n  }\n}\n\nconst IS_OSX = /^mac/.test(navigator.platform.toLowerCase())\nconst DEFAULT_CELL_SEP = '\\t';\nconst DEFAULT_ROW_SEP = '\\n';\n\nexport const PLUGIN_KEY: 'clipboard' = 'clipboard';\n\n@NgridPlugin({ id: PLUGIN_KEY, factory: 'create' })\n@Directive({ selector: 'pbl-ngrid[clipboard]', exportAs: 'pblNgridClipboard' })\n@UnRx()\nexport class PblNgridClipboardPlugin implements OnDestroy {\n\n  static create(grid: PblNgridComponent, injector: Injector): PblNgridClipboardPlugin {\n    const pluginCtrl = PblNgridPluginController.find(grid);\n    return new PblNgridClipboardPlugin(grid, injector, pluginCtrl);\n  }\n\n  /**\n   * The separator to use when multiple cells are copied.\n   * If not set, taken from `PblNgridConfig.clipboard.cellSeparator`\n   * @default \\t\n   */\n  @Input() clpCellSep: string;\n\n  /**\n   * The separator to use when multiple rows are copied\n   * If not set, taken from `PblNgridConfig.clipboard.rowSeparator`\n   * @default \\n\n   */\n  @Input() clpRowSep: string;\n\n  private config: PblNgridConfigService;\n  private clipboard: Clipboard;\n  private _removePlugin: (grid: PblNgridComponent) => void;\n\n  constructor(public grid: PblNgridComponent<any>, protected injector: Injector, protected pluginCtrl: PblNgridPluginController) {\n    this.config = injector.get(PblNgridConfigService)\n    this.clipboard = injector.get(Clipboard);\n    this.init();\n  }\n\n  ngOnDestroy(): void {\n    this._removePlugin(this.grid);\n  }\n\n  protected isCopyEvent(event: Event): boolean {\n    if (event instanceof KeyboardEvent && event.key === 'c') {\n      if ((!IS_OSX && event.ctrlKey) || (IS_OSX && event.metaKey)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  protected doCopy(): void {\n    const { cellSeparator, rowSeparator } = this.config.get('clipboard', {});\n    const { rows, minIndex } = this.getSelectedRowData(this.grid);\n    const createRow = (row: any[]) => row.slice(minIndex).join(this.clpCellSep || cellSeparator || DEFAULT_CELL_SEP);\n    // For each row (collection of items), slice the initial items that are not copied across all selections\n\n    this.clipboard.copy(rows.map(createRow).join(this.clpRowSep || rowSeparator || DEFAULT_ROW_SEP));\n    // TODO: Consider using `beginCopy` to support large copy operations\n  }\n\n  protected getSelectedRowData(grid: PblNgridComponent) {\n    const { columnApi, contextApi } = grid;\n    const data = new Map<any, any[]>();\n\n    // The minIndex represents the first column being copied out of all visible columns (0 being the first visible column).\n    // For every selected cell, the column is tracked and it's index is being set to `minIndex` if it is lower then the current `minIndex` (Math.Min).\n    // We start with the biggest int but right away get a valid column index...\n    // Later on, each row is sliced to remove the items in indices lower then the `minIndex`.\n    //\n    // All of this is to make the paste start without leading cell separators.\n    let minIndex = Number.MAX_SAFE_INTEGER;\n\n    for (const point of contextApi.selectedCells) {\n      const col = columnApi.columns[point.colIndex];\n      if (col) {\n        const colIndex = columnApi.renderIndexOf(col);\n        if (colIndex > -1) {\n          const rowIndex = contextApi.findRowInCache(point.rowIdent).dataIndex;\n          const dataItem = col.getValue(grid.ds.source[rowIndex]);\n          const row = data.get(point.rowIdent) || [];\n          row[colIndex] = dataItem;\n          data.set(point.rowIdent, row);\n          minIndex = Math.min(minIndex, colIndex);\n        }\n      }\n    }\n\n    // contextApi.selectedCells are un-ordered, their order is based on the order in which user have selected cells.\n    // It means that the row's will not paste in the proper order unless we re-order them based on the data index.\n    // This is a very native and simple implementation that will hold most copy actions 1k +-\n    // TODO: Consider a better logic, taking performance into consideration.\n\n    const entries = Array.from(data.entries());\n    entries.sort((a, b) => {\n      const aIndex = contextApi.findRowInCache(a[0]).dataIndex;\n      const bIndex = contextApi.findRowInCache(b[0]).dataIndex;\n      if (aIndex < bIndex) {\n        return -1;\n      } else {\n        return 1;\n      }\n    });\n\n    return {\n      minIndex,\n      rows: entries.map( e => e[1] ),\n    };\n  }\n\n  private init(): void {\n    this._removePlugin = this.pluginCtrl.setPlugin(PLUGIN_KEY, this);\n\n    if (!this.pluginCtrl.hasPlugin('targetEvents')) {\n      this.pluginCtrl.createPlugin('targetEvents');\n    }\n\n    const targetEvents = this.pluginCtrl.getPlugin('targetEvents');\n    targetEvents.keyDown\n      .pipe(\n        filter( event => this.isCopyEvent(event.source) ),\n        UnRx(this)\n      )\n      .subscribe( event => this.doCopy() );\n  }\n}\n","import { first, filter } from 'rxjs/operators';\nimport { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PblNgridModule, PblNgridConfigService, PblNgridPluginController } from '@pebula/ngrid';\nimport { PblNgridTargetEventsModule } from '@pebula/ngrid/target-events';\n\nimport { PLUGIN_KEY, PblNgridClipboardPlugin } from './clipboard.plugin';\n\n@NgModule({\n  imports: [ CommonModule, PblNgridModule, PblNgridTargetEventsModule ],\n  declarations: [ PblNgridClipboardPlugin ],\n  exports: [ PblNgridClipboardPlugin ],\n})\nexport class PblNgridClipboardPluginModule {\n  constructor(@Optional() @SkipSelf() parentModule: PblNgridClipboardPluginModule,\n              configService: PblNgridConfigService) {\n\n    if (parentModule) {\n      return;\n    }\n    PblNgridPluginController.created\n      .subscribe( event => {\n        const config = configService.get(PLUGIN_KEY, {});\n        if (config.autoEnable === true) {\n          const pluginCtrl = event.controller;\n          pluginCtrl.events\n            .pipe(\n              filter( e => e.kind === 'onInit' ),\n              first(),\n            )\n            .subscribe( e => {\n              if (!pluginCtrl.hasPlugin(PLUGIN_KEY)) {\n                pluginCtrl.createPlugin(PLUGIN_KEY);\n              }\n            });\n        }\n      });\n  }\n}\n"]}