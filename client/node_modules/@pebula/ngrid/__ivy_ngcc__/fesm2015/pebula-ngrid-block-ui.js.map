{"version":3,"file":"pebula-ngrid-block-ui.js","sources":["ng:/@pebula/ngrid/block-ui/lib/block-ui/directives.ts","ng:/@pebula/ngrid/block-ui/lib/block-ui/block-ui-plugin.ts","ng:/@pebula/ngrid/block-ui/lib/table-block-ui.module.ts"],"names":[],"mappings":"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","sourcesContent":["// tslint:disable:use-host-property-decorator\nimport { Directive, TemplateRef } from '@angular/core';\nimport { PblNgridComponent, PblNgridRegistryService, PblNgridSingleTemplateRegistry } from '@pebula/ngrid';\n\ndeclare module '@pebula/ngrid/lib/grid/services/grid-registry.service' {\n  interface PblNgridSingleRegistryMap {\n    blocker?: PblNgridBlockUiDefDirective;\n  }\n}\n\n/**\n * Marks the element as the display element when the form is busy.\n */\n@Directive({ selector: '[pblNgridBlockUiDef]' })\nexport class PblNgridBlockUiDefDirective extends PblNgridSingleTemplateRegistry<{ $implicit: PblNgridComponent<any> }, 'blocker'> {\n  readonly kind = 'blocker';\n  constructor(tRef: TemplateRef<{ $implicit: PblNgridComponent<any> }>, registry: PblNgridRegistryService) { super(tRef, registry); }\n}\n","import { Observable, isObservable } from 'rxjs';\nimport { Directive, EmbeddedViewRef, Input, OnDestroy } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nimport { UnRx } from '@pebula/utils';\nimport { PblNgridComponent, PblNgridPluginController, NgridPlugin } from '@pebula/ngrid';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    blockUi?: { blockUi: boolean | 'auto' | Observable<boolean> };\n  }\n}\n\nconst PLUGIN_KEY: 'blockUi' = 'blockUi';\n\n@NgridPlugin({ id: PLUGIN_KEY })\n@Directive({ selector: 'pbl-ngrid[blockUi]', exportAs: 'blockUi' })\n@UnRx()\nexport class PblNgridBlockUiPluginDirective<T> implements OnDestroy {\n\n  /**\n   * Blocks the UI with the template defined via `PblNgridBlockUiDefDirective`.\n   * If a template does not exist blocking is ignored.\n   *\n   * There are 3 operation modes, the modes are set based on the input value:\n   *   - Auto mode (INPUT: 'auto')\n   *     The UI will be blocked automatically based on datasource changes.\n   *\n   *    - Manual mode (INPUT: boolean)\n   *     The UI will be block is toggled based on the value, i.e. `true` will block and false will unblock.\n   *\n   *   - Notification mode (INPUT: Observable<boolean>)\n   *     Similar to Manual mode but controlled by a stream boolean value.\n   *\n   * **Note about Notification mode**\n   * Notification mode accepts an observable, at the point where the value is set the block state does not change (if it was \"on\" it will stay \"on\" and vice versa)\n   * It will only change on the first emission, this is important to understand.\n   *\n   * For example, if the current block state is off and we pass a `Subject`, the state remains off until the next emission\n   * of the `Subject` is `true`. If it already emitted `true` before the assignment it will not be taken into account. This is why\n   * using `BehaviouralSubject` is preferred.\n   *\n   * Also note that when sending an observable it is treated as \"notifier\", do not send cold observable as they get subscribed to.\n   * For example, sending the returned value from `HttpClient` will probably result in 2 HTTP calls, if you already subscribed to it\n   * > The default value is `auto` which means that `<pbl-ngrid blockUi>` is similar to `<pbl-ngrid blockUi=\"auto\">`\n   */\n  @Input() get blockUi(): boolean | 'auto' | Observable<boolean> { return this._blockUi; }\n  set blockUi(value: boolean | 'auto' | Observable<boolean>) {\n    let coerced: boolean | 'auto' = coerceBooleanProperty(value);\n    if (coerced && (value === 'auto' || (value as any) === '')) {\n      coerced = 'auto';\n    }\n\n    if (isObservable(value) && this._blockUi !== value) {\n      if (isObservable(this._blockUi)) {\n        UnRx.kill(this, this._blockUi);\n      }\n      this._blockUi = value;\n      value.pipe(UnRx(this, this._blockUi)).subscribe( state => {\n        this._blockInProgress = state;\n        this.setupBlocker();\n      });\n    } else if (this._blockUi !== coerced) {\n      this._blockUi = coerced;\n      if (coerced !== 'auto') {\n        this._blockInProgress = coerced;\n        this.setupBlocker();\n      }\n    }\n  }\n\n  private _blockInProgress: boolean = false;\n  private _blockUi: boolean | 'auto' | Observable<boolean>;\n  private _blockerEmbeddedVRef: EmbeddedViewRef<any>;\n  private _removePlugin: (grid: PblNgridComponent<any>) => void;\n\n  constructor(private grid: PblNgridComponent<any>, pluginCtrl: PblNgridPluginController<T>) {\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n\n    grid.registry.changes.subscribe( changes => {\n      for (const c of changes) {\n        switch (c.type) {\n          case 'blocker':\n            this.setupBlocker();\n            break;\n        }\n      }\n    });\n\n    pluginCtrl.events\n      .subscribe( event => {\n        if (event.kind === 'onDataSource') {\n          const { prev, curr } = event;\n          if (prev) {\n            UnRx.kill(this, prev);\n          }\n          curr.onSourceChanging\n            .pipe(UnRx(this, curr))\n            .subscribe( () => {\n              if (this._blockUi === 'auto') {\n                this._blockInProgress = true;\n                this.setupBlocker();\n              }\n            });\n          curr.onSourceChanged\n            .pipe(UnRx(this, curr))\n            .subscribe( () => {\n              if (this._blockUi === 'auto') {\n                this._blockInProgress = false;\n                this.setupBlocker();\n              }\n            });\n        }\n      });\n  }\n\n\n  ngOnDestroy(): void {\n    this._removePlugin(this.grid);\n  }\n\n  private setupBlocker(): void {\n    const state = this._blockInProgress;\n    if (state) {\n      if (!this._blockerEmbeddedVRef) {\n        const blockerTemplate = this.grid.registry.getSingle('blocker');\n        if (blockerTemplate) {\n          this._blockerEmbeddedVRef = this.grid.createView('afterContent', blockerTemplate.tRef, { $implicit: this.grid });\n          this._blockerEmbeddedVRef.detectChanges();\n        }\n      }\n    } else if (this._blockerEmbeddedVRef) {\n      this.grid.removeView(this._blockerEmbeddedVRef, 'afterContent');\n      this._blockerEmbeddedVRef = undefined;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { PblNgridModule } from '@pebula/ngrid';\nimport { PblNgridBlockUiDefDirective } from './block-ui/directives';\nimport { PblNgridBlockUiPluginDirective } from './block-ui/block-ui-plugin';\n\n@NgModule({\n  imports: [ CommonModule, CdkTableModule, PblNgridModule ],\n  declarations: [ PblNgridBlockUiDefDirective, PblNgridBlockUiPluginDirective ],\n  exports: [  PblNgridBlockUiDefDirective, PblNgridBlockUiPluginDirective  ]\n})\nexport class PblNgridBlockUiModule { }\n"]}