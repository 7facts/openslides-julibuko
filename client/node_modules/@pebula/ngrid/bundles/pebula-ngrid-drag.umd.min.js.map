{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/drop-list-ref.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/drag-ref.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/drag-drop.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/core/lazy-drag-drop.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/row/row-reorder-plugin.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/extend-grid.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/column-reorder-plugin.ts","ng://@pebula/ngrid/drag/lib/column-resize/extend-grid.ts","ng://@pebula/ngrid/drag/lib/column-resize/column-resize.component.ts","ng://@pebula/ngrid/drag/lib/column-resize/cdk-encapsulated-code.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/cell-dragger-ref.ts","ng://@pebula/ngrid/drag/lib/drag-and-drop/column/aggregation-column.ts","ng://@pebula/ngrid/drag/lib/column-resize/cell-resizer-ref.ts","ng://@pebula/ngrid/drag/lib/default-settings.component.ts","ng://@pebula/ngrid/drag/lib/table-drag.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","call","next","value","done","__read","n","e","ar","push","error","__spread","concat","PblDropListRef","_this","_super","apply","beforeExit","Subject","withElement","element","coerceElement","dispose","complete","DropListRef","PblDragRef","args","_i","rootElementChanged","EventEmitter","exited","subscribe","container","item","withRootElement","rootElement","getRootElement","prev","curr","DragRef","DEFAULT_CONFIG","dragStartThreshold","pointerDirectionChangeThreshold","PblDragDrop","_document","_ngZone","_viewportRuler","_dragDropRegistry","createDrag","config","createDropList","Injectable","providedIn","Inject","DOCUMENT","NgZone","ViewportRuler","DragDropRegistry","CdkLazyDropList","_draggablesSet","Set","ngOnInit","pblDropListRef","Error","_dropListRef","beforeStarted","addDrag","drag","add","_draggables","reset","from","values","notifyOnChanges","removeDrag","result","delete","originalElement","directContainerElement","nativeElement","querySelector","ElementRef","Directive","selector","exportAs","providers","provide","DragDrop","useExisting","CDK_DROP_LIST","useClass","host","class","[id]","[class.cdk-drop-list-dragging]","[class.cdk-drop-list-receiving]","Input","CdkDropList","CdkLazyDrag","_hostNotRoot","_rootClass","_a","classList","remove","split","_b","cdkDropList","dropContainer","_dragRef","_withDropContainer","pblDragRef","event","rootElementSelectorClass","hostNotRoot","ngAfterViewInit","started","startedEvent","element_1","initialRootElementParent_1","nextSibling","ended","pipe","take","endedEvent","appendChild","ngOnDestroy","[class.cdk-drag-dragging]","CdkDrag","PblDragHandle","parentDrag","CdkDragHandle","type","Optional","_uniqueIdCounter","PblNgridRowReorderPluginDirective","grid","pluginCtrl","dragDrop","changeDetectorRef","dir","group","id","_rowReorder","_removePlugin","setPlugin","dropped","previousIndex","ds","source","indexOf","draggedContext","row","currentIndex","renderStart","contextApi","clear","moveItem","_cdkTable","syncRows","coerceBooleanProperty","inputs","[class.pbl-row-reorder]","CdkDropListGroup","useValue","undefined","PblNgridRowReorderPluginDirective_1","PblNgridComponent","PblNgridPluginController","ChangeDetectorRef","Directionality","SkipSelf","NgridPlugin","PblNgridRowDragDirective","_viewContainerRef","_dir","_changeDetectorRef","rootElementSelector","_context","col","_draggedContext","find","plugin","getPlugin","ViewContainerRef","CDK_DRAG_CONFIG","checkGroupLockConstraint","column","groups","_c","g","groupStore","lockColumns","isInGroup","extendGrid","PblColumn","extendProperty","PblColumnGroup","PblNgridColumnReorderPluginDirective","table","orientation","dragging","BehaviorSubject","_columnReorder","_manualOverride","manualOverride","columnApi","moveColumn","isDragging","el","lastSwap","monkeyPatchDropListRef","_getItemIndexFromPointerPosition","bind","_itemPositions","_pblReset","lastSorted","pblGetPositionCacheItems","forEach","sibling","index","data","getCells","style","transform","_sortItem","enter","pointerX","pointerY","isHorizontal","clientRect","left","offset","top","pointerDelta","siblings","s","newIndex","pblGetItemIndexFromPointerPosition","oldOrder","slice","siblingAtNewPosition","wontBudge","itemAtOriginalPosition","findIndex","currentItem","start","Math","min","itemsDraggedOver","abs","itemsDraggedOver_1","itemsDraggedOver_1_1","dragItem","PblNgridColumnReorderPluginDirective_1","Output","runOnce","PblNgridColumnDragDirective","disabled","reorder","columnReorder","columnDef","cache","queryCellElements","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","PblNgridDragResizeComponent","_config","grabAreaWidth","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_rootElementInitSubscription","_pointerDown","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","distanceX","x","_pickupPositionOnPage","distanceY","y","_hasStartedDragging","_hasMoved","preventDefault","stopPropagation","newWidth","max","_initialWidth","maxWidth","minWidth","_lastWidth","updateWidth","resetColumnsWidth","sizeInfo","updateSize","netWidth","_pointerUp","_isDragging","_removeSubscriptions","stopDragging","resizeColumn","registerDragItem","isPblColumn","onStable","asObservable","enable","userSelect","_getRootElement","parentElement","addEventListener","dest","extendStyles","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","removeEventListener","unsubscribe","removeDragItem","onDoubleClick","autoSizeColumn","referenceElement","_isTouchEvent","button","pointerMove","auditTime","animationFrameScheduler","pointerUp","_scrollPosition","getViewportScrollPosition","startDragging","point","touches","pageX","pageY","startsWith","Component","[style.width.px]","template","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","HostListener","PblNgridCellDraggerRefDirective","tRef","registry","name","kind","shouldRender","context","hasPlugin","TemplateRef","PblNgridRegistryService","PblNgridMultiTemplateRegistry","PblNgridAggregationContainerDirective","connectedTo","pending","addGroupBy","entered","getPlaceholderElement","display","PblNgridCellResizerRefDirective","resize","DragPluginDefaultTemplatesComponent","PblNgridDragModule","withDefaultTemplates","ngModule","provideCommon","component","NgModule","imports","CommonModule","PblNgridModule","DragDropModule","declarations","exports","entryComponents"],"mappings":";;;;;;;;;;;;;;oFAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GA0B5E,SAASK,EAAWC,EAAYC,EAAQC,EAAKC,GAChD,IAA2HlB,EAAvHmB,EAAIC,UAAUC,OAAQC,EAAIH,EAAI,EAAIH,EAAkB,OAATE,EAAgBA,EAAOhB,OAAOqB,yBAAyBP,EAAQC,GAAOC,EACrH,GAAuB,iBAAZM,SAAoD,mBAArBA,QAAQC,SAAyBH,EAAIE,QAAQC,SAASV,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAIQ,EAAIX,EAAWM,OAAS,EAAGK,GAAK,EAAGA,KAAS1B,EAAIe,EAAWW,MAAIJ,GAAKH,EAAI,EAAInB,EAAEsB,GAAKH,EAAI,EAAInB,EAAEgB,EAAQC,EAAKK,GAAKtB,EAAEgB,EAAQC,KAASK,GAChJ,OAAOH,EAAI,GAAKG,GAAKpB,OAAOyB,eAAeX,EAAQC,EAAKK,GAAIA,EAOzD,SAASM,EAAWC,EAAaC,GACpC,GAAuB,iBAAZN,SAAoD,mBAArBA,QAAQO,SAAyB,OAAOP,QAAQO,SAASF,EAAaC,GA4C7G,SAASE,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWV,EAAI,EAChE,OAAIQ,EAAUA,EAAEG,KAAKJ,GACd,CACHK,KAAM,WAEF,OADIL,GAAKP,GAAKO,EAAEZ,SAAQY,OAAI,GACrB,CAAEM,MAAON,GAAKA,EAAEP,KAAMc,MAAOP,KAKzC,SAASQ,EAAOR,EAAGS,GACtB,IAAIR,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBX,EAAYqB,EAA3BjB,EAAIQ,EAAEG,KAAKJ,GAAOW,EAAK,GAC3B,IACI,WAAc,IAANF,GAAgBA,KAAM,MAAQpB,EAAII,EAAEY,QAAQE,MAAMI,EAAGC,KAAKvB,EAAEiB,OAExE,MAAOO,GAASH,EAAI,CAAEG,MAAOA,GACjC,QACQ,IACQxB,IAAMA,EAAEkB,OAASN,EAAIR,EAAU,SAAIQ,EAAEG,KAAKX,GAE1D,QAAkB,GAAIiB,EAAG,MAAMA,EAAEG,OAE7B,OAAOF,EAGJ,SAASG,IACZ,IAAK,IAAIH,EAAK,GAAIlB,EAAI,EAAGA,EAAIN,UAAUC,OAAQK,IAC3CkB,EAAKA,EAAGI,OAAOP,EAAOrB,UAAUM,KACpC,OAAOkB,ECtIX,kBAAA,SAAAK,IAAA,IAAAC,EAAA,OAAAC,GAAAA,EAAAC,MAAA1C,KAAAU,YAAAV,YAEEwC,EAAAG,WAAa,IAAIC,EAAAA,UAYnB,OAd6C9C,EAAAyC,EAAAE,GAI3CF,EAAArC,UAAA2C,YAAA,SAAYC,GAGV,OADA,KAAuEA,QAAUC,EAAAA,cAAcD,GAC/F,MAGFP,EAAArC,UAAA8C,QAAA,WACEhD,KAAK2C,WAAWM,WAChBR,EAAAvC,UAAM8C,QAAOrB,KAAA3B,OAEjBuC,GAd6CW,EAAAA,aCC7C,kBAYE,SAAAC,QAAY,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAA3C,UAAAC,OAAA0C,IAAAD,EAAAC,GAAA3C,UAAA2C,GAAZ,IAAAb,EAAAC,EAAAC,MAAA1C,KAAAqC,EACWe,KAAIpD,YANfwC,EAAAc,mBAAqB,IAAIC,EAAAA,aAOvBf,EAAKgB,OAAOC,WAAS,SAAExB,GACb,IAAAyB,EAAAzB,EAAAyB,UACJA,aAAqBnB,GACvBmB,EAAUf,WAAWf,KAAK,CAAE+B,KAAMnB,SA0B1C,OA3CyC1C,EAAAqD,EAAAV,GA2BvCU,EAAAjD,UAAA0D,gBAAA,SAAgBC,GAGd,GAAI,KAAKP,mBAAoB,KACrBR,EAAUC,EAAAA,cAAcc,GAC1B,KAAKC,mBAAqBhB,GAC5B,KAAKQ,mBAAmB1B,KAAK,CAAEmC,KAAM,KAAKD,iBAAkBE,KAAMlB,IAGtE,OAAOL,EAAAvC,UAAM0D,gBAAejC,KAAA3B,KAAC6D,IAG/BV,EAAAjD,UAAA8C,QAAA,WACEhD,KAAKsD,mBAAmBL,WACxBR,EAAAvC,UAAM8C,QAAOrB,KAAA3B,OAEjBmD,GA3CyCc,EAAAA,aCGnCC,EAAiB,CACrBC,mBAAoB,EACpBC,gCAAiC,GAMnCC,EAAA,WAEE,SAAAA,EAAsCC,EAClBC,EACAC,EACAC,GAHkBzE,KAAAsE,UAAAA,EAClBtE,KAAAuE,QAAAA,EACAvE,KAAAwE,eAAAA,EACAxE,KAAAyE,kBAAAA,SAOpBJ,EAAAnE,UAAAwE,WAAA,SAAoB5B,EACA6B,GAElB,YAFkB,IAAAA,IAAAA,EAAAT,GAEX,IAAIf,EAAcL,EAAS6B,EAAQ3E,KAAKsE,UAAWtE,KAAKuE,QAASvE,KAAKwE,eAAgBxE,KAAKyE,oBAOpGJ,EAAAnE,UAAA0E,eAAA,SAAwB9B,GACtB,OAAO,IAAIP,EAAkBO,EAAS9C,KAAKyE,kBAAmBzE,KAAKsE,UAAWtE,KAAKuE,QAASvE,KAAKwE,qCAvBpGK,EAAAA,WAAUzB,KAAA,CAAC,CAAC0B,WAAY,6EAEVC,EAAAA,OAAM3B,KAAA,CAAC4B,EAAAA,mBAnBOC,EAAAA,cAEpBC,EAAAA,qBACqCC,EAAAA,wOAc9C,GCVA,IAAAC,EAAA,SAAA3C,GAAA,SAAA2C,IAAA,IAAA5C,EAAA,OAAAC,GAAAA,EAAAC,MAAA1C,KAAAU,YAAAV,YA6BgBwC,EAAA6C,eAAiB,IAAIC,MAsCrC,OArD0DxF,EAAAsF,EAAA3C,GACxDjD,OAAAyB,eAAImE,EAAAlF,UAAA,iBAAc,KAAlB,WAA6C,OAAOF,KAAiB,8CAgBrEoF,EAAAlF,UAAAqF,SAAA,WAAA,IAAA/C,EAAAxC,KACE,GAAIA,KAAKwF,0BAA0BjD,IAAmB,EACpD,MAAM,IAAIkD,MAAM,iFAElBzF,KAAK0F,aAAaC,cAAclC,WAAS,WAAQ,OAAAjB,EAAKmD,oBAGxDP,EAAAlF,UAAA0F,QAAA,SAAQC,GACN7F,KAAKqF,eAAeS,IAAID,GACxB7F,KAAK+F,YAAYC,MAAMrG,MAAMsG,KAAKjG,KAAKqF,eAAea,WACtDlG,KAAK+F,YAAYI,mBAGnBf,EAAAlF,UAAAkG,WAAA,SAAWP,OACHQ,EAASrG,KAAKqF,eAAeiB,OAAOT,GAK1C,OAJIQ,IACFrG,KAAK+F,YAAYC,MAAMrG,MAAMsG,KAAKjG,KAAKqF,eAAea,WACtDlG,KAAK+F,YAAYI,mBAEZE,GAGOjB,EAAAlF,UAAAyF,cAAA,WAMd,GAHK3F,KAAKuG,kBACRvG,KAAKuG,gBAAkBvG,KAAK8C,SAE1B9C,KAAKwG,uBAAwB,KACzB1D,EAAU9C,KAAKuG,gBAAgBE,cAAcC,cAAc1G,KAAKwG,wBACtExG,KAAK8C,QAAU,IAAI6D,EAAAA,WAAwB7D,QAE3C9C,KAAK8C,QAAU9C,KAAKuG,gBAEtBvG,KAAKwF,eAAe3C,YAAY7C,KAAK8C,8BAjExC8D,EAAAA,UAASxD,KAAA,CAAC,CACTyD,SAAU,oBACVC,SAAU,kBACVC,UAAW,CACT,CAAEC,QAASC,EAAAA,SAAUC,YAAa7C,GAClC,CAAE2C,QAASG,EAAAA,cAAeC,SAAUhC,IAEtCiC,KAAM,CACJC,MAAS,gBACTC,OAAQ,KACRC,iCAAkC,4BAClCC,kCAAmC,kFAapCC,EAAAA,MAAKtE,KAAA,CAAC,wCA2CTgC,EAnEA,CAc0DuC,EAAAA,aAuD1D,IAAAC,EAAA,SAAAnF,GAAA,SAAAmF,IAAA,IAAApF,EAAA,OAAAC,GAAAA,EAAAC,MAAA1C,KAAAU,YAAAV,YA4CgBwC,EAAAqF,cAAe,IA6C/B,OA9EyG/H,EAAA8H,EAAAnF,GAKvGjD,OAAAyB,eAAsC2G,EAAA1H,UAAA,2BAAwB,KAA9D,SAA+D2B,WACzDA,IAAU7B,KAAK8H,YAAc9H,KAAK6H,eAChC7H,KAAK8H,aACPC,EAAA/H,KAAK8D,iBAAiBkE,WAAUC,OAAMvF,MAAAqF,EAAA1F,EAAIrC,KAAK8H,WAAWI,MAAM,OAE9DrG,IACFsG,EAAAnI,KAAK8D,iBAAiBkE,WAAUlC,IAAGpD,MAAAyF,EAAA9F,EAAIR,EAAMqG,MAAM,QAGvDlI,KAAK8H,WAAajG,mCAGpBrC,OAAAyB,eAAI2G,EAAA1H,UAAA,aAAU,KAAd,WAAqC,OAAOF,KAAa,0CAEzDR,OAAAyB,eAAa2G,EAAA1H,UAAA,cAAW,KAAxB,WAAgC,OAAOF,KAAkB,mBACzD,SAAgB6B,GAEV7B,KAAKoI,aACPpI,KAAKoI,YAAYhC,WAAWpG,MAE9BA,KAAKqI,cAAgBxG,EACjBA,IACF7B,KAAKsI,SAASC,mBAAmB1G,EAAM6D,cACvC7D,EAAM+D,QAAQ5F,wCAOlB4H,EAAA1H,UAAAqF,SAAA,WAAA,IAAA/C,EAAAxC,KACE,GAAIA,KAAKwI,sBAAsBrF,IAAe,EAC5C,MAAM,IAAIsC,MAAM,yEAElBzF,KAAKwI,WAAWlF,mBAAmBG,WAAS,SAAEgF,WACtCC,EAA2BlG,EAAKsF,WAChCa,EAAcnG,EAAKM,QAAQ2D,gBAAkBgC,EAAMzE,KAErD0E,IACElG,EAAKqF,eACPE,EAAAU,EAAM1E,KAAKiE,WAAUC,OAAMvF,MAAAqF,EAAA1F,EAAIqG,EAAyBR,MAAM,OAE5DS,IACFR,EAAAM,EAAMzE,KAAKgE,WAAUlC,IAAGpD,MAAAyF,EAAA9F,EAAIqG,EAAyBR,MAAM,QAG/D1F,EAAKqF,aAAec,MAOxBf,EAAA1H,UAAA0I,gBAAA,WAAA,IAAApG,EAAAxC,KACEA,KAAK6I,QAAQpF,WAAS,SAAEqF,GACtB,GAAItG,EAAK6F,cAAe,KAChBU,EAAUvG,EAAKsB,iBACfkF,EAA2BD,EAAkB,WAC9CA,EAAQE,aAAeD,IAA6BxG,EAAK6F,cAAcvF,QAAQ2D,eAClFjE,EAAK0G,MAAMC,KAAKC,EAAAA,KAAK,IAAI3F,WAAS,SAAE4F,GAAc,OAAAL,EAAyBM,YAAYP,WAQ/FnB,EAAA1H,UAAAqJ,YAAA,WACMvJ,KAAKoI,aACPpI,KAAKoI,YAAYhC,WAAWpG,2BArFjC4G,EAAAA,UAASxD,KAAA,CAAC,CACTyD,SAAU,gBACVC,SAAU,cACVO,KAAM,CACJC,MAAS,WACTkC,4BAA6B,yBAE/BzC,UAAW,CACT,CAAEC,QAASC,EAAAA,SAAUC,YAAa7C,0DAQnCqD,EAAAA,MAAKtE,KAAA,CAAC,gDAcNsE,EAAAA,SA2DHE,EAzFA,CAWyG6B,EAAAA,SAiFzG,IAAAC,EAAA,SAAAjH,GAaE,SAAAiH,EAAmB5G,EAA8C6G,GAAjE,IAAAnH,EAAyFC,EAAAd,KAAA3B,KAAM8C,EAAS6G,IAAW3J,YAAhGwC,EAAAM,QAAAA,IACrB,OAFmChD,EAAA4J,EAAAjH,uBAZlCmE,EAAAA,UAASxD,KAAA,CAAC,CACTyD,SAAU,kBACVQ,KAAM,CACJC,MAAS,mBAEXP,UAAW,CACT,CACEC,QAAS4C,EAAAA,cACT1C,YAAawC,iDA/KQ/C,EAAAA,kBACL8C,EAAAA,QAAOpJ,WAAA,CAAA,CAAAwJ,KAmL2BC,EAAAA,cACxDJ,EAdA,CAYmCE,EAAAA,mBC5I/BG,EAAmB,gBAqCrB,SAAAC,EAAmBC,EACPC,EACApH,EACAqH,EACAC,EACYC,EACYC,GANpC,IAAA9H,EAOEC,EAAAd,KAAA3B,KAAM8C,EAASqH,EAAUC,EAAmBC,EAAKC,IAAMtK,YAPtCwC,EAAAyH,KAAAA,EAbnBzH,EAAA+H,GAAK,8BAA8BR,IAU3BvH,EAAAgI,aAAc,EAgCtBhI,EAAAgE,uBAAiC,8BAGjChE,EAAA6C,eAAiB,IAAIC,IAxBnB9C,EAAKiI,cAAgBP,EAAWQ,UA/CH,aA+CyBlI,GAEtDA,EAAKmI,QAAQlH,WAAS,SAAGgF,OACjB9E,EAAO8E,EAAU,KAEjBmC,EAAgBX,EAAKY,GAAGC,OAAOC,QAAQpH,EAAKqH,eAAeC,KAC3DC,EAAezC,EAAMyC,aAAejB,EAAKY,GAAGM,YAElD3I,EAAKyH,KAAKmB,WAAWC,QACrB7I,EAAKyH,KAAKY,GAAGS,SAASV,EAAeM,GAAc,GACnD1I,EAAKyH,KAAKsB,UAAUC,SAAS,mBAyBnC,OA1DgE1L,EAAAkK,EAAAvH,KAAnDuH,EAIXxK,OAAAyB,eAAa+I,EAAA9J,UAAA,aAAU,KAAvB,WAAqC,OAAOF,KAAKwK,iBACjD,SAAe3I,GACbA,EAAQ4J,EAAAA,sBAAsB5J,GAC9B7B,KAAKwK,YAAc3I,mCAsCrBrC,OAAAyB,eAAI+I,EAAA9J,UAAA,iBAAc,KAAlB,WAA4C,OAAOF,KAAiB,8CAGpEgK,EAAA9J,UAAAqF,SAAA,WAAmBH,EAAgBlF,UAAUqF,SAAS5D,KAAK3B,OAC3DgK,EAAA9J,UAAA0F,QAAA,SAAQC,GAAuB,OAAOT,EAAgBlF,UAAU0F,QAAQjE,KAAK3B,KAAM6F,IACnFmE,EAAA9J,UAAAkG,WAAA,SAAWP,GAA0B,OAAOT,EAAgBlF,UAAUkG,WAAWzE,KAAK3B,KAAM6F,IAC5FmE,EAAA9J,UAAAyF,cAAA,WAAwBP,EAAgBlF,UAAUyF,cAAchE,KAAK3B,OAGrEgK,EAAA9J,UAAAqJ,YAAA,WACE9G,EAAAvC,UAAMqJ,YAAW5H,KAAA3B,MACjBA,KAAKyK,cAAczK,KAAKiK,2BA3E3BrD,EAAAA,UAASxD,KAAA,CAAC,CACTyD,SAAU,wBACVC,SAAU,qBACV4E,OAAQ,CACN,4DAEFrE,KAAM,CACJC,MAAS,gBACTC,OAAQ,KACRC,iCAAkC,4BAClCC,kCAAmC,6BACnCkE,0BAA2B,kFAE7B5E,UAAW,CACT,CAAEC,QAASC,EAAAA,SAAUC,YAAa7C,GAClC,CAAE2C,QAAS4E,EAAAA,iBAAkBC,cAAUC,GACvC,CAAE9E,QAASG,EAAAA,cAAeD,YAAa6E,iDAjClCC,EAAAA,yBAAgCC,EAAAA,gCAvBvCtF,EAAAA,kBAeAM,EAAAA,gBAjBAiF,EAAAA,yBAcOC,EAAAA,eAAc9L,WAAA,CAAA,CAAAwJ,KAmERC,EAAAA,kBA9Db8B,EAAAA,iBAAgBvL,WAAA,CAAA,CAAAwJ,KA+DHC,EAAAA,UAAQ,CAAAD,KAAIuC,EAAAA,kDAjBxB1E,EAAAA,SAJUsC,EAAiC+B,EAAA3L,EAAA,CApB7CiM,EAAAA,YAAY,CAAE9B,GAJkB,sCAuCNyB,EAAAA,kBACDC,EAAAA,yBACHtF,EAAAA,WACCM,EAAAA,SACSiF,EAAAA,kBACDC,EAAAA,eACcP,EAAAA,oBArBjC5B,IAAmDrC,EAAAA,aA4DhE,IAAA2E,EAAA,SAAA7J,GA6CE,SAAA6J,EAAYxJ,EAC+CuF,EAC7B/D,EAClBC,EACAgI,EACyB5H,EACzB6H,EACArC,EACAsC,GARZ,IAAAjK,EASEC,EAAAd,KAAA3B,KACE8C,EACAuF,EACA/D,EACAC,EACAgI,EACA5H,EACA6H,EACArC,EACAsC,IACDzM,YAnDHwC,EAAAkK,oBAAsB,gBA6FtBlK,EAAAqF,cAAe,EAxCbrF,EAAKqG,QAAQpF,WAAS,SAAGgF,GACjB,IAAAV,EAAAvF,EAAAmK,SAAEC,EAAA7E,EAAA6E,IAAK3B,EAAAlD,EAAAkD,IAAKhB,EAAAlC,EAAAkC,KAAMpI,EAAAkG,EAAAlG,MACxBW,EAAKqK,gBAAkB,CAAED,IAAGA,EAAE3B,IAAGA,EAAEhB,KAAIA,EAAEpI,MAAKA,QA2CpD,OAnGuD/B,EAAAwM,EAAA7J,GAGrDjD,OAAAyB,eAAIqL,EAAApM,UAAA,UAAO,KAAX,WACE,OAAOF,KAAK2M,cAGd,SAAsC9K,GACpC7B,KAAK2M,SAAW9K,MAEVqI,EAAalK,KAAKkK,WAAarI,GAASoK,EAAAA,yBAAyBa,KAAKjL,EAAMoI,MAC5E8C,EAAS7C,GAAcA,EAAW8C,UA3GX,cA4G7BhN,KAAKoI,YAAc2E,QAAUjB,mCAU/BtM,OAAAyB,eAAIqL,EAAApM,UAAA,iBAAc,KAAlB,WACE,OAAOF,KAAK6M,iDA2CdrN,OAAAyB,eAAsCqL,EAAApM,UAAA,2BAAwB,KAA9D,SAA+D2B,WACzDA,IAAU7B,KAAK8H,YAAc9H,KAAK6H,eAChC7H,KAAK8H,aACPC,EAAA/H,KAAK8D,iBAAiBkE,WAAUC,OAAMvF,MAAAqF,EAAA1F,EAAIrC,KAAK8H,WAAWI,MAAM,OAE9DrG,IACFsG,EAAAnI,KAAK8D,iBAAiBkE,WAAUlC,IAAGpD,MAAAyF,EAAA9F,EAAIR,EAAMqG,MAAM,QAGvDlI,KAAK8H,WAAajG,mCAGpBrC,OAAAyB,eAAIqL,EAAApM,UAAA,aAAU,KAAd,WAAoC,OAAOF,KAAa,0CAExDR,OAAAyB,eAAaqL,EAAApM,UAAA,cAAW,KAAxB,WAAmE,OAAOF,KAAkB,mBAC5F,SAAgB6B,GAEV7B,KAAKoI,aACPpI,KAAKoI,YAAYhC,WAAWpG,MAE9BA,KAAKqI,cAAgBxG,EACjBA,IACF7B,KAAKsI,SAASC,mBAAmB1G,EAAM6D,cACvC7D,EAAM+D,QAAQ5F,wCAMlBsM,EAAApM,UAAAqF,SAAA,WAAmBqC,EAAY1H,UAAUqF,SAAS5D,KAAK3B,OACvDsM,EAAApM,UAAA0I,gBAAA,WAA0BhB,EAAY1H,UAAU0I,gBAAgBjH,KAAK3B,MAAOyC,EAAAvC,UAAM0I,gBAAejH,KAAA3B,OACjGsM,EAAApM,UAAAqJ,YAAA,WAAsB3B,EAAY1H,UAAUqJ,YAAY5H,KAAK3B,MAAQyC,EAAAvC,UAAMqJ,YAAW5H,KAAA3B,2BA7GvF4G,EAAAA,UAASxD,KAAA,CAAC,CACTyD,SAAU,oBACVC,SAAU,kBACVO,KAAM,CACJC,MAAS,WACTkC,4BAA6B,yBAE/BzC,UAAW,CACT,CAAEC,QAASC,EAAAA,SAAUC,YAAa7C,GAClC,CAAE2C,QAASyC,EAAAA,QAASvC,YAAaoF,iDAhInC3F,EAAAA,kBAgBAgB,EAAAA,YAAWtH,WAAA,CAAA,CAAAwJ,KAqJE9E,EAAAA,OAAM3B,KAAA,CAAC+D,EAAAA,gBAAa,CAAA0C,KAAGC,EAAAA,UAAQ,CAAAD,KAAIuC,EAAAA,2CACnCrH,EAAAA,OAAM3B,KAAA,CAAC4B,EAAAA,mBA/JpBC,EAAAA,cADAgI,EAAAA,iDAmKalI,EAAAA,OAAM3B,KAAA,CAAC8J,EAAAA,0BA7Jbf,EAAAA,sBAGPlF,EAAAA,gBAjBAiF,EAAAA,sDA4ICxE,EAAAA,MAAKtE,KAAA,CAAC,qDA2DNsE,EAAAA,MAAKtE,KAAA,CAAC,gDAcNsE,EAAAA,SAmBH4E,EA/GA,CAYuD7C,EAAAA,SCnFvD,SAAS0D,EAA0CC,eACjD,IAAiB,IAAAjF,EAAA7G,EAAAtB,KAAKqN,QAAMC,EAAAnF,EAAAvG,QAAA0L,EAAAxL,KAAAwL,EAAAnF,EAAAvG,OAAE,CAAzB,IAAM2I,EAAE+C,EAAAzL,MACL0L,EAAIvN,KAAKwN,WAAWV,KAAKvC,GAC/B,GAAIgD,GAAKA,EAAEE,cAAgBL,EAAOM,UAAUH,GAC1C,OAAO,oGAGX,OAAO,EAGT,SAAgBI,IACdC,EAAAA,UAAUC,eAAe,WACzBD,EAAAA,UAAUC,eAAe,aACzBC,EAAAA,eAAeD,eAAe,eAE9BD,EAAAA,UAAU1N,UAAUiN,yBAAwB,SAA8BC,GACxE,OAAOD,EAAyBxL,KAAK3B,KAAMoN,IAAWD,EAAyBxL,KAAKyL,EAAQpN,OCnBhG,IAEI+J,EAAmB,gBAuDrB,SAAAgE,EAAmBC,EACP9D,EACApH,EACAqH,EACAC,EACYC,EACYC,GANpC,IAAA9H,EAOEC,EAAAd,KAAA3B,KAAM8C,EAASqH,EAAUC,EAAmBC,EAAKC,IAAMtK,YAPtCwC,EAAAwL,MAAAA,EAlCnBxL,EAAA+H,GAAK,iCAAiCR,IACtCvH,EAAAyL,YAAyC,aAedzL,EAAA0L,SAAqC,IAAIC,EAAAA,iBAAyB,GAIrF3L,EAAA4L,gBAAiB,EACjB5L,EAAA6L,iBAAkB,EAqD1B7L,EAAA6C,eAAiB,IAAIC,IAhCnB9C,EAAKiI,cAAgBP,EAAWQ,UAjEO,gBAiEelI,GAEtDA,EAAKgE,uBAAyB,6BAC9BhE,EAAKmI,QAAQlH,WAAS,SAAGgF,GAClBjG,EAAK8L,gBACR9L,EAAKwL,MAAMO,UAAUC,WAAY/F,EAAU,KAAoC2E,OAAQ3E,EAAMyC,iBAIjG1I,EAAK0L,SAASzK,WAAS,SAAEgL,OACjBC,EAAK5L,EAAQ2D,cACfgI,EACFC,EAAG1G,UAAUlC,IAAI,kCAEjB4I,EAAG1G,UAAUC,OAAO,kCAEtBzF,EAAKmM,cAAW7C,KAGlBtJ,EAAKoM,iCA8GT,OA5KmE9O,EAAAiO,EAAAtL,KAAtDsL,EAIXvO,OAAAyB,eAAa8M,EAAA7N,UAAA,gBAAa,KAA1B,WAAwC,OAAOF,KAAKoO,oBACpD,SAAkBvM,GAChBA,EAAQ4J,EAAAA,sBAAsB5J,GAC9B7B,KAAKoO,eAAiBvM,mCAOxBrC,OAAAyB,eAAa8M,EAAA7N,UAAA,iBAAc,KAA3B,WAAyC,OAAOF,KAAKqO,qBACrD,SAAmBxM,GAAkB7B,KAAKqO,gBAAkB5C,EAAAA,sBAAsB5J,oCAalFrC,OAAAyB,eAAY8M,EAAA7N,UAAA,qCAAkC,KAA9C,WACE,OAAQF,KAAiB,aAAS6O,iCAAiCC,KAAK9O,KAAK0F,+CAE/ElG,OAAAyB,eAAY8M,EAAA7N,UAAA,2BAAwB,KAApC,WACE,OAAQF,KAAiB,aAAS+O,gDAyCpCvP,OAAAyB,eAAI8M,EAAA7N,UAAA,iBAAc,KAAlB,WAAgF,OAAOF,KAAiB,8CAIxG+N,EAAA7N,UAAA0F,QAAA,SAAQC,GAAuB,OAAOT,EAAgBlF,UAAU0F,QAAQjE,KAAK3B,KAAM6F,IACnFkI,EAAA7N,UAAAkG,WAAA,SAAWP,GAA0B,OAAOT,EAAgBlF,UAAUkG,WAAWzE,KAAK3B,KAAM6F,IAI5FkI,EAAA7N,UAAAqF,SAAA,WAAA,IAAA/C,EAAAxC,KACEoF,EAAgBlF,UAAUqF,SAAS5D,KAAK3B,MACxCA,KAAK2K,QAAQlH,WAAS,SAAExB,GAAK,OAAAO,EAAKwM,eAClChP,KAAKwF,eAAe7C,WAAWc,WAAS,SAAExB,GAAK,OAAAO,EAAKwM,gBAGtDjB,EAAA7N,UAAAqJ,YAAA,WACE9G,EAAAvC,UAAMqJ,YAAW5H,KAAA3B,MACjBA,KAAKyK,cAAczK,KAAKgO,QAGVD,EAAA7N,UAAAyF,cAAA,WACdP,EAAgBlF,UAAUyF,cAAchE,KAAK3B,MAC7CA,KAAKiP,gBAAanD,EAClB9L,KAAKkO,SAAStM,MAAK,IAGbmM,EAAA7N,UAAA8O,UAAR,WACEhP,KAAKkO,SAAStM,MAAK,GACF5B,KAAKkP,yBACbC,SAAO,SAAEC,EAASC,eACzB,IAAgB,IAAAlH,EAAA7G,EAAA8N,EAAQvJ,KAAKyJ,KAAKC,YAAUjC,EAAAnF,EAAAvG,QAAA0L,EAAAxL,KAAAwL,EAAAnF,EAAAvG,OAAE,CAAlC0L,EAAAzL,MACR2N,MAAMC,UAAY,0GAKlB1B,EAAA7N,UAAA0O,uBAAR,WAAA,IAAApM,EAAAxC,KACQ+H,EAAA/H,KAAA0F,aAAEgK,EAAA3H,EAAA2H,UAAWC,EAAA5H,EAAA4H,MAEnB3P,KAAKwF,eAAemK,MAAK,SAAIhM,EAAmCiM,EAAkBC,OAC1EZ,EAAazM,EAAKyM,WAExB,GADAzM,EAAKyM,gBAAanD,EACdmD,GAAcA,EAAWpJ,OAASlC,EAAM,KACpCmM,EAAoC,eAArBtN,EAAKyL,YAC1B2B,EAAWX,EAAWc,WAAWC,KAAO,GAAKF,EAAeb,EAAWgB,OAAS,GAChFJ,EAAWZ,EAAWc,WAAWG,IAAM,GAAMJ,EAAmC,EAApBb,EAAWgB,QAEzEN,EAAMhO,KAAKa,EAAKkD,aAAc/B,EAAMiM,EAAUC,IAGhD7P,KAAKwF,eAAekK,UAAS,SAAI/L,EAAmCiM,EAAkBC,EAAkBM,WAChGC,EAAW5N,EAAK0M,yBACtB1M,EAAKyM,WAAamB,EAAStD,MAAI,SAAEuD,GAAK,OAAAA,EAAExK,OAASlC,SAC3C2M,EAAW9N,EAAK+N,mCAAkC,EAAkDX,EAAUC,EAAUM,GAC9H,MAAkB,IAAdG,GAAmBF,EAASzP,OAAS,GAAzC,KAGM6P,EAAWJ,EAASK,QACpBX,EAAoC,eAArBtN,EAAKyL,YACpByC,EAAuBN,EAASE,GAEtC,IAAII,EAAqB7K,KAAKyJ,KAAKlC,OAAOuD,UAA1C,KAKMC,EAAyBpO,EAAKmM,SAAWnM,EAAKmM,SAAWhL,EACzDuH,EAAekF,EAASS,WAAS,SAAEC,GAAe,OAAAA,EAAYjL,OAAS+K,KACvEG,EAAQC,KAAKC,IAAIX,EAAUpF,GAC3BgG,EAAmBd,EAASK,MAAMM,EAAOC,KAAKG,IAAIb,EAAWpF,GAAgB6F,OACnF,IAAuB,IAAAK,EAAA9P,EAAA4P,GAAgBG,EAAAD,EAAAxP,QAAAyP,EAAAvP,KAAAuP,EAAAD,EAAAxP,OAAE,CAApC,IAAM0P,EAAQD,EAAAxP,MACjB,GAAIyP,EAASzL,KAAKyJ,KAAKlC,OAAOuD,WAAaW,EAASzL,OAASlC,EAC3D,yGAKCA,EAAK2L,KAAKlC,OAAOD,yBAAyBuD,EAAqB7K,KAAKyJ,KAAKlC,UAI9EsC,EAAU/N,KAAKa,EAAKkD,aAAc/B,EAAMiM,EAAUC,EAAUM,GAE5D3N,EAAKmM,SAAW+B,EAAqB7K,KAEjCiK,GACFM,EAASjB,SAAO,SAAEC,EAASC,WAEzB,GAAImB,EAASnB,KAAWD,MAIxB,IAAgB,IAAAjH,EAAA7G,EAAA8N,EAAQvJ,KAAKyJ,KAAKC,YAAUjC,EAAAnF,EAAAvG,QAAA0L,EAAAxL,KAAAwL,EAAAnF,EAAAvG,OAAE,CAAlC0L,EAAAzL,MACR2N,MAAMC,UAAY,eAAeL,EAAQa,OAAM,2IAvL5DrJ,EAAAA,UAASxD,KAAA,CAAC,CACTyD,SAAU,2BACVC,SAAU,wBACV4E,OAAQ,CACN,4DAEFrE,KAAM,CACJC,MAAS,gBACTC,OAAQ,KACRC,iCAAkC,4BAClCC,kCAAmC,8BAErCV,UAAW,CACT,CAAEC,QAASC,EAAAA,SAAUC,YAAa7C,GAClC,CAAE2C,QAASG,EAAAA,cAAeD,YAAaqK,iDAhClCvF,EAAAA,yBAA2CC,EAAAA,gCA5BlDtF,EAAAA,kBAiBAM,EAAAA,gBAnBAiF,EAAAA,yBAgBOC,EAAAA,eAAc9L,WAAA,CAAA,CAAAwJ,KAyFRC,EAAAA,kBAjFb8B,EAAAA,iBAAgBvL,WAAA,CAAA,CAAAwJ,KAkFHC,EAAAA,UAAQ,CAAAD,KAAIuC,EAAAA,qDArCxB1E,EAAAA,8BAUAA,EAAAA,wBAGA8J,EAAAA,OAAMpO,KAAA,CAAC,sBAjBG2K,EAAoCwD,EAAAnR,EAAA,CAlBhDiM,EAAAA,YAAY,CAAE9B,GAJ4B,gBAIZkH,QAAS9D,2BAqDZ3B,EAAAA,kBACFC,EAAAA,yBACHtF,EAAAA,WACCM,EAAAA,SACSiF,EAAAA,kBACDC,EAAAA,eACcP,EAAAA,oBAzCjCmC,IAAsDpG,EAAAA,aA8KnE,IAAA+J,EAAA,SAAAjP,GAgCE,SAAAiP,EAAY5O,EAC+CuF,EAC7B/D,EAClBC,EACAgI,EACyB5H,EACzB6H,EACArC,EACAsC,GARZ,IAAAjK,EASEC,EAAAd,KAAA3B,KACE8C,EACAuF,EACA/D,EACAC,EACAgI,EACA5H,EACA6H,EACArC,EACAsC,IACDzM,YAtCHwC,EAAAkK,oBAAsB,wBAyEtBlK,EAAAqF,cAAe,IA2CjB,OArH0D/H,EAAA4R,EAAAjP,GAKxDjD,OAAAyB,eAAiCyQ,EAAAxR,UAAA,UAAO,KAAxC,SAAyC2B,GACvC7B,KAAK2M,SAAW9K,EAChB7B,KAAKoN,OAASvL,GAASA,EAAM+K,QACvB1C,EAAalK,KAAKkK,WAAarI,GAASoK,EAAAA,yBAAyBa,KAAKjL,EAAMoI,MAC5E8C,EAAS7C,GAAcA,EAAW8C,UAzND,iBA0NvChN,KAAKoI,YAAc2E,QAAUjB,EAC7B9L,KAAK2R,UAAW3R,KAAKoN,SAAUpN,KAAKoN,OAAOwE,yCAmC7CpS,OAAAyB,eAAsCyQ,EAAAxR,UAAA,2BAAwB,KAA9D,SAA+D2B,WACzDA,IAAU7B,KAAK8H,YAAc9H,KAAK6H,eAChC7H,KAAK8H,aACPC,EAAA/H,KAAK8D,iBAAiBkE,WAAUC,OAAMvF,MAAAqF,EAAA1F,EAAIrC,KAAK8H,WAAWI,MAAM,OAE9DrG,IACFsG,EAAAnI,KAAK8D,iBAAiBkE,WAAUlC,IAAGpD,MAAAyF,EAAA9F,EAAIR,EAAMqG,MAAM,QAGvDlI,KAAK8H,WAAajG,mCAGpBrC,OAAAyB,eAAIyQ,EAAAxR,UAAA,aAAU,KAAd,WAA+D,OAAOF,KAAa,0CAEnFR,OAAAyB,eAAayQ,EAAAxR,UAAA,cAAW,KAAxB,WAAsE,OAAOF,KAAkB,mBAC/F,SAAgB6B,GAEV7B,KAAKoI,aACPpI,KAAKoI,YAAYhC,WAAWpG,MAE9BA,KAAKqI,cAAgBxG,EACjBA,IACF7B,KAAKsI,SAASC,mBAAmB1G,EAAM6D,cACvC7D,EAAM+D,QAAQ5F,wCAMlB0R,EAAAxR,UAAAqF,SAAA,WAAmBqC,EAAY1H,UAAUqF,SAAS5D,KAAK3B,OAEvD0R,EAAAxR,UAAAqJ,YAAA,WAAsB3B,EAAY1H,UAAUqJ,YAAY5H,KAAK3B,MAAQyC,EAAAvC,UAAMqJ,YAAW5H,KAAA3B,OAGtF0R,EAAAxR,UAAA0I,gBAAA,WAAA,IAAApG,EAAAxC,KACE4H,EAAY1H,UAAU0I,gBAAgBjH,KAAK3B,MAC3CyC,EAAAvC,UAAM0I,gBAAejH,KAAA3B,MAErBA,KAAKsI,SAAS3C,cAAclC,WAAS,WAC3B,IAAA2E,EAAA5F,EAAA4F,YACR,GAAIA,GAAeA,EAAYyJ,eAAiBrP,EAAKmK,SAASC,IAAIgF,SAM5DxJ,EAAY1C,aAAa+I,aAC3B,OAAOjM,EAAKmP,UAAW,KAI7B3R,KAAK6I,QAAQpF,WAAS,WAAQ,OAAAjB,EAAKmK,SAASC,IAAIkF,UAAUrD,YAAa,KACvEzO,KAAKkJ,MAAMzF,WAAS,WAAQ,OAAAjB,EAAKmK,SAASC,IAAIkF,UAAUrD,YAAa,MAGvEiD,EAAAxR,UAAAqP,SAAA,WAIE,OAHKvP,KAAK+R,QACR/R,KAAK+R,MAAQ/R,KAAK2M,SAASC,IAAIkF,UAAUE,kBAAkB,UAEtDhS,KAAK+R,OAGdL,EAAAxR,UAAA8F,MAAA,mBAEE,GADAvD,EAAAvC,UAAM8F,MAAKrE,KAAA3B,MACPA,KAAK+R,MAAO,KACd,IAAiB,IAAA5J,EAAA7G,EAAAtB,KAAK+R,OAAKzE,EAAAnF,EAAAvG,QAAA0L,EAAAxL,KAAAwL,EAAAnF,EAAAvG,OAAE,CAAhB0L,EAAAzL,MACR2N,MAAMC,UAAY,qGAEvBzP,KAAK+R,WAAQjG,wBA9HlBlF,EAAAA,UAASxD,KAAA,CAAC,CACTyD,SAAU,uBACVC,SAAU,qBACVO,KAAM,CACJC,MAAS,WACTkC,4BAA6B,yBAE/BzC,UAAW,CACT,CAAEC,QAASC,EAAAA,SAAUC,YAAa7C,GAClC,CAAE2C,QAASyC,EAAAA,QAASvC,YAAawK,iDAtPnC/K,EAAAA,kBAuBAgB,EAAAA,YAAWtH,WAAA,CAAA,CAAAwJ,KAuPE9E,EAAAA,OAAM3B,KAAA,CAAC+D,EAAAA,gBAAa,CAAA0C,KAAGC,EAAAA,UAAQ,CAAAD,KAAIuC,EAAAA,2CACnCrH,EAAAA,OAAM3B,KAAA,CAAC4B,EAAAA,mBAtQpBC,EAAAA,cADAgI,EAAAA,iDA0QalI,EAAAA,OAAM3B,KAAA,CAAC8J,EAAAA,0BApQbf,EAAAA,sBAGPlF,EAAAA,gBAnBAiF,EAAAA,sDAgQCxE,EAAAA,MAAKtE,KAAA,CAAC,wDAyCNsE,EAAAA,MAAKtE,KAAA,CAAC,gDAcNsE,EAAAA,SAyDHgK,EAjIA,CAY0DjI,EAAAA,SCjP1D,SAAgBkE,IACdC,EAAAA,UAAUC,eAAe,UCe3B,IAGMoE,EAA8BC,EAAAA,gCAAgC,CAACC,SAAS,IAGxEC,EAA6BF,EAAAA,gCAAgC,CAACC,SAAS,iBAoD3E,SAAAE,EAAmBvP,EACCyB,EACAC,EACAC,EACyB6N,EACb9F,GALhC,IAAAhK,EAAAxC,KAAmBA,KAAA8C,QAAAA,EACC9C,KAAAuE,QAAAA,EACAvE,KAAAwE,eAAAA,EACAxE,KAAAyE,kBAAAA,EACyBzE,KAAAsS,QAAAA,EACbtS,KAAAwM,KAAAA,EAxBvBxM,KAAAuS,cAAgB,EAUjBvS,KAAAwS,yBAA2BC,EAAAA,aAAaC,MACxC1S,KAAA2S,uBAAyBF,EAAAA,aAAaC,MAMtC1S,KAAA4S,6BAA+BH,EAAAA,aAAaC,MAyCpD1S,KAAA6S,aAAY,SAAIpK,GACdjG,EAAKsQ,wBAAwBtQ,EAAKuQ,aAActK,IAgC1CzI,KAAAgT,aAAY,SAAIvK,OAChBwK,EAAkBzQ,EAAK0Q,0BAA0BzK,GACjD0K,EAAYF,EAAgBG,EAAI5Q,EAAK6Q,sBAAsBD,EAC3DE,EAAYL,EAAgBM,EAAI/Q,EAAK6Q,sBAAsBE,EAEjE,GAAK/Q,EAAKgR,oBAAV,CAqBAhR,EAAKiR,WAAY,EACjBhL,EAAMiL,iBACNjL,EAAMkL,sBAEFC,EAAW5C,KAAK6C,IAAI,EAAGrR,EAAKsR,cAAgBX,GAE5CS,EAAWpR,EAAK4K,OAAO2G,SACzBH,EAAWpR,EAAK4K,OAAO2G,SACdZ,EAAY,GAAKS,EAAWpR,EAAK4K,OAAO4G,WACjDJ,EAAWpR,EAAK4K,OAAO4G,UAGrBxR,EAAKyR,aAAeL,IACtBpR,EAAKyR,WAAaL,EAClBpR,EAAK4K,OAAO8G,YAAeN,EAAQ,MACnCpR,EAAKyH,KAAKkK,0BA/BNnD,KAAKG,IAAIgC,GAAanC,KAAKG,IAAImC,IAAc9Q,EAAK8P,QAAQnO,qBAC5D3B,EAAKgR,qBAAsB,EAS3BhR,EAAK4K,OAAOgH,SAASC,aACrB7R,EAAKyR,WAAazR,EAAKsR,cAAgBtR,EAAK4K,OAAO0E,UAAUwC,WA2B3DtU,KAAAuU,WAAU,WACX/R,EAAKgS,gBAIVhS,EAAKiS,uBACLjS,EAAKiC,kBAAkBiQ,aAAalS,GAE/BA,EAAKgR,qBAKVhR,EAAKyH,KAAKsE,UAAUoG,aAAanS,EAAK4K,OAAQ5K,EAAKyR,WAAa,QA/HhExP,EAAkBmQ,iBAAiB5U,MA0JvC,OAnMER,OAAAyB,eAAaoR,EAAAnS,UAAA,UAAO,KAApB,SAAqB2B,GACnB,GAAIA,EAAO,CACD,IAAA+K,EAAA/K,EAAA+K,IAAK3C,EAAApI,EAAAoI,KACb,GAAI4K,EAAAA,YAAYjI,GAGd,OAFA5M,KAAKoN,OAASR,OACd5M,KAAKiK,KAAOA,GAIhBjK,KAAKoN,OAASpN,KAAKiK,UAAO6B,mCAW5BtM,OAAAyB,eAAIoR,EAAAnS,UAAA,QAAK,KAAT,WAAsC,OAAOF,KAAKiK,sCAwBlDoI,EAAAnS,UAAA0I,gBAAA,WAAA,IAAApG,EAAAxC,KAKEA,KAAK4S,6BAA+B5S,KAAKuE,QAAQuQ,SAASC,eAAe5L,KAAKC,EAAAA,KAAK,IAAI3F,WAAS,eCnDjCuR,EAC3DC,EDmDIpR,EAAcrB,EAAKuQ,aAAevQ,EAAK0S,kBAChCrR,EAAYsR,cACpBnN,UAAUlC,IAAI,2BACnBjC,EAAYuR,iBAAiB,YAAa5S,EAAKqQ,aAAcT,GAC7DvO,EAAYuR,iBAAiB,aAAc5S,EAAKqQ,aAAcZ,GCvD5DgD,GAD2DD,GDyDlB,GCxDnB,GAAK,OAjBnC,SAA6BK,EAAsCvK,GACjE,IAAK,IAAIvK,KAAOuK,EACVA,EAAOjL,eAAeU,KACxB8U,EAAK9U,GAAOuK,EAAM,IAgBtBwK,CDsDiCzR,ECtDZ2L,MAAO,CAC1B+F,YAAaP,EAAS,GAAK,OAC3BQ,eAAgBR,EAAS,GAAK,OAC9BS,wBAAyBT,EAAS,GAAK,cACvCC,WAAYA,EACZS,aAAcT,EACdU,iBAAkBV,EAClBW,cAAeX,QDmDjB5C,EAAAnS,UAAAqJ,YAAA,WACMvJ,KAAK+S,eACP/S,KAAK+S,aAAa8C,oBAAoB,YAAa7V,KAAK6S,aAAcT,GACtEpS,KAAK+S,aAAa8C,oBAAoB,aAAc7V,KAAK6S,aAAcZ,IAEzEjS,KAAK4S,6BAA6BkD,cAClC9V,KAAKyE,kBAAkBsR,eAAe/V,MACtCA,KAAKyU,wBAIPpC,EAAAnS,UAAA8V,cADA,SACcvN,GACZzI,KAAKiK,KAAKsE,UAAU0H,eAAejW,KAAKoN,SAalCiF,EAAAnS,UAAA4S,wBAAR,SAAgCoD,EAA+BzN,GAI7DA,EAAMkL,kBAGF3T,KAAKwU,gBAAmBxU,KAAKmW,cAAc1N,IAA2B,IAAjBA,EAAM2N,SAI/DpW,KAAKwT,oBAAsBxT,KAAKyT,WAAY,EAC5CzT,KAAKwS,yBAA2BxS,KAAKyE,kBAAkB4R,YACpDlN,KAAKmN,EAAAA,UAAU,EAAGC,EAAAA,0BAClB9S,UAAUzD,KAAKgT,cAClBhT,KAAK2S,uBAAyB3S,KAAKyE,kBAAkB+R,UAAU/S,UAAUzD,KAAKuU,YAC9EvU,KAAKyW,gBAAkBzW,KAAKwE,eAAekS,4BAE3C1W,KAAKqT,sBAAwBrT,KAAKkT,0BAA0BzK,GAC5DzI,KAAKyE,kBAAkBkS,cAAc3W,KAAMyI,KAoErC4J,EAAAnS,UAAAgT,0BAAR,SAAkCzK,OAC1BmO,EAAQ5W,KAAKmW,cAAc1N,GAASA,EAAMoO,QAAQ,GAAKpO,EAE7D,MAAO,CACL2K,EAAGwD,EAAME,MAAQ9W,KAAKyW,gBAAgBzG,KACtCuD,EAAGqD,EAAMG,MAAQ/W,KAAKyW,gBAAgBvG,MAIlCmC,EAAAnS,UAAAiW,cAAR,SAAsB1N,GACpB,OAAOA,EAAMoB,KAAKmN,WAAW,UAG/B3E,EAAAnS,UAAAsU,YAAA,WACE,OAAOxU,KAAKyE,kBAAkBgK,WAAWzO,OAGnCqS,EAAAnS,UAAAgV,gBAAR,WACE,OAAOlV,KAAK8C,QAAQ2D,eAEd4L,EAAAnS,UAAAuU,qBAAR,WACEzU,KAAKwS,yBAAyBsD,cAC9B9V,KAAK2S,uBAAuBmD,mCA/M/BmB,EAAAA,UAAS7T,KAAA,CAAC,CACTyD,SAAU,wBACVQ,KAAM,CACJC,MAAS,2BACT4P,mBAAoB,iBAEtBC,SAAA,8BAEAC,gBAAiBC,EAAAA,wBAAwBC,OACzCC,cAAeC,EAAAA,kBAAkBC,8JA3CjC9Q,EAAAA,kBAMA1B,EAAAA,cAKOC,EAAAA,qBAEeC,EAAAA,iDA0ETJ,EAAAA,OAAM3B,KAAA,CAAC8J,EAAAA,0BA7Ebf,EAAAA,eAAc9L,WAAA,CAAA,CAAAwJ,KA8ERC,EAAAA,+CAxCZpC,EAAAA,6BAgBAA,EAAAA,6BAqDAgQ,EAAAA,aAAYtU,KAAA,CAAC,WAAY,CAAC,cAxEhBiP,EAA2BjS,EAAA,CAZvCiM,EAAAA,YAAY,CAAE9B,GAR2B,eAQXkH,QAAS9D,2BAkDVhH,EAAAA,WACC1B,EAAAA,OACOC,EAAAA,cACGC,EAAAA,iBAAgB3F,OAEjB2M,EAAAA,kBA3C3BkG,ME3Cb,IAAAsF,EAAA,SAAAlV,GAIE,SAAAkV,EAAYC,EAAuDC,GAAnE,IAAArV,EAAwGC,EAAAd,KAAA3B,KAAM4X,EAAMC,IAAS7X,YAFpHwC,EAAAsV,KAAsB,cACtBtV,EAAAuV,KAA+B,yBAa1C,OAfqDjY,EAAA6X,EAAAlV,GAKnDkV,EAAAzX,UAAA8X,aAAA,SAAaC,GAQX,OADmBhM,EAAAA,yBAAyBa,KAAKmL,EAAQhO,MACvCiO,UJ0BqB,sCIxC1CtR,EAAAA,UAASxD,KAAA,CAAC,CAAEyD,SAAU,wEARHsR,EAAAA,mBACXC,EAAAA,2BAuBTT,EAhBA,CACqDU,EAAAA,mCCoBjDtO,EAAmB,EAEvBuO,EAAA,SAAA7V,GAsBE,SAAA6V,EAAmBrO,EACPC,EACApH,EACAqH,EACAC,EACYC,EACYC,GANpC,IAAA9H,EAOEC,EAAAd,KAAA3B,KAAM8C,EAASqH,EAAUC,EAAmBC,EAAKC,IAAMtK,YAPtCwC,EAAAyH,KAAAA,EANnBzH,EAAA+H,GAAK,0CAA0CR,IAC/CvH,EAAAyL,YAAyC,aAsDzCzL,EAAA6C,eAAiB,IAAIC,IAzCH4E,EAAW8C,UAAU,iBAC7BuL,YAAc/V,EAAK+H,GAE3B/H,EAAKgD,eAAemF,QACjBlH,WAAS,SAAEgF,OACJ9E,EAAO8E,EAAU,KACvBjG,EAAKgW,aAAU1M,EACftJ,EAAKyH,KAAKsE,UAAUkK,WAAW9U,EAAK2L,KAAKlC,WAG7C5K,EAAKgD,eAAekT,QACjBjV,WAAS,SAAEgF,WACJ9E,EAAO8E,EAAU,KACvBjG,EAAKgW,QAAU7U,EAAK2L,KAAKlC,OACzBzJ,EAAKgV,wBAAwBnJ,MAAMoJ,QAAU,WAC7C,IAAgB,IAAAzQ,EAAA7G,EAAAqC,EAAK2L,KAAKC,YAAUjC,EAAAnF,EAAAvG,QAAA0L,EAAAxL,KAAAwL,EAAAnF,EAAAvG,OAAE,CAA1B0L,EAAAzL,MACR2N,MAAMoJ,QAAU,6GAIxBpW,EAAKgD,eAAehC,OACjBC,WAAS,SAAEgF,WACJ9E,EAAO8E,EAAU,KACvBjG,EAAKgW,aAAU1M,EACfnI,EAAKgV,wBAAwBnJ,MAAMoJ,QAAU,OAC7C,IAAgB,IAAAzQ,EAAA7G,EAAAqC,EAAK2L,KAAKC,YAAUjC,EAAAnF,EAAAvG,QAAA0L,EAAAxL,KAAAwL,EAAAnF,EAAAvG,OAAE,CAA1B0L,EAAAzL,MACR2N,MAAMoJ,QAAU,2GAsB5B,OA/DoE9Y,EAAAwY,EAAA7V,GAsDlEjD,OAAAyB,eAAIqX,EAAApY,UAAA,iBAAc,KAAlB,WAA4C,OAAOF,KAAiB,8CAGpEsY,EAAApY,UAAAqF,SAAA,WAAmBH,EAAgBlF,UAAUqF,SAAS5D,KAAK3B,OAC3DsY,EAAApY,UAAA0F,QAAA,SAAQC,GAAuB,OAAOT,EAAgBlF,UAAU0F,QAAQjE,KAAK3B,KAAM6F,IACnFyS,EAAApY,UAAAkG,WAAA,SAAWP,GAA0B,OAAOT,EAAgBlF,UAAUkG,WAAWzE,KAAK3B,KAAM6F,IAC5FyS,EAAApY,UAAAyF,cAAA,WAAwBP,EAAgBlF,UAAUyF,cAAchE,KAAK3B,2BA3EtE4G,EAAAA,UAASxD,KAAA,CAAC,CACTyD,SAAU,4BACVC,SAAU,0BACV4E,OAAQ,CACN,4DAEFrE,KAAM,CACJC,MAAS,gBACTC,OAAQ,MAEVR,UAAW,CACT,CAAEC,QAASC,EAAAA,SAAUC,YAAa7C,GAClC,CAAE2C,QAASG,EAAAA,cAAeD,YAAaoR,iDArBlCtM,EAAAA,yBAAmBC,EAAAA,gCAhB1BtF,EAAAA,kBAQAM,EAAAA,gBAVAiF,EAAAA,yBAQOC,EAAAA,eAAc9L,WAAA,CAAA,CAAAwJ,KA8CRC,EAAAA,kBA3Cb8B,EAAAA,iBAAgBvL,WAAA,CAAA,CAAAwJ,KA4CHC,EAAAA,UAAQ,CAAAD,KAAIuC,EAAAA,cAkD3BkM,EA9EA,CAeoE3Q,EAAAA,aCxCpE,IAAAkR,EAAA,SAAApW,GAKE,SAAAoW,EAAYjB,EAAuDC,GAAnE,IAAArV,EAAwGC,EAAAd,KAAA3B,KAAM4X,EAAMC,IAAS7X,YAHpHwC,EAAAsV,KAAsB,cACtBtV,EAAAuV,KAA+B,yBAO1C,OATqDjY,EAAA+Y,EAAApW,GAMnDoW,EAAA3Y,UAAA8X,aAAA,SAAaC,GACX,QAASA,EAAQrL,IAAIkM,4BARxBlS,EAAAA,UAASxD,KAAA,CAAC,CAAEyD,SAAU,wEANHsR,EAAAA,mBACXC,EAAAA,2BAeTS,EAVA,CACqDR,EAAAA,+BCPrD,IAAAU,EAAA,WAEA,SAAAA,KAQkD,2BARjD9B,EAAAA,UAAS7T,KAAA,CAAC,CACTyD,SAAU,oCACVsQ,SACF,mNAEEC,gBAAiBC,EAAAA,wBAAwBC,OACzCC,cAAeC,EAAAA,kBAAkBC,SAEesB,EAVlD,GCAAC,EAAA,WAiBA,SAAAA,KAiCA,OANSA,EAAAC,qBAAP,WACE,MAAO,CACLC,SAAUF,EACVjS,UAAWoS,EAAAA,cAAe,CAAE,CAAEC,UAAWL,2BA9B9CM,EAAAA,SAAQjW,KAAA,CAAC,CACRkW,QAAS,CACPC,EAAAA,aACAC,EAAAA,eACAC,EAAAA,gBAEFC,aAAc,CACZX,EACA3T,EAAiBwC,EAAa8B,EAC9BM,EAAmCsC,EACnCyB,EAAsC2D,EAA6BiG,EACnEW,EACAjG,EAA6BwG,GAE/Bc,QAAS,CACPF,EAAAA,eACArU,EAAiBwC,EAAa8B,EAC9BM,EAAmCsC,EACnCyB,EAAsC2D,EAA6BiG,EACnEW,EACAjG,EAA6BwG,GAG/Be,gBAAiB,CAAEb,OAUrBC,EAlDA,iQRgD2C,qBEjBD","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Subject } from 'rxjs';\nimport { ElementRef } from '@angular/core';\nimport { DropListRef } from '@angular/cdk/drag-drop';\nimport { coerceElement } from '@angular/cdk/coercion';\n\nexport class PblDropListRef<T = any> extends DropListRef<T> {\n  /** Emits right before dragging has started. */\n  beforeExit = new Subject<{ item: import('./drag-ref').PblDragRef<T> }>();\n\n  withElement(element: ElementRef<HTMLElement> | HTMLElement): this {\n    // TODO: Workaround, see if we can push this through https://github.com/angular/material2/issues/15086\n    (this as { -readonly [P in keyof PblDropListRef]: PblDropListRef[P] }).element = coerceElement(element);\n    return this;\n  }\n\n  dispose(): void {\n    this.beforeExit.complete();\n    super.dispose();\n  }\n}\n","import { ElementRef, EventEmitter } from '@angular/core';\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { DragRef } from '@angular/cdk/drag-drop';\n\nimport { PblDropListRef } from './drop-list-ref';\n\nexport class PblDragRef<T = any> extends DragRef<T> {\n\n  /**\n   * Fires when the root element changes\n   *\n   * > Does not emit on the initial setup.\n   */\n  rootElementChanged = new EventEmitter<{\n    prev: HTMLElement;\n    curr: HTMLElement;\n  }>();\n\n  constructor(...args: ConstructorParameters<typeof DragRef>) {\n    super(...args);\n    this.exited.subscribe( e => {\n      const { container } = e;\n      if (container instanceof PblDropListRef) {\n        container.beforeExit.next({ item: this });\n      }\n    });\n  }\n\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\n    // the first call to `withRootElement` comes from the base class, before we construct the emitter.\n    // We don't need it anyway...\n    if (this.rootElementChanged) {\n      const element = coerceElement(rootElement);\n      if (this.getRootElement() !== element) {\n        this.rootElementChanged.next({ prev: this.getRootElement(), curr: element })\n      }\n    }\n    return super.withRootElement(rootElement);\n  }\n\n  dispose(): void {\n    this.rootElementChanged.complete();\n    super.dispose();\n  }\n}\n","import { Injectable, Inject, NgZone, ElementRef } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler} from '@angular/cdk/scrolling';\nimport { DragRef, DragRefConfig, DropListRef, DragDropRegistry } from '@angular/cdk/drag-drop';\n\nimport { PblDragRef } from './drag-ref'\nimport { PblDropListRef } from './drop-list-ref';\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\n@Injectable({providedIn: 'root'})\nexport class PblDragDrop {\n  constructor(@Inject(DOCUMENT) private _document: any,\n              private _ngZone: NgZone,\n              private _viewportRuler: ViewportRuler,\n              private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {}\n\n  /**\n   * Turns an element into a draggable item.\n   * @param element Element to which to attach the dragging functionality.\n   * @param config Object used to configure the dragging behavior.\n   */\n  createDrag<T = any>(element: ElementRef<HTMLElement> | HTMLElement,\n                      config: DragRefConfig = DEFAULT_CONFIG): PblDragRef<T> {\n\n    return new PblDragRef<T>(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n  }\n\n  /**\n   * Turns an element into a drop list.\n   * @param element Element to which to attach the drop list functionality.\n   */\n  createDropList<T = any>(element: ElementRef<HTMLElement> | HTMLElement): PblDropListRef<T> {\n    return new PblDropListRef<T>(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n  }\n}\n","import { take } from 'rxjs/operators';\nimport { Input, Directive, ElementRef, QueryList, OnDestroy, Optional, AfterViewInit, OnInit } from '@angular/core';\nimport { CdkDropList, CdkDrag, CdkDragHandle, CDK_DROP_LIST, DragDrop } from '@angular/cdk/drag-drop';\nimport { PblDropListRef } from './drop-list-ref';\nimport { PblDragRef } from './drag-ref';\nimport { PblDragDrop } from './drag-drop';\n\n@Directive({\n  selector: '[cdkLazyDropList]',\n  exportAs: 'cdkLazyDropList',\n  providers: [\n    { provide: DragDrop, useExisting: PblDragDrop },\n    { provide: CDK_DROP_LIST, useClass: CdkLazyDropList },\n  ],\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  }\n})\nexport class CdkLazyDropList<T = any, DRef = any> extends CdkDropList<T> implements OnInit {\n  get pblDropListRef(): PblDropListRef<DRef> { return this._dropListRef as any; }\n\n  /**\n   * Selector that will be used to determine the direct container element, starting from\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\n   * of the draggable elements.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('cdkDropListDirectContainerElement') directContainerElement: string;\n\n  _draggables: QueryList<CdkDrag>;\n\n  /* private */ originalElement: ElementRef<HTMLElement>;\n  /* private */ _draggablesSet = new Set<CdkDrag>();\n\n  ngOnInit(): void {\n    if (this.pblDropListRef instanceof PblDropListRef === false) {\n      throw new Error('Invalid `DropListRef` injection, the ref is not an instance of PblDropListRef')\n    }\n    this._dropListRef.beforeStarted.subscribe( () => this.beforeStarted() );\n  }\n\n  addDrag(drag: CdkDrag): void {\n    this._draggablesSet.add(drag);\n    this._draggables.reset(Array.from(this._draggablesSet.values()));\n    this._draggables.notifyOnChanges(); // TODO: notify with asap schedular and obs$\n  }\n\n  removeDrag(drag: CdkDrag): boolean {\n    const result = this._draggablesSet.delete(drag);\n    if (result) {\n      this._draggables.reset(Array.from(this._draggablesSet.values()));\n      this._draggables.notifyOnChanges(); // TODO: notify with asap schedular and obs$\n    }\n    return result;\n  }\n\n  /* protected */ beforeStarted(): void {\n    // This is a workaround for https://github.com/angular/material2/pull/14153\n    // Working around the missing capability for selecting a container element that is not the drop container host.\n    if (!this.originalElement) {\n      this.originalElement = this.element;\n    }\n    if (this.directContainerElement) {\n      const element = this.originalElement.nativeElement.querySelector(this.directContainerElement) as HTMLElement;\n      this.element = new ElementRef<HTMLElement>(element);\n    } else {\n      this.element = this.originalElement;\n    }\n    this.pblDropListRef.withElement(this.element);\n  }\n}\n\n@Directive({\n  selector: '[cdkLazyDrag]',\n  exportAs: 'cdkLazyDrag',\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [\n    { provide: DragDrop, useExisting: PblDragDrop },\n  ],\n})\nexport class CdkLazyDrag<T = any, Z extends CdkLazyDropList<T> = CdkLazyDropList<T>, DRef = any> extends CdkDrag<T> implements OnInit, AfterViewInit, OnDestroy {\n\n  /**\n   * A class to set when the root element is not the host element. (i.e. when `cdkDragRootElement` is used).\n   */\n  @Input('cdkDragRootElementClass') set rootElementSelectorClass(value: string) { // tslint:disable-line:no-input-rename\n    if (value !== this._rootClass && this._hostNotRoot) {\n      if (this._rootClass) {\n        this.getRootElement().classList.remove(...this._rootClass.split(' '));\n      }\n      if (value) {\n        this.getRootElement().classList.add(...value.split(' '));\n      }\n    }\n    this._rootClass = value;\n  }\n\n  get pblDragRef(): PblDragRef<DRef> { return this._dragRef as any; }\n\n  @Input() get cdkDropList(): Z { return this.dropContainer as Z; }\n  set cdkDropList(value: Z) {\n    // TO SUPPORT `cdkDropList` via string input (ID) we need a reactive registry...\n    if (this.cdkDropList) {\n      this.cdkDropList.removeDrag(this);\n    }\n    this.dropContainer = value;\n    if (value) {\n      this._dragRef._withDropContainer(value._dropListRef);\n      value.addDrag(this);\n    }\n  }\n\n  /* private */ _rootClass: string;\n  /* private */ _hostNotRoot = false;\n\n  ngOnInit(): void {\n    if (this.pblDragRef instanceof PblDragRef === false) {\n      throw new Error('Invalid `DragRef` injection, the ref is not an instance of PblDragRef')\n    }\n    this.pblDragRef.rootElementChanged.subscribe( event => {\n      const rootElementSelectorClass = this._rootClass;\n      const hostNotRoot = this.element.nativeElement !== event.curr;\n\n      if (rootElementSelectorClass) {\n        if (this._hostNotRoot) {\n          event.prev.classList.remove(...rootElementSelectorClass.split(' '));\n        }\n        if (hostNotRoot) {\n          event.curr.classList.add(...rootElementSelectorClass.split(' '));\n        }\n      }\n      this._hostNotRoot = hostNotRoot;\n    });\n  }\n\n  // This is a workaround for https://github.com/angular/material2/pull/14158\n  // Working around the issue of drop container is not the direct parent (father) of a drag item.\n  // The entire ngAfterViewInit() overriding method can be removed if PR accepted.\n  ngAfterViewInit(): void {\n    this.started.subscribe( startedEvent => {\n      if (this.dropContainer) {\n        const element = this.getRootElement();\n        const initialRootElementParent = element.parentNode as HTMLElement;\n        if (!element.nextSibling && initialRootElementParent !== this.dropContainer.element.nativeElement) {\n          this.ended.pipe(take(1)).subscribe( endedEvent => initialRootElementParent.appendChild(element) );\n        }\n      }\n    });\n\n    /* super.ngAfterViewInit(); */\n  }\n\n  ngOnDestroy(): void {\n    if (this.cdkDropList) {\n      this.cdkDropList.removeDrag(this);\n    }\n    /* super.ngOnDestroy(); */\n  }\n}\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[pblDragHandle]',\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drag-handle'\n  },\n  providers: [\n    {\n      provide: CdkDragHandle,\n      useExisting: PblDragHandle\n    }\n  ]\n})\nexport class PblDragHandle extends CdkDragHandle {\n  constructor(public element: ElementRef<HTMLElement>, @Optional() parentDrag?: CdkDrag) { super(element, parentDrag); }\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  ViewContainerRef,\n  NgZone,\n  QueryList,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  DragDrop,\n  CdkDropList,\n  CdkDropListGroup,\n  CdkDrag,\n  CDK_DROP_LIST,\n  CDK_DRAG_CONFIG, DragRefConfig, CdkDragDrop, CdkDragStart\n} from '@angular/cdk/drag-drop';\n\nimport { PblNgridComponent, NgridPlugin, PblNgridPluginController, PblNgridCellContext } from '@pebula/ngrid';\nimport { CdkLazyDropList, CdkLazyDrag } from '../core/lazy-drag-drop';\nimport { PblDropListRef } from '../core/drop-list-ref';\nimport { PblDragRef } from '../core/drag-ref';\nimport { PblDragDrop } from '../core/drag-drop';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    rowReorder?: PblNgridRowReorderPluginDirective;\n  }\n}\n\nconst PLUGIN_KEY: 'rowReorder' = 'rowReorder';\n\nlet _uniqueIdCounter = 0;\n\n@NgridPlugin({ id: PLUGIN_KEY })\n@Directive({\n  selector: 'pbl-ngrid[rowReorder]',\n  exportAs: 'pblNgridRowReorder',\n  inputs: [\n    'directContainerElement:cdkDropListDirectContainerElement'\n  ],\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n    '[class.pbl-row-reorder]': 'rowReorder && !this.grid.ds?.sort.sort?.order && !this.grid.ds?.filter?.filter',\n  },\n  providers: [\n    { provide: DragDrop, useExisting: PblDragDrop },\n    { provide: CdkDropListGroup, useValue: undefined },\n    { provide: CDK_DROP_LIST, useExisting: PblNgridRowReorderPluginDirective },\n  ],\n})\nexport class PblNgridRowReorderPluginDirective<T = any> extends CdkDropList<T> implements OnDestroy, CdkLazyDropList<T, PblNgridRowReorderPluginDirective<T>> {\n\n  id = `pbl-ngrid-row-reorder-list-${_uniqueIdCounter++}`;\n\n  @Input() get rowReorder(): boolean { return this._rowReorder; };\n  set rowReorder(value: boolean) {\n    value = coerceBooleanProperty(value);\n    this._rowReorder = value;\n  }\n\n  _draggables: QueryList<CdkDrag>;\n\n  private _rowReorder = false;\n  private _removePlugin: (grid: PblNgridComponent<any>) => void;\n\n  constructor(public grid: PblNgridComponent<T>,\n              pluginCtrl: PblNgridPluginController,\n              element: ElementRef<HTMLElement>,\n              dragDrop: DragDrop,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() dir?: Directionality,\n              @Optional() @SkipSelf() group?: CdkDropListGroup<CdkDropList>) {\n    super(element, dragDrop, changeDetectorRef, dir, group);\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n\n    this.dropped.subscribe( (event: CdkDragDrop<T>) => {\n      const item = event.item as PblNgridRowDragDirective<T>;\n\n      const previousIndex = grid.ds.source.indexOf(item.draggedContext.row);\n      const currentIndex = event.currentIndex + grid.ds.renderStart;\n\n      this.grid.contextApi.clear();\n      this.grid.ds.moveItem(previousIndex, currentIndex, true);\n      this.grid._cdkTable.syncRows('data');\n    });\n  }\n\n  /* CdkLazyDropList start */\n  /**\n   * Selector that will be used to determine the direct container element, starting from\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\n   * of the draggable elements.\n   */\n  directContainerElement: string = '.pbl-ngrid-scroll-container'; // we need this to allow auto-scroll\n  get pblDropListRef(): PblDropListRef<any> { return this._dropListRef as any; }\n  originalElement: ElementRef<HTMLElement>;\n  _draggablesSet = new Set<CdkDrag>();\n  ngOnInit(): void { CdkLazyDropList.prototype.ngOnInit.call(this); }\n  addDrag(drag: CdkDrag): void { return CdkLazyDropList.prototype.addDrag.call(this, drag); }\n  removeDrag(drag: CdkDrag): boolean { return CdkLazyDropList.prototype.removeDrag.call(this, drag); }\n  beforeStarted(): void { CdkLazyDropList.prototype.beforeStarted.call(this); }\n  /* CdkLazyDropList end */\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._removePlugin(this.grid);\n  }\n}\n\n@Directive({\n  selector: '[pblNgridRowDrag]',\n  exportAs: 'pblNgridRowDrag',\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [\n    { provide: DragDrop, useExisting: PblDragDrop },\n    { provide: CdkDrag, useExisting: PblNgridRowDragDirective }\n  ]\n})\nexport class PblNgridRowDragDirective<T = any> extends CdkDrag<T> implements CdkLazyDrag<T, PblNgridRowReorderPluginDirective<T>> {\n  rootElementSelector = 'pbl-ngrid-row';\n\n  get context(): Pick<PblNgridCellContext<T>, 'col' | 'grid'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>> {\n    return this._context;\n  }\n\n  @Input('pblNgridRowDrag') set context(value: Pick<PblNgridCellContext<T>, 'col' | 'grid'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>) {\n    this._context = value;\n\n    const pluginCtrl = this.pluginCtrl = value && PblNgridPluginController.find(value.grid);\n    const plugin = pluginCtrl && pluginCtrl.getPlugin(PLUGIN_KEY);\n    this.cdkDropList = plugin || undefined;\n  }\n\n  /**\n   * Reference to the last dragged context.\n   *\n   * This context is not similar to the `context` property.\n   * The `context` property holds the current context which is shared and updated on scroll so if a user start a drag and then scrolled\n   * the context will point to the row in view and not the original cell.\n   */\n  get draggedContext(): Pick<PblNgridCellContext<T>, 'col' | 'grid'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>> {\n    return this._draggedContext;\n  }\n\n  private _context: Pick<PblNgridCellContext<T>, 'col' | 'grid'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>;\n  private _draggedContext: Pick<PblNgridCellContext<T>, 'col' | 'grid'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>;\n\n  private pluginCtrl: PblNgridPluginController;\n\n  // CTOR IS REQUIRED OR IT WONT WORK IN AOT\n  // TODO: Try to remove when supporting IVY\n  constructor(element: ElementRef<HTMLElement>,\n              @Inject(CDK_DROP_LIST) @Optional() @SkipSelf() dropContainer: CdkDropList,\n              @Inject(DOCUMENT) _document: any,\n              _ngZone: NgZone,\n              _viewContainerRef: ViewContainerRef,\n              @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\n              _dir: Directionality,\n              dragDrop: DragDrop,\n              _changeDetectorRef: ChangeDetectorRef) {\n    super(\n      element,\n      dropContainer,\n      _document,\n      _ngZone,\n      _viewContainerRef,\n      config,\n      _dir,\n      dragDrop,\n      _changeDetectorRef,\n    );\n\n    this.started.subscribe( (event: CdkDragStart) => {\n      const { col, row, grid, value }  = this._context;\n      this._draggedContext = { col, row, grid, value };\n    });\n\n\n  }\n\n  /* CdkLazyDrag start */\n    /**\n   * A class to set when the root element is not the host element. (i.e. when `cdkDragRootElement` is used).\n   */\n  @Input('cdkDragRootElementClass') set rootElementSelectorClass(value: string) { // tslint:disable-line:no-input-rename\n    if (value !== this._rootClass && this._hostNotRoot) {\n      if (this._rootClass) {\n        this.getRootElement().classList.remove(...this._rootClass.split(' '));\n      }\n      if (value) {\n        this.getRootElement().classList.add(...value.split(' '));\n      }\n    }\n    this._rootClass = value;\n  }\n\n  get pblDragRef(): PblDragRef<any> { return this._dragRef as any; }\n\n  @Input() get cdkDropList(): PblNgridRowReorderPluginDirective<T> { return this.dropContainer as PblNgridRowReorderPluginDirective<T>; }\n  set cdkDropList(value: PblNgridRowReorderPluginDirective<T>) {\n    // TO SUPPORT `cdkDropList` via string input (ID) we need a reactive registry...\n    if (this.cdkDropList) {\n      this.cdkDropList.removeDrag(this);\n    }\n    this.dropContainer = value;\n    if (value) {\n      this._dragRef._withDropContainer(value._dropListRef);\n      value.addDrag(this);\n    }\n  }\n\n  _rootClass: string;\n  _hostNotRoot = false;\n  ngOnInit(): void { CdkLazyDrag.prototype.ngOnInit.call(this); }\n  ngAfterViewInit(): void { CdkLazyDrag.prototype.ngAfterViewInit.call(this); super.ngAfterViewInit(); }\n  ngOnDestroy(): void { CdkLazyDrag.prototype.ngOnDestroy.call(this);  super.ngOnDestroy(); }\n  /* CdkLazyDrag end */\n}\n","import { PblColumn, PblColumnGroup } from '@pebula/ngrid';\n\ndeclare module '@pebula/ngrid/lib/grid/columns/column' {\n  interface PblColumn {\n\n    reorder: boolean;\n    /**\n     * When true, the item can be reordered based on the `reorder` property but\n     * will not move (budge) when other items are reordered.\n     */\n    wontBudge: boolean;\n\n    /**\n     * Checks if the by switching between this column and the provided column the `lockColumns` constraint is triggered.\n     * The lockColumns constraint is set on a group and restrict splitting of groups.\n     * A Column with a locked group will not be allowed to leave the group nor new items are allowed that split the group.\n     *\n     * The process will check both scenarios.\n     */\n    checkGroupLockConstraint(column: PblColumn): boolean;\n  }\n}\n\ndeclare module '@pebula/ngrid/lib/grid/columns/group-column' {\n  interface PblColumnGroup {\n    /**\n     * Lock column in the group, preventing the group from splitting.\n     * Splitting is block actively (column from the group dragged outside) and passively (column outside of the group dragging into the group).\n     */\n    lockColumns?: boolean;\n  }\n}\n\ndeclare module '@pebula/ngrid/lib/grid/columns/types' {\n  interface PblColumnDefinition {\n    reorder?: boolean;\n    /**\n     * When true, the item can be reordered based on the `reorder` property but\n     * will not move (budge) when other items are reordered.\n     */\n    wontBudge?: boolean;\n  }\n  interface PblColumnGroupDefinition {\n    /**\n     * Lock column in the group, preventing the group from splitting.\n     * Splitting is block actively (column from the group dragged outside) and passively (column outside of the group dragging into the group).\n     */\n    lockColumns?: boolean;\n  }\n}\n\nfunction checkGroupLockConstraint(this: PblColumn, column: PblColumn): boolean {\n  for (const id of this.groups) {\n    const g = this.groupStore.find(id);\n    if (g && g.lockColumns && !column.isInGroup(g)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function extendGrid(): void {\n  PblColumn.extendProperty('reorder');\n  PblColumn.extendProperty('wontBudge');\n  PblColumnGroup.extendProperty('lockColumns');\n\n  PblColumn.prototype.checkGroupLockConstraint = function (this: PblColumn, column: PblColumn): boolean {\n    return checkGroupLockConstraint.call(this, column) && checkGroupLockConstraint.call(column, this);\n  };\n}\n\n","// tslint:disable:no-output-rename\nimport { BehaviorSubject } from 'rxjs';\n\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  SkipSelf,\n  Output,\n  OnDestroy,\n  Optional,\n  OnInit,\n  ViewContainerRef,\n  NgZone,\n  QueryList,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  DragDrop,\n  CdkDrag,\n  CdkDragDrop,\n  CDK_DROP_LIST,\n  DragRef,\n  CdkDropListGroup,\n  CdkDropList,\n  CDK_DRAG_CONFIG,\n  DragRefConfig,\n} from '@angular/cdk/drag-drop';\n\nimport { PblNgridComponent, NgridPlugin, PblColumn, PblNgridPluginController, PblNgridCellContext } from '@pebula/ngrid';\nimport { PblDragDrop } from '../core/drag-drop';\nimport { CdkLazyDropList, CdkLazyDrag } from '../core/lazy-drag-drop';\nimport { PblDropListRef } from '../core/drop-list-ref';\nimport { PblDragRef } from '../core/drag-ref';\nimport { extendGrid } from './extend-grid';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    columnReorder?: PblNgridColumnReorderPluginDirective;\n  }\n}\n\nexport const PLUGIN_KEY: 'columnReorder' = 'columnReorder';\n\nlet _uniqueIdCounter = 0;\n\n@NgridPlugin({ id: PLUGIN_KEY, runOnce: extendGrid })\n@Directive({\n  selector: 'pbl-ngrid[columnReorder]',\n  exportAs: 'pblNgridColumnReorder',\n  inputs: [\n    'directContainerElement:cdkDropListDirectContainerElement'\n  ],\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  },\n  providers: [\n    { provide: DragDrop, useExisting: PblDragDrop },\n    { provide: CDK_DROP_LIST, useExisting: PblNgridColumnReorderPluginDirective },\n  ],\n})\nexport class PblNgridColumnReorderPluginDirective<T = any> extends CdkDropList<T> implements OnInit, OnDestroy, CdkLazyDropList<T, PblNgridColumnReorderPluginDirective<T>> {\n  id = `pbl-ngrid-column-reorder-list-${_uniqueIdCounter++}`;\n  orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  @Input() get columnReorder(): boolean { return this._columnReorder; };\n  set columnReorder(value: boolean) {\n    value = coerceBooleanProperty(value);\n    this._columnReorder = value;\n  }\n\n  /**\n   * When true, will not move the column on drop.\n   * Instead you need to handle the dropped event.\n   */\n  @Input() get manualOverride(): boolean { return this._manualOverride; };\n  set manualOverride(value: boolean) { this._manualOverride = coerceBooleanProperty(value); }\n\n  @Output('cdkDropDragging') dragging: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  _draggables: QueryList<CdkDrag>;\n\n  private _columnReorder = false;\n  private _manualOverride = false;\n  private _removePlugin: (table: PblNgridComponent<any>) => void;\n  private lastSwap: DragRef<PblNgridColumnDragDirective<T>>;\n  private lastSorted: { drag: DragRef<PblNgridColumnDragDirective<T>>; offset: number; clientRect: ClientRect; };\n\n  // Stuff to workaround encapsulation in CdkDropList\n  private get pblGetItemIndexFromPointerPosition(): (item: DragRef<PblNgridColumnDragDirective<T>>, pointerX: number, pointerY: number, delta?: {x: number, y: number}) => number {\n    return (this._dropListRef as any)._getItemIndexFromPointerPosition.bind(this._dropListRef);\n  }\n  private get pblGetPositionCacheItems(): { drag: DragRef<PblNgridColumnDragDirective<T>>; offset: number; clientRect: ClientRect; }[] {\n    return (this._dropListRef as any)._itemPositions;\n  }\n\n  constructor(public table: PblNgridComponent<T>,\n              pluginCtrl: PblNgridPluginController,\n              element: ElementRef<HTMLElement>,\n              dragDrop: DragDrop,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() dir?: Directionality,\n              @Optional() @SkipSelf() group?: CdkDropListGroup<CdkDropList>) {\n    super(element, dragDrop, changeDetectorRef, dir, group);\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n\n    this.directContainerElement = '.pbl-ngrid-header-row-main';\n    this.dropped.subscribe( (event: CdkDragDrop<T, any>) => {\n      if (!this.manualOverride) {\n        this.table.columnApi.moveColumn((event.item as PblNgridColumnDragDirective<T>).column, event.currentIndex);\n      }\n    });\n\n    this.dragging.subscribe( isDragging => {\n      const el = element.nativeElement;\n      if (isDragging) {\n        el.classList.add('pbl-ngrid-column-list-dragging');\n      } else {\n        el.classList.remove('pbl-ngrid-column-list-dragging');\n      }\n      this.lastSwap = undefined;\n    });\n\n    this.monkeyPatchDropListRef();\n  }\n\n  /* CdkLazyDropList start */\n  /**\n   * Selector that will be used to determine the direct container element, starting from\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\n   * of the draggable elements.\n   */\n  directContainerElement: string;\n  get pblDropListRef(): PblDropListRef<PblNgridColumnReorderPluginDirective<T>> { return this._dropListRef as any; }\n  originalElement: ElementRef<HTMLElement>;\n  _draggablesSet = new Set<CdkDrag>();\n  // ngOnInit(): void { CdkLazyDropList.prototype.ngOnInit.call(this); }\n  addDrag(drag: CdkDrag): void { return CdkLazyDropList.prototype.addDrag.call(this, drag); }\n  removeDrag(drag: CdkDrag): boolean { return CdkLazyDropList.prototype.removeDrag.call(this, drag); }\n  // beforeStarted(): void { CdkLazyDropList.prototype.beforeStarted.call(this); }\n  /* CdkLazyDropList end */\n\n  ngOnInit(): void {\n    CdkLazyDropList.prototype.ngOnInit.call(this); // super.ngOnInit();\n    this.dropped.subscribe( e => this._pblReset() );\n    this.pblDropListRef.beforeExit.subscribe( e => this._pblReset() );\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._removePlugin(this.table);\n  }\n\n  /* protected */ beforeStarted(): void {\n    CdkLazyDropList.prototype.beforeStarted.call(this); // super.beforeStarted();\n    this.lastSorted = undefined;\n    this.dragging.next(true);\n  }\n\n  private _pblReset(): void {\n    this.dragging.next(false);\n    const siblings = this.pblGetPositionCacheItems;\n    siblings.forEach((sibling, index) => {\n      for (const c of sibling.drag.data.getCells()) {\n        c.style.transform = ``;\n      }\n    });\n  }\n\n  private monkeyPatchDropListRef(): void {\n    const { _sortItem, enter } = this._dropListRef;\n\n    this.pblDropListRef.enter = (item: Parameters<typeof enter>[0], pointerX: number, pointerY: number): void => {\n      const lastSorted = this.lastSorted\n      this.lastSorted = undefined;\n      if (lastSorted && lastSorted.drag === item) {\n        const isHorizontal = this.orientation === 'horizontal';\n        pointerX = lastSorted.clientRect.left + 1 - (isHorizontal ? lastSorted.offset : 0);\n        pointerY = lastSorted.clientRect.top + 1 - (!isHorizontal ? lastSorted.offset : 0);\n      }\n      enter.call(this._dropListRef, item, pointerX, pointerY);\n    };\n\n    this.pblDropListRef._sortItem = (item: Parameters<typeof enter>[0], pointerX: number, pointerY: number, pointerDelta: {x: number, y: number}): void => {\n      const siblings = this.pblGetPositionCacheItems;\n      this.lastSorted = siblings.find( s => s.drag === item );\n      const newIndex = this.pblGetItemIndexFromPointerPosition(item as DragRef<PblNgridColumnDragDirective<T>>, pointerX, pointerY, pointerDelta);\n      if (newIndex === -1 && siblings.length > 0) {\n        return;\n      }\n      const oldOrder = siblings.slice();\n      const isHorizontal = this.orientation === 'horizontal';\n      const siblingAtNewPosition = siblings[newIndex];\n\n      if (siblingAtNewPosition.drag.data.column.wontBudge) {\n        return;\n      }\n\n      // we now need to find if between current and new position there are items with `wontBudge`\n      const itemAtOriginalPosition = this.lastSwap ? this.lastSwap : item;\n      const currentIndex = siblings.findIndex( currentItem => currentItem.drag === itemAtOriginalPosition );\n      const start = Math.min(newIndex, currentIndex)\n      const itemsDraggedOver = siblings.slice(start, Math.abs(newIndex - currentIndex) + start);\n      for (const dragItem of itemsDraggedOver) {\n        if (dragItem.drag.data.column.wontBudge && dragItem.drag !== item) {\n          return;\n        }\n      }\n\n      // check if we move the item outside of locked group OR into a locked group... both are invalid.\n      if (!item.data.column.checkGroupLockConstraint(siblingAtNewPosition.drag.data.column)) {\n        return;\n      }\n\n      _sortItem.call(this._dropListRef, item, pointerX, pointerY, pointerDelta);\n\n      this.lastSwap = siblingAtNewPosition.drag;\n\n      if (isHorizontal) {\n        siblings.forEach((sibling, index) => {\n          // Don't do anything if the position hasn't changed.\n          if (oldOrder[index] === sibling) {\n            return;\n          }\n\n          for (const c of sibling.drag.data.getCells()) {\n            c.style.transform = `translate3d(${sibling.offset}px, 0, 0)`;\n          }\n        });\n      }\n    };\n  }\n}\n\n@Directive({\n  selector: '[pblNgridColumnDrag]',\n  exportAs: 'pblNgridColumnDrag',\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [\n    { provide: DragDrop, useExisting: PblDragDrop },\n    { provide: CdkDrag, useExisting: PblNgridColumnDragDirective }\n  ]\n})\nexport class PblNgridColumnDragDirective<T = any> extends CdkDrag<T> implements AfterViewInit, CdkLazyDrag<T, PblNgridColumnReorderPluginDirective<T>, PblNgridColumnDragDirective<T>> {\n  rootElementSelector = 'pbl-ngrid-header-cell';\n\n  column: PblColumn;\n\n  @Input('pblNgridColumnDrag') set context(value: Pick<PblNgridCellContext<T>, 'col' | 'grid'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>) {\n    this._context = value;\n    this.column = value && value.col;\n    const pluginCtrl = this.pluginCtrl = value && PblNgridPluginController.find(value.grid);\n    const plugin = pluginCtrl && pluginCtrl.getPlugin(PLUGIN_KEY);\n    this.cdkDropList = plugin || undefined;\n    this.disabled = this.column && this.column.reorder ? false : true;\n  }\n\n  private _context: Pick<PblNgridCellContext<T>, 'col' | 'grid'> & Partial<Pick<PblNgridCellContext<T>, 'row' | 'value'>>\n  private pluginCtrl: PblNgridPluginController;\n  private cache: HTMLElement[];\n\n  // CTOR IS REQUIRED OR IT WONT WORK IN AOT\n  // TODO: Try to remove when supporting IVY\n  constructor(element: ElementRef<HTMLElement>,\n              @Inject(CDK_DROP_LIST) @Optional() @SkipSelf() dropContainer: CdkDropList,\n              @Inject(DOCUMENT) _document: any,\n              _ngZone: NgZone,\n              _viewContainerRef: ViewContainerRef,\n              @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\n              _dir: Directionality,\n              dragDrop: DragDrop,\n              _changeDetectorRef: ChangeDetectorRef) {\n    super(\n      element,\n      dropContainer,\n      _document,\n      _ngZone,\n      _viewContainerRef,\n      config,\n      _dir,\n      dragDrop,\n      _changeDetectorRef,\n    );\n  }\n\n  /* CdkLazyDrag start */\n  /**\n   * A class to set when the root element is not the host element. (i.e. when `cdkDragRootElement` is used).\n   */\n  @Input('cdkDragRootElementClass') set rootElementSelectorClass(value: string) { // tslint:disable-line:no-input-rename\n    if (value !== this._rootClass && this._hostNotRoot) {\n      if (this._rootClass) {\n        this.getRootElement().classList.remove(...this._rootClass.split(' '));\n      }\n      if (value) {\n        this.getRootElement().classList.add(...value.split(' '));\n      }\n    }\n    this._rootClass = value;\n  }\n\n  get pblDragRef(): PblDragRef<PblNgridColumnDragDirective<T>> { return this._dragRef as any; }\n\n  @Input() get cdkDropList(): PblNgridColumnReorderPluginDirective<T> { return this.dropContainer as PblNgridColumnReorderPluginDirective<T>; }\n  set cdkDropList(value: PblNgridColumnReorderPluginDirective<T>) {\n    // TO SUPPORT `cdkDropList` via string input (ID) we need a reactive registry...\n    if (this.cdkDropList) {\n      this.cdkDropList.removeDrag(this);\n    }\n    this.dropContainer = value;\n    if (value) {\n      this._dragRef._withDropContainer(value._dropListRef);\n      value.addDrag(this);\n    }\n  }\n\n  _rootClass: string;\n  _hostNotRoot = false;\n  ngOnInit(): void { CdkLazyDrag.prototype.ngOnInit.call(this); }\n  // ngAfterViewInit(): void { CdkLazyDrag.prototype.ngAfterViewInit.call(this); super.ngAfterViewInit(); }\n  ngOnDestroy(): void { CdkLazyDrag.prototype.ngOnDestroy.call(this);  super.ngOnDestroy(); }\n  /* CdkLazyDrag end */\n\n  ngAfterViewInit(): void {\n    CdkLazyDrag.prototype.ngAfterViewInit.call(this);\n    super.ngAfterViewInit();\n\n    this._dragRef.beforeStarted.subscribe( () => {\n      const { cdkDropList } = this;\n      if (cdkDropList && cdkDropList.columnReorder && this._context.col.reorder) {\n        // we don't allow a new dragging session before the previous ends.\n        // this sound impossible, but due to animation transitions its actually is.\n        // if the `transitionend` is long enough, a new drag can start...\n        //\n        // the `disabled` state is checked by pointerDown AFTER calling before start so we can cancel the start...\n        if (cdkDropList._dropListRef.isDragging()) {\n          return this.disabled = true;\n        }\n      }\n    });\n    this.started.subscribe( () => this._context.col.columnDef.isDragging = true );\n    this.ended.subscribe( () => this._context.col.columnDef.isDragging = false );\n  }\n\n  getCells(): HTMLElement[] {\n    if (!this.cache) {\n      this.cache = this._context.col.columnDef.queryCellElements('table');\n    }\n    return this.cache;\n  }\n\n  reset(): void {\n    super.reset();\n    if (this.cache) {\n      for (const el of this.cache) {\n        el.style.transform = ``;\n      }\n      this.cache = undefined;\n    }\n  }\n}\n","import { PblColumn } from '@pebula/ngrid';\n\ndeclare module '@pebula/ngrid/lib/grid/columns/column' {\n  interface PblColumn {\n    resize: boolean;\n  }\n}\n\n\ndeclare module '@pebula/ngrid/lib/grid/columns/types' {\n  interface PblColumnDefinition {\n    resize?: boolean;\n  }\n}\n\nexport function extendGrid(): void {\n  PblColumn.extendProperty('resize');\n}\n","import { animationFrameScheduler, Subscription } from 'rxjs';\nimport { auditTime, take } from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostListener,\n  Inject,\n  Input,\n  Optional,\n  OnDestroy,\n  NgZone,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { DragRefConfig, DragDropRegistry, CDK_DRAG_CONFIG } from '@angular/cdk/drag-drop';\n\nimport { PblNgridComponent, PblColumn, PblNgridMetaCellContext, NgridPlugin, isPblColumn } from '@pebula/ngrid';\nimport { toggleNativeDragInteractions } from './cdk-encapsulated-code';\nimport { extendGrid } from './extend-grid';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    columnResize?: PblNgridDragResizeComponent;\n  }\n}\n\nexport const PLUGIN_KEY: 'columnResize' = 'columnResize';\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n@NgridPlugin({ id: PLUGIN_KEY, runOnce: extendGrid })\n@Component({\n  selector: 'pbl-ngrid-drag-resize', // tslint:disable-line:component-selector\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'pbl-ngrid-column-resizer',\n    '[style.width.px]': 'grabAreaWidth',\n  },\n  templateUrl: './column-resize.component.html',\n  styleUrls: [ './column-resize.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class PblNgridDragResizeComponent implements AfterViewInit, OnDestroy {\n\n  // tslint:disable-next-line:no-input-rename\n  @Input() set context(value: PblNgridMetaCellContext<any>) {\n    if (value) {\n      const { col, grid } = value;\n      if (isPblColumn(col)) {\n        this.column = col;\n        this.grid = grid;\n        return;\n      }\n    }\n    this.column = this.grid = undefined;\n  }\n\n  /**\n   * The area (in pixels) in which the handle can be grabbed and resize the cell.\n   * Default: 6\n   */\n  @Input() grabAreaWidth = 6;\n\n  column: PblColumn;\n  /** @deprecated use grid instead */\n  get table(): PblNgridComponent<any> { return this.grid; }\n  grid: PblNgridComponent<any>;\n\n  _hasStartedDragging: boolean;\n  private _hasMoved: boolean;\n  private _rootElement: HTMLElement;\n  private _pointerMoveSubscription = Subscription.EMPTY;\n  private _pointerUpSubscription = Subscription.EMPTY;\n  private _scrollPosition: {top: number, left: number};\n  private _pickupPositionOnPage: Point;\n  private _initialWidth: number;\n  private _lastWidth: number;\n\n  private _rootElementInitSubscription = Subscription.EMPTY;\n\n  constructor(public element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _viewportRuler: ViewportRuler,\n              private _dragDropRegistry: DragDropRegistry<PblNgridDragResizeComponent, any>,\n              @Inject(CDK_DRAG_CONFIG) private _config: DragRefConfig,\n              @Optional() private _dir: Directionality) {\n    _dragDropRegistry.registerDragItem(this);\n  }\n\n  ngAfterViewInit(): void {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._rootElementInitSubscription = this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      const rootElement = this._rootElement = this._getRootElement();\n      const cell = rootElement.parentElement;\n      cell.classList.add('pbl-ngrid-column-resize');\n      rootElement.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      rootElement.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      toggleNativeDragInteractions(rootElement , false);\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this._rootElement) {\n      this._rootElement.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      this._rootElement.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    this._rootElementInitSubscription.unsubscribe();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n  }\n\n  @HostListener('dblclick', ['$event'])\n  onDoubleClick(event: MouseEvent): void {\n    this.grid.columnApi.autoSizeColumn(this.column);\n  }\n\n  _pointerDown = (event: MouseEvent | TouchEvent) => {\n    this._initializeDragSequence(this._rootElement, event);\n  }\n\n    /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (this._isDragging() || (!this._isTouchEvent(event) && event.button !== 0)) {\n      return;\n    }\n\n    this._hasStartedDragging = this._hasMoved = false;\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove\n      .pipe(auditTime(0, animationFrameScheduler))\n      .subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    const pointerPosition = this._getPointerPositionOnPage(event);\n    const distanceX = pointerPosition.x - this._pickupPositionOnPage.x;\n    const distanceY = pointerPosition.y - this._pickupPositionOnPage.y;\n\n    if (!this._hasStartedDragging) {\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (Math.abs(distanceX) + Math.abs(distanceY) >= this._config.dragStartThreshold) {\n        this._hasStartedDragging = true;\n\n        // It will be a good thing if we turned of the header's resize observer to boost performance\n        // However, because we relay on the total grid minimum width updates to relatively even out the columns it will not work.\n        // Group cells will not cover all of the children, when we enlarge the width of a child in the group.\n        // This is because the max-width of the group is set proportional to the total min-width of the inner grid.\n        // For it to work we need to directly update the width of ALL OF THE GROUPS.\n        // this.column.columnDef.isDragging = true;\n\n        this.column.sizeInfo.updateSize();\n        this._lastWidth = this._initialWidth = this.column.columnDef.netWidth;\n      }\n      return;\n    }\n\n    this._hasMoved = true;\n    event.preventDefault();\n    event.stopPropagation();\n\n    let newWidth = Math.max(0, this._initialWidth + distanceX);\n\n    if (newWidth > this.column.maxWidth) {\n      newWidth = this.column.maxWidth;\n    } else if (distanceX < 0 && newWidth < this.column.minWidth) {\n      newWidth = this.column.minWidth;\n    }\n\n    if (this._lastWidth !== newWidth) {\n      this._lastWidth = newWidth;\n      this.column.updateWidth(`${newWidth}px`);\n      this.grid.resetColumnsWidth();\n      // `this.column.updateWidth` will update the grid width cell only, which will trigger a resize that will update all other cells\n      // `this.grid.resetColumnsWidth()` will re-adjust all other grid width cells, and if their size changes they will trigger the resize event...\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = () => {\n    if (!this._isDragging()) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    // this.column.columnDef.isDragging = false;\n    this.grid.columnApi.resizeColumn(this.column, this._lastWidth + 'px');\n  }\n\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    const point = this._isTouchEvent(event) ? event.touches[0] : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n  private _isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n    return event.type.startsWith('touch');\n  }\n\n  _isDragging() {\n    return this._dragDropRegistry.isDragging(this);\n  }\n\n  private _getRootElement(): HTMLElement {\n    return this.element.nativeElement;\n  }\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n  }\n}\n\ninterface Point {\n  x: number;\n  y: number;\n}\n","\n/**\n * Code from angular/material2 repository\n * File: https://github.com/angular/material2/blob/master/src/cdk/drag-drop/drag-styling.ts\n * Commit: https://github.com/angular/material2/blob/9cd3132607b4d5ae242291df41fb02dc7a453da8/src/cdk/drag-drop/drag-styling.ts\n *\n * This code is not public but required for the drag so duplicated here.\n **/\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(dest: Writeable<CSSStyleDeclaration>, source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key] = source[key as keyof CSSStyleDeclaration];\n    }\n  }\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n","import { Directive, TemplateRef } from '@angular/core';\nimport { PblNgridRegistryService, PblNgridMultiTemplateRegistry, PblNgridDataHeaderExtensionRef, PblNgridDataHeaderExtensionContext, PblNgridPluginController } from '@pebula/ngrid';\n\nimport { PLUGIN_KEY } from './column-reorder-plugin';\n\n/**\n * Marks the element as the resizer template for cells.\n */\n@Directive({ selector: '[pblNgridCellDraggerRef]' })\nexport class PblNgridCellDraggerRefDirective extends PblNgridMultiTemplateRegistry<PblNgridDataHeaderExtensionContext, 'dataHeaderExtensions'> implements PblNgridDataHeaderExtensionRef {\n  readonly name: 'cellDragger' = 'cellDragger';\n  readonly kind: 'dataHeaderExtensions' = 'dataHeaderExtensions';\n  constructor(tRef: TemplateRef<PblNgridDataHeaderExtensionContext>, registry: PblNgridRegistryService) { super(tRef, registry); }\n\n  shouldRender(context: PblNgridDataHeaderExtensionContext): boolean {\n    // We dont check for `context.col.reorder` because even if a specific column does not \"reorder\" we still need to render the cdk-drag\n    // so the cdk-drop-list will be aware of this item, so if another item does reorder it will be able to move while taking this element into consideration.\n    // I.E: It doesn't reorder but it's part of the playground.\n    //\n    // However, when the plugin does not exists for this table we don't need to render...\n\n    const pluginCtrl = PblNgridPluginController.find(context.grid);\n    return pluginCtrl.hasPlugin(PLUGIN_KEY);\n  }\n}\n","// tslint:disable:no-output-rename\n\nimport {\n  Inject,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  QueryList,\n} from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport {\n  DragDrop,\n  CdkDropListGroup,\n  CdkDropList,\n  CdkDrag,\n  CDK_DROP_LIST,\n  DragDropRegistry,\n} from '@angular/cdk/drag-drop';\n\nimport { PblNgridComponent, PblNgridPluginController, PblColumn } from '@pebula/ngrid';\nimport { CdkLazyDropList } from '../core/lazy-drag-drop';\nimport { PblDragRef } from '../core/drag-ref';\nimport { PblDropListRef } from '../core/drop-list-ref';\nimport { PblNgridColumnDragDirective } from './column-reorder-plugin';\nimport { PblDragDrop } from '../core/drag-drop';\n\nlet _uniqueIdCounter = 0;\n\n@Directive({\n  selector: '[pblAggregationContainer]',\n  exportAs: 'pblAggregationContainer',\n  inputs: [\n    'directContainerElement:cdkDropListDirectContainerElement'\n  ],\n  host: { // tslint:disable-line:use-host-property-decorator\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n  },\n  providers: [\n    { provide: DragDrop, useExisting: PblDragDrop },\n    { provide: CDK_DROP_LIST, useExisting: PblNgridAggregationContainerDirective },\n  ],\n})\nexport class PblNgridAggregationContainerDirective<T = any> extends CdkDropList<T> implements OnDestroy, CdkLazyDropList<T> {\n  id = `pbl-ngrid-column-aggregation-container-${_uniqueIdCounter++}`;\n  orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  pending: PblColumn;\n  _draggables: QueryList<CdkDrag>;\n\n  constructor(public grid: PblNgridComponent<T>,\n              pluginCtrl: PblNgridPluginController,\n              element: ElementRef<HTMLElement>,\n              dragDrop: DragDrop,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() dir?: Directionality,\n              @Optional() @SkipSelf() group?: CdkDropListGroup<CdkDropList>) {\n    super(element, dragDrop, changeDetectorRef, dir, group);\n    const reorder = pluginCtrl.getPlugin('columnReorder');\n    reorder.connectedTo = this.id;\n\n    this.pblDropListRef.dropped\n      .subscribe( event => {\n        const item = event.item as PblDragRef<PblNgridColumnDragDirective<any>>;\n        this.pending = undefined;\n        this.grid.columnApi.addGroupBy(item.data.column);\n      });\n\n    this.pblDropListRef.entered\n      .subscribe( event => {\n        const item = event.item as PblDragRef<PblNgridColumnDragDirective<any>>;\n        this.pending = item.data.column;\n        item.getPlaceholderElement().style.display = 'none';\n        for (const c of item.data.getCells()) {\n          c.style.display = 'none';\n        }\n      });\n\n    this.pblDropListRef.exited\n      .subscribe( event => {\n        const item = event.item as PblDragRef<PblNgridColumnDragDirective<any>>;\n        this.pending = undefined;\n        item.getPlaceholderElement().style.display = '';\n        for (const c of item.data.getCells()) {\n          c.style.display = '';\n        }\n      });\n  }\n\n    /* CdkLazyDropList start */\n  /**\n   * Selector that will be used to determine the direct container element, starting from\n   * the `cdkDropList` element and going down the DOM. Passing an alternate direct container element\n   * is useful when the `cdkDropList` is not the direct parent (i.e. ancestor but not father)\n   * of the draggable elements.\n   */\n  directContainerElement: string;\n  get pblDropListRef(): PblDropListRef<any> { return this._dropListRef as any; }\n  originalElement: ElementRef<HTMLElement>;\n  _draggablesSet = new Set<CdkDrag>();\n  ngOnInit(): void { CdkLazyDropList.prototype.ngOnInit.call(this); }\n  addDrag(drag: CdkDrag): void { return CdkLazyDropList.prototype.addDrag.call(this, drag); }\n  removeDrag(drag: CdkDrag): boolean { return CdkLazyDropList.prototype.removeDrag.call(this, drag); }\n  beforeStarted(): void { CdkLazyDropList.prototype.beforeStarted.call(this); }\n  /* CdkLazyDropList end */\n\n}\n","import { Directive, TemplateRef } from '@angular/core';\nimport { PblNgridRegistryService, PblNgridMultiTemplateRegistry, PblNgridDataHeaderExtensionRef, PblNgridDataHeaderExtensionContext } from '@pebula/ngrid';\n\n/**\n * Marks the element as the resizer template for cells.\n */\n@Directive({ selector: '[pblNgridCellResizerRef]' })\nexport class PblNgridCellResizerRefDirective extends PblNgridMultiTemplateRegistry<PblNgridDataHeaderExtensionContext, 'dataHeaderExtensions'> implements PblNgridDataHeaderExtensionRef {\n  readonly name: 'cellResizer' = 'cellResizer';\n  readonly kind: 'dataHeaderExtensions' = 'dataHeaderExtensions';\n\n  constructor(tRef: TemplateRef<PblNgridDataHeaderExtensionContext>, registry: PblNgridRegistryService) { super(tRef, registry); }\n\n  shouldRender(context: PblNgridDataHeaderExtensionContext): boolean {\n    return !!context.col.resize;\n  }\n}\n","import { Component, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'pbl-drag-plugin-default-templates',\n  template:\n`<pbl-ngrid-drag-resize *pblNgridCellResizerRef=\"let ctx\" [context]=\"ctx\"></pbl-ngrid-drag-resize>\n<span *pblNgridCellDraggerRef=\"let ctx\" [pblNgridColumnDrag]=\"ctx\" cdkDragRootElementClass=\"cdk-drag\"></span>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class DragPluginDefaultTemplatesComponent {}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DragDropModule, DragDrop } from '@angular/cdk/drag-drop';\n\nimport { PblNgridModule, provideCommon } from '@pebula/ngrid';\n\nimport { CdkLazyDropList, CdkLazyDrag, PblDragHandle } from './drag-and-drop/core/lazy-drag-drop';\nimport { PblNgridRowReorderPluginDirective, PblNgridRowDragDirective } from './drag-and-drop/row/row-reorder-plugin';\nimport { PblNgridColumnReorderPluginDirective, PblNgridColumnDragDirective } from './drag-and-drop/column/column-reorder-plugin';\nimport { PblNgridCellDraggerRefDirective } from './drag-and-drop/column/cell-dragger-ref';\nimport { PblNgridAggregationContainerDirective } from './drag-and-drop/column/aggregation-column';\n\nimport { PblNgridDragResizeComponent } from './column-resize/column-resize.component';\nimport { PblNgridCellResizerRefDirective } from './column-resize/cell-resizer-ref';\n\nimport { DragPluginDefaultTemplatesComponent } from './default-settings.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PblNgridModule,\n    DragDropModule\n  ],\n  declarations: [\n    DragPluginDefaultTemplatesComponent,\n    CdkLazyDropList, CdkLazyDrag, PblDragHandle,\n    PblNgridRowReorderPluginDirective, PblNgridRowDragDirective,\n    PblNgridColumnReorderPluginDirective, PblNgridColumnDragDirective, PblNgridCellDraggerRefDirective,\n    PblNgridAggregationContainerDirective,\n    PblNgridDragResizeComponent, PblNgridCellResizerRefDirective,\n  ],\n  exports: [\n    DragDropModule,\n    CdkLazyDropList, CdkLazyDrag, PblDragHandle,\n    PblNgridRowReorderPluginDirective, PblNgridRowDragDirective,\n    PblNgridColumnReorderPluginDirective, PblNgridColumnDragDirective, PblNgridCellDraggerRefDirective,\n    PblNgridAggregationContainerDirective,\n    PblNgridDragResizeComponent, PblNgridCellResizerRefDirective,\n  ],\n  // TODO: remove when ViewEngine is no longer supported by angular (V11 ???)\n  entryComponents: [ DragPluginDefaultTemplatesComponent ]\n})\nexport class PblNgridDragModule {\n\n  static withDefaultTemplates(): ModuleWithProviders<PblNgridDragModule> {\n    return {\n      ngModule: PblNgridDragModule,\n      providers: provideCommon( [ { component: DragPluginDefaultTemplatesComponent } ]),\n    };\n  }\n}\n"]}