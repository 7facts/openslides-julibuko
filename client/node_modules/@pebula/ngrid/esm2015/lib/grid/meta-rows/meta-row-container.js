/**
 * @fileoverview added by tsickle
 * Generated from: lib/grid/meta-rows/meta-row-container.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __decorate, __metadata } from "tslib";
import { Subject } from 'rxjs';
import { Component, Input, ElementRef } from '@angular/core';
import { UnRx } from '@pebula/utils';
import { PblNgridMetaRowService } from './meta-row.service';
let PblNgridMetaRowContainerComponent = class PblNgridMetaRowContainerComponent {
    /**
     * @param {?} metaRows
     * @param {?} elRef
     */
    constructor(metaRows, elRef) {
        this.metaRows = metaRows;
        this._width$ = new Subject();
        this._totalColumnWidth = 0;
        this.element = elRef.nativeElement;
        metaRows.sync.pipe(UnRx(this)).subscribe((/**
         * @return {?}
         */
        () => this.syncRowDefinitions()));
        this.metaRows.extApi.events
            .pipe(UnRx(this))
            .subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            if (event.kind === 'onResizeRow') {
                this.updateWidths();
            }
        }));
        this.metaRows.extApi.grid.columnApi.totalColumnWidthChange
            .pipe(UnRx(this))
            .subscribe((/**
         * @param {?} width
         * @return {?}
         */
        width => {
            this._totalColumnWidth = width;
            this.updateWidths();
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('type' in changes) {
            /** @type {?} */
            const scrollContainerElement = this.element;
            scrollContainerElement.scrollLeft = this.metaRows.extApi.grid.viewport.measureScrollOffset('start');
            if (changes.type.isFirstChange) {
                this.metaRows.hzScroll
                    .pipe(UnRx(this))
                    .subscribe((/**
                 * @param {?} offset
                 * @return {?}
                 */
                offset => scrollContainerElement.scrollLeft = offset));
                this.metaRows.extApi.cdkTable.onRenderRows
                    .pipe(UnRx(this))
                    .subscribe((/**
                 * @return {?}
                 */
                () => { this.updateWidths(); }));
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._width$.complete();
    }
    /**
     * @private
     * @return {?}
     */
    updateWidths() {
        this._innerWidth = this.metaRows.extApi.grid.viewport.innerWidth;
        this._minWidth = this.metaRows.extApi.cdkTable.minWidth;
        this._width = Math.max(this._innerWidth, this._minWidth);
        this._width$.next(Math.max(this._innerWidth, this._totalColumnWidth));
    }
    /**
     * @private
     * @return {?}
     */
    syncRowDefinitions() {
        /** @type {?} */
        const isHeader = this.type === 'header';
        /** @type {?} */
        const section = isHeader ? this.metaRows.header : this.metaRows.footer;
        /** @type {?} */
        const widthContainer = this.element.firstElementChild;
        /** @type {?} */
        const container = widthContainer.nextElementSibling;
        if (isHeader) {
            widthContainer.appendChild(this.metaRows.gridWidthRow.el);
        }
        for (const def of section.fixed) {
            container.appendChild(def.el);
        }
    }
};
PblNgridMetaRowContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'div[pbl-ngrid-fixed-meta-row-container]',
                template: `<div class="pbl-cdk-table" [style.width.px]="_width"></div><div class="pbl-cdk-table" [style.width.px]="_width$ | async"></div>`,
                host: {
                    // tslint:disable-line:use-host-property-decorator
                    style: 'flex: 0 0 auto; overflow: hidden;',
                    '[style.width.px]': '_innerWidth',
                }
            }] }
];
/** @nocollapse */
PblNgridMetaRowContainerComponent.ctorParameters = () => [
    { type: PblNgridMetaRowService },
    { type: ElementRef }
];
PblNgridMetaRowContainerComponent.propDecorators = {
    type: [{ type: Input, args: ['pbl-ngrid-fixed-meta-row-container',] }]
};
PblNgridMetaRowContainerComponent = __decorate([
    UnRx(),
    __metadata("design:paramtypes", [PblNgridMetaRowService, ElementRef])
], PblNgridMetaRowContainerComponent);
export { PblNgridMetaRowContainerComponent };
if (false) {
    /** @type {?} */
    PblNgridMetaRowContainerComponent.prototype.type;
    /**
     * The inner width of the grid, the viewport width of a row.
     * The width of the grid minus scroll bar.
     * @type {?}
     */
    PblNgridMetaRowContainerComponent.prototype._innerWidth;
    /** @type {?} */
    PblNgridMetaRowContainerComponent.prototype._minWidth;
    /** @type {?} */
    PblNgridMetaRowContainerComponent.prototype._width;
    /** @type {?} */
    PblNgridMetaRowContainerComponent.prototype._width$;
    /**
     * @type {?}
     * @private
     */
    PblNgridMetaRowContainerComponent.prototype._totalColumnWidth;
    /**
     * @type {?}
     * @private
     */
    PblNgridMetaRowContainerComponent.prototype.element;
    /** @type {?} */
    PblNgridMetaRowContainerComponent.prototype.metaRows;
}
//# sourceMappingURL=data:application/json;base64,