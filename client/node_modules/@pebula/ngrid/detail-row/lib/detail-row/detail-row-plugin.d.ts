import { EventEmitter, Injector, OnDestroy } from '@angular/core';
import { PblNgridComponent, PblNgridPluginController } from '@pebula/ngrid';
import { PblNgridDetailRowComponent } from './row';
import * as ɵngcc0 from '@angular/core';
declare module '@pebula/ngrid/lib/ext/types' {
    interface PblNgridPluginExtension {
        detailRow?: PblNgridDetailRowPluginDirective<any>;
    }
}
export declare const PLUGIN_KEY: 'detailRow';
export declare const ROW_WHEN_TRUE: () => boolean;
export declare const ROW_WHEN_FALSE: () => boolean;
export declare function toggleDetailRow<T = any>(grid: PblNgridComponent<T>, row: T, forceState?: boolean): boolean | void;
export interface PblDetailsRowToggleEvent<T = any> {
    row: T;
    expended: boolean;
    toggle(): void;
}
export declare class PblNgridDetailRowPluginDirective<T> implements OnDestroy {
    private grid;
    private injector;
    /**
     * Detail row control (none / all rows / selective rows)
     *
     * A detail row is an additional row added below a row rendered with the context of the row above it.
     *
     * You can enable/disable detail row for the entire grid by setting `detailRow` to true/false respectively.
     * To control detail row per row, provide a predicate.
     */
    get detailRow(): ((index: number, rowData: T) => boolean) | boolean;
    set detailRow(value: ((index: number, rowData: T) => boolean) | boolean);
    set singleDetailRow(value: boolean);
    /**
     * A list of columns that will not trigger a detail row toggle when clicked.
     */
    excludeToggleFrom: string[];
    /**
     * Set the behavior when the row's context is changed while the detail row is opened (another row is displayed in place of the current row).
     *
     * - ignore: don't do anything, leave as is (for manual intervention)
     * - close: close the detail row
     * - render: re-render the row with the new context
     *
     * The default behavior is `render`
     *
     * This scenario will pop-up when using pagination and the user move between pages or change the page size.
     * It might also happen when the data is updated due to custom refresh calls on the datasource or any other scenario that might invoke a datasource update.
     *
     * The `ignore` phase, when used, will not trigger an update, leaving the detail row opened and showing data from the previous row.
     * The `ignore` is intended for use with `toggledRowContextChange`, which will emit when the row context has changed, this will allow the developer to
     * toggle the row (mimic `close`) or update the context manually. For example, if toggling open the detail row invokes a "fetch" operation that retrieves data for the detail row
     * this will allow updates on context change.
     *
     * > Note that `toggledRowContextChange` fires regardless of the value set in `whenContextChange`
     */
    whenContextChange: 'ignore' | 'close' | 'render';
    /**
     * Emits whenever a detail row instance is toggled on/off
     * Emits an event handler with the row, the toggle state and a toggle operation method.
     */
    toggleChange: EventEmitter<PblDetailsRowToggleEvent<T>>;
    /**
     * Emits whenever the row context has changed while the row is toggled open.
     * This scenario is unique and will occur only when a detail row is opened AND the parent row has changed.
     *
     * For example, when using pagination and the user navigates to the next/previous set or when the rows per page size is changed.
     * It might also occur when the data is updated due to custom refresh calls on the datasource or any other scenario that might invoke a datasource update.
     *
     * Emits an event handler with the row, the toggle state and a toggle operation method.
     */
    toggledRowContextChange: EventEmitter<PblDetailsRowToggleEvent<T>>;
    private _openedRow?;
    private _forceSingle;
    private _isSimpleRow;
    private _isDetailRow;
    private _detailRowRows;
    private _detailRow;
    private _detailRowDef;
    private _defaultParentRef;
    private _removePlugin;
    constructor(grid: PblNgridComponent<any>, pluginCtrl: PblNgridPluginController<T>, injector: Injector);
    addDetailRow(detailRow: PblNgridDetailRowComponent): void;
    removeDetailRow(detailRow: PblNgridDetailRowComponent): void;
    toggleDetailRow(row: any, forceState?: boolean): boolean | void;
    ngOnDestroy(): void;
    /** @internal */
    detailRowToggled(event: PblDetailsRowToggleEvent<T>): void;
    private setupDetailRowParent;
    private resetTableRowDefs;
    /**
     * Update the grid with detail row infor.
     * Instead of calling for a change detection cycle we can assign the new predicates directly to the cdkRowDef instances.
     */
    private updateTable;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PblNgridDetailRowPluginDirective<any>, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PblNgridDetailRowPluginDirective<any>, "pbl-ngrid[detailRow]", ["pblNgridDetailRow"], { "whenContextChange": "whenContextChange"; "detailRow": "detailRow"; "singleDetailRow": "singleDetailRow"; "excludeToggleFrom": "excludeToggleFrom"; }, { "toggleChange": "toggleChange"; "toggledRowContextChange": "toggledRowContextChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV0YWlsLXJvdy1wbHVnaW4uZC50cyIsInNvdXJjZXMiOlsiZGV0YWlsLXJvdy1wbHVnaW4uZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5qZWN0b3IsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGJsTmdyaWRDb21wb25lbnQsIFBibE5ncmlkUGx1Z2luQ29udHJvbGxlciB9IGZyb20gJ0BwZWJ1bGEvbmdyaWQnO1xuaW1wb3J0IHsgUGJsTmdyaWREZXRhaWxSb3dDb21wb25lbnQgfSBmcm9tICcuL3Jvdyc7XG5kZWNsYXJlIG1vZHVsZSAnQHBlYnVsYS9uZ3JpZC9saWIvZXh0L3R5cGVzJyB7XG4gICAgaW50ZXJmYWNlIFBibE5ncmlkUGx1Z2luRXh0ZW5zaW9uIHtcbiAgICAgICAgZGV0YWlsUm93PzogUGJsTmdyaWREZXRhaWxSb3dQbHVnaW5EaXJlY3RpdmU8YW55PjtcbiAgICB9XG59XG5leHBvcnQgZGVjbGFyZSBjb25zdCBQTFVHSU5fS0VZOiAnZGV0YWlsUm93JztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFJPV19XSEVOX1RSVUU6ICgpID0+IGJvb2xlYW47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBST1dfV0hFTl9GQUxTRTogKCkgPT4gYm9vbGVhbjtcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIHRvZ2dsZURldGFpbFJvdzxUID0gYW55PihncmlkOiBQYmxOZ3JpZENvbXBvbmVudDxUPiwgcm93OiBULCBmb3JjZVN0YXRlPzogYm9vbGVhbik6IGJvb2xlYW4gfCB2b2lkO1xuZXhwb3J0IGludGVyZmFjZSBQYmxEZXRhaWxzUm93VG9nZ2xlRXZlbnQ8VCA9IGFueT4ge1xuICAgIHJvdzogVDtcbiAgICBleHBlbmRlZDogYm9vbGVhbjtcbiAgICB0b2dnbGUoKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBibE5ncmlkRGV0YWlsUm93UGx1Z2luRGlyZWN0aXZlPFQ+IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGdyaWQ7XG4gICAgcHJpdmF0ZSBpbmplY3RvcjtcbiAgICAvKipcbiAgICAgKiBEZXRhaWwgcm93IGNvbnRyb2wgKG5vbmUgLyBhbGwgcm93cyAvIHNlbGVjdGl2ZSByb3dzKVxuICAgICAqXG4gICAgICogQSBkZXRhaWwgcm93IGlzIGFuIGFkZGl0aW9uYWwgcm93IGFkZGVkIGJlbG93IGEgcm93IHJlbmRlcmVkIHdpdGggdGhlIGNvbnRleHQgb2YgdGhlIHJvdyBhYm92ZSBpdC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gZW5hYmxlL2Rpc2FibGUgZGV0YWlsIHJvdyBmb3IgdGhlIGVudGlyZSBncmlkIGJ5IHNldHRpbmcgYGRldGFpbFJvd2AgdG8gdHJ1ZS9mYWxzZSByZXNwZWN0aXZlbHkuXG4gICAgICogVG8gY29udHJvbCBkZXRhaWwgcm93IHBlciByb3csIHByb3ZpZGUgYSBwcmVkaWNhdGUuXG4gICAgICovXG4gICAgZ2V0IGRldGFpbFJvdygpOiAoKGluZGV4OiBudW1iZXIsIHJvd0RhdGE6IFQpID0+IGJvb2xlYW4pIHwgYm9vbGVhbjtcbiAgICBzZXQgZGV0YWlsUm93KHZhbHVlOiAoKGluZGV4OiBudW1iZXIsIHJvd0RhdGE6IFQpID0+IGJvb2xlYW4pIHwgYm9vbGVhbik7XG4gICAgc2V0IHNpbmdsZURldGFpbFJvdyh2YWx1ZTogYm9vbGVhbik7XG4gICAgLyoqXG4gICAgICogQSBsaXN0IG9mIGNvbHVtbnMgdGhhdCB3aWxsIG5vdCB0cmlnZ2VyIGEgZGV0YWlsIHJvdyB0b2dnbGUgd2hlbiBjbGlja2VkLlxuICAgICAqL1xuICAgIGV4Y2x1ZGVUb2dnbGVGcm9tOiBzdHJpbmdbXTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGJlaGF2aW9yIHdoZW4gdGhlIHJvdydzIGNvbnRleHQgaXMgY2hhbmdlZCB3aGlsZSB0aGUgZGV0YWlsIHJvdyBpcyBvcGVuZWQgKGFub3RoZXIgcm93IGlzIGRpc3BsYXllZCBpbiBwbGFjZSBvZiB0aGUgY3VycmVudCByb3cpLlxuICAgICAqXG4gICAgICogLSBpZ25vcmU6IGRvbid0IGRvIGFueXRoaW5nLCBsZWF2ZSBhcyBpcyAoZm9yIG1hbnVhbCBpbnRlcnZlbnRpb24pXG4gICAgICogLSBjbG9zZTogY2xvc2UgdGhlIGRldGFpbCByb3dcbiAgICAgKiAtIHJlbmRlcjogcmUtcmVuZGVyIHRoZSByb3cgd2l0aCB0aGUgbmV3IGNvbnRleHRcbiAgICAgKlxuICAgICAqIFRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzIGByZW5kZXJgXG4gICAgICpcbiAgICAgKiBUaGlzIHNjZW5hcmlvIHdpbGwgcG9wLXVwIHdoZW4gdXNpbmcgcGFnaW5hdGlvbiBhbmQgdGhlIHVzZXIgbW92ZSBiZXR3ZWVuIHBhZ2VzIG9yIGNoYW5nZSB0aGUgcGFnZSBzaXplLlxuICAgICAqIEl0IG1pZ2h0IGFsc28gaGFwcGVuIHdoZW4gdGhlIGRhdGEgaXMgdXBkYXRlZCBkdWUgdG8gY3VzdG9tIHJlZnJlc2ggY2FsbHMgb24gdGhlIGRhdGFzb3VyY2Ugb3IgYW55IG90aGVyIHNjZW5hcmlvIHRoYXQgbWlnaHQgaW52b2tlIGEgZGF0YXNvdXJjZSB1cGRhdGUuXG4gICAgICpcbiAgICAgKiBUaGUgYGlnbm9yZWAgcGhhc2UsIHdoZW4gdXNlZCwgd2lsbCBub3QgdHJpZ2dlciBhbiB1cGRhdGUsIGxlYXZpbmcgdGhlIGRldGFpbCByb3cgb3BlbmVkIGFuZCBzaG93aW5nIGRhdGEgZnJvbSB0aGUgcHJldmlvdXMgcm93LlxuICAgICAqIFRoZSBgaWdub3JlYCBpcyBpbnRlbmRlZCBmb3IgdXNlIHdpdGggYHRvZ2dsZWRSb3dDb250ZXh0Q2hhbmdlYCwgd2hpY2ggd2lsbCBlbWl0IHdoZW4gdGhlIHJvdyBjb250ZXh0IGhhcyBjaGFuZ2VkLCB0aGlzIHdpbGwgYWxsb3cgdGhlIGRldmVsb3BlciB0b1xuICAgICAqIHRvZ2dsZSB0aGUgcm93IChtaW1pYyBgY2xvc2VgKSBvciB1cGRhdGUgdGhlIGNvbnRleHQgbWFudWFsbHkuIEZvciBleGFtcGxlLCBpZiB0b2dnbGluZyBvcGVuIHRoZSBkZXRhaWwgcm93IGludm9rZXMgYSBcImZldGNoXCIgb3BlcmF0aW9uIHRoYXQgcmV0cmlldmVzIGRhdGEgZm9yIHRoZSBkZXRhaWwgcm93XG4gICAgICogdGhpcyB3aWxsIGFsbG93IHVwZGF0ZXMgb24gY29udGV4dCBjaGFuZ2UuXG4gICAgICpcbiAgICAgKiA+IE5vdGUgdGhhdCBgdG9nZ2xlZFJvd0NvbnRleHRDaGFuZ2VgIGZpcmVzIHJlZ2FyZGxlc3Mgb2YgdGhlIHZhbHVlIHNldCBpbiBgd2hlbkNvbnRleHRDaGFuZ2VgXG4gICAgICovXG4gICAgd2hlbkNvbnRleHRDaGFuZ2U6ICdpZ25vcmUnIHwgJ2Nsb3NlJyB8ICdyZW5kZXInO1xuICAgIC8qKlxuICAgICAqIEVtaXRzIHdoZW5ldmVyIGEgZGV0YWlsIHJvdyBpbnN0YW5jZSBpcyB0b2dnbGVkIG9uL29mZlxuICAgICAqIEVtaXRzIGFuIGV2ZW50IGhhbmRsZXIgd2l0aCB0aGUgcm93LCB0aGUgdG9nZ2xlIHN0YXRlIGFuZCBhIHRvZ2dsZSBvcGVyYXRpb24gbWV0aG9kLlxuICAgICAqL1xuICAgIHRvZ2dsZUNoYW5nZTogRXZlbnRFbWl0dGVyPFBibERldGFpbHNSb3dUb2dnbGVFdmVudDxUPj47XG4gICAgLyoqXG4gICAgICogRW1pdHMgd2hlbmV2ZXIgdGhlIHJvdyBjb250ZXh0IGhhcyBjaGFuZ2VkIHdoaWxlIHRoZSByb3cgaXMgdG9nZ2xlZCBvcGVuLlxuICAgICAqIFRoaXMgc2NlbmFyaW8gaXMgdW5pcXVlIGFuZCB3aWxsIG9jY3VyIG9ubHkgd2hlbiBhIGRldGFpbCByb3cgaXMgb3BlbmVkIEFORCB0aGUgcGFyZW50IHJvdyBoYXMgY2hhbmdlZC5cbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlLCB3aGVuIHVzaW5nIHBhZ2luYXRpb24gYW5kIHRoZSB1c2VyIG5hdmlnYXRlcyB0byB0aGUgbmV4dC9wcmV2aW91cyBzZXQgb3Igd2hlbiB0aGUgcm93cyBwZXIgcGFnZSBzaXplIGlzIGNoYW5nZWQuXG4gICAgICogSXQgbWlnaHQgYWxzbyBvY2N1ciB3aGVuIHRoZSBkYXRhIGlzIHVwZGF0ZWQgZHVlIHRvIGN1c3RvbSByZWZyZXNoIGNhbGxzIG9uIHRoZSBkYXRhc291cmNlIG9yIGFueSBvdGhlciBzY2VuYXJpbyB0aGF0IG1pZ2h0IGludm9rZSBhIGRhdGFzb3VyY2UgdXBkYXRlLlxuICAgICAqXG4gICAgICogRW1pdHMgYW4gZXZlbnQgaGFuZGxlciB3aXRoIHRoZSByb3csIHRoZSB0b2dnbGUgc3RhdGUgYW5kIGEgdG9nZ2xlIG9wZXJhdGlvbiBtZXRob2QuXG4gICAgICovXG4gICAgdG9nZ2xlZFJvd0NvbnRleHRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxQYmxEZXRhaWxzUm93VG9nZ2xlRXZlbnQ8VD4+O1xuICAgIHByaXZhdGUgX29wZW5lZFJvdz87XG4gICAgcHJpdmF0ZSBfZm9yY2VTaW5nbGU7XG4gICAgcHJpdmF0ZSBfaXNTaW1wbGVSb3c7XG4gICAgcHJpdmF0ZSBfaXNEZXRhaWxSb3c7XG4gICAgcHJpdmF0ZSBfZGV0YWlsUm93Um93cztcbiAgICBwcml2YXRlIF9kZXRhaWxSb3c7XG4gICAgcHJpdmF0ZSBfZGV0YWlsUm93RGVmO1xuICAgIHByaXZhdGUgX2RlZmF1bHRQYXJlbnRSZWY7XG4gICAgcHJpdmF0ZSBfcmVtb3ZlUGx1Z2luO1xuICAgIGNvbnN0cnVjdG9yKGdyaWQ6IFBibE5ncmlkQ29tcG9uZW50PGFueT4sIHBsdWdpbkN0cmw6IFBibE5ncmlkUGx1Z2luQ29udHJvbGxlcjxUPiwgaW5qZWN0b3I6IEluamVjdG9yKTtcbiAgICBhZGREZXRhaWxSb3coZGV0YWlsUm93OiBQYmxOZ3JpZERldGFpbFJvd0NvbXBvbmVudCk6IHZvaWQ7XG4gICAgcmVtb3ZlRGV0YWlsUm93KGRldGFpbFJvdzogUGJsTmdyaWREZXRhaWxSb3dDb21wb25lbnQpOiB2b2lkO1xuICAgIHRvZ2dsZURldGFpbFJvdyhyb3c6IGFueSwgZm9yY2VTdGF0ZT86IGJvb2xlYW4pOiBib29sZWFuIHwgdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBkZXRhaWxSb3dUb2dnbGVkKGV2ZW50OiBQYmxEZXRhaWxzUm93VG9nZ2xlRXZlbnQ8VD4pOiB2b2lkO1xuICAgIHByaXZhdGUgc2V0dXBEZXRhaWxSb3dQYXJlbnQ7XG4gICAgcHJpdmF0ZSByZXNldFRhYmxlUm93RGVmcztcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIGdyaWQgd2l0aCBkZXRhaWwgcm93IGluZm9yLlxuICAgICAqIEluc3RlYWQgb2YgY2FsbGluZyBmb3IgYSBjaGFuZ2UgZGV0ZWN0aW9uIGN5Y2xlIHdlIGNhbiBhc3NpZ24gdGhlIG5ldyBwcmVkaWNhdGVzIGRpcmVjdGx5IHRvIHRoZSBjZGtSb3dEZWYgaW5zdGFuY2VzLlxuICAgICAqL1xuICAgIHByaXZhdGUgdXBkYXRlVGFibGU7XG59XG4iXX0=