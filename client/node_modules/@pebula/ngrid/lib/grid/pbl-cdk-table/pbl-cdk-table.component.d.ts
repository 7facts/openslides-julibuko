import { Observable } from 'rxjs';
import { ChangeDetectorRef, ElementRef, IterableDiffers, OnDestroy, Injector } from '@angular/core';
import { Platform } from '@angular/cdk/platform';
import { CdkTable, DataRowOutlet, CdkHeaderRowDef, CdkFooterRowDef } from '@angular/cdk/table';
import { Directionality } from '@angular/cdk/bidi';
import { PblNgridComponent } from '../ngrid.component';
import { PblNgridExtensionApi } from '../../ext/grid-ext-api';
/**
 * Wrapper for the CdkTable that extends it's functionality to support various table features.
 * This wrapper also applies Material Design table styles (i.e. `MatTable` styles).
 *
 * Most of the extensions are done using mixins, this is mostly for clarity and separation of the features added.
 * This approach will allow easy removal when a feature is no longer required/implemented natively.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PblCdkTableComponent<T> extends CdkTable<T> implements OnDestroy {
    protected injector: Injector;
    protected grid: PblNgridComponent<T>;
    protected extApi: PblNgridExtensionApi<T>;
    get _element(): HTMLElement;
    get onRenderRows(): Observable<DataRowOutlet>;
    get minWidth(): number | null;
    set minWidth(value: number | null);
    private _minWidth;
    private onRenderRows$;
    private _lastSticky;
    private _lastStickyEnd;
    private _isStickyPending;
    constructor(_differs: IterableDiffers, _changeDetectorRef: ChangeDetectorRef, _elementRef: ElementRef<HTMLElement>, role: string, _dir: Directionality, injector: Injector, grid: PblNgridComponent<T>, extApi: PblNgridExtensionApi<T>, _document?: any, platform?: Platform);
    updateStickyColumnStyles(): void;
    ngOnDestroy(): void;
    addClass(cssClassName: string): void;
    removeClass(cssClassName: string): void;
    private _cachedRowDefs;
    addHeaderRowDef(headerRowDef: CdkHeaderRowDef): void;
    clearHeaderRowDefs(): void;
    addFooterRowDef(footerRowDef: CdkFooterRowDef): void;
    clearFooterRowDefs(): void;
    private forOf;
    attachViewPort(): void;
    detachViewPort(): void;
    private virtualScrollDestroy;
    /**
     * An alias for `_cacheRowDefs()`
     */
    updateRowDefCache(): void;
    renderRows(): void;
    /**
     * Force run change detection for rows.
     * You can run it for specific groups or for all rows.
     */
    syncRows(rowType?: 'all' | boolean, detectChanges?: boolean): void;
    syncRows(rowType: 'header' | 'data' | 'footer', detectChanges: boolean, ...rows: number[]): void;
    syncRows(rowType: 'header' | 'data' | 'footer', ...rows: number[]): void;
    pblForceRenderDataRows(): void;
    private _updateStickyColumnStyles;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PblCdkTableComponent<any>, [null, null, null, { attribute: "role"; }, { optional: true; }, null, null, null, null, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PblCdkTableComponent<any>, "pbl-cdk-table", ["pblCdkTable"], {}, {}, never, ["caption"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGJsLWNkay10YWJsZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicGJsLWNkay10YWJsZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIEl0ZXJhYmxlRGlmZmVycywgT25EZXN0cm95LCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xuaW1wb3J0IHsgQ2RrVGFibGUsIERhdGFSb3dPdXRsZXQsIENka0hlYWRlclJvd0RlZiwgQ2RrRm9vdGVyUm93RGVmIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3RhYmxlJztcbmltcG9ydCB7IERpcmVjdGlvbmFsaXR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2JpZGknO1xuaW1wb3J0IHsgUGJsTmdyaWRDb21wb25lbnQgfSBmcm9tICcuLi9uZ3JpZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgUGJsTmdyaWRFeHRlbnNpb25BcGkgfSBmcm9tICcuLi8uLi9leHQvZ3JpZC1leHQtYXBpJztcbi8qKlxuICogV3JhcHBlciBmb3IgdGhlIENka1RhYmxlIHRoYXQgZXh0ZW5kcyBpdCdzIGZ1bmN0aW9uYWxpdHkgdG8gc3VwcG9ydCB2YXJpb3VzIHRhYmxlIGZlYXR1cmVzLlxuICogVGhpcyB3cmFwcGVyIGFsc28gYXBwbGllcyBNYXRlcmlhbCBEZXNpZ24gdGFibGUgc3R5bGVzIChpLmUuIGBNYXRUYWJsZWAgc3R5bGVzKS5cbiAqXG4gKiBNb3N0IG9mIHRoZSBleHRlbnNpb25zIGFyZSBkb25lIHVzaW5nIG1peGlucywgdGhpcyBpcyBtb3N0bHkgZm9yIGNsYXJpdHkgYW5kIHNlcGFyYXRpb24gb2YgdGhlIGZlYXR1cmVzIGFkZGVkLlxuICogVGhpcyBhcHByb2FjaCB3aWxsIGFsbG93IGVhc3kgcmVtb3ZhbCB3aGVuIGEgZmVhdHVyZSBpcyBubyBsb25nZXIgcmVxdWlyZWQvaW1wbGVtZW50ZWQgbmF0aXZlbHkuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBibENka1RhYmxlQ29tcG9uZW50PFQ+IGV4dGVuZHMgQ2RrVGFibGU8VD4gaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3I7XG4gICAgcHJvdGVjdGVkIGdyaWQ6IFBibE5ncmlkQ29tcG9uZW50PFQ+O1xuICAgIHByb3RlY3RlZCBleHRBcGk6IFBibE5ncmlkRXh0ZW5zaW9uQXBpPFQ+O1xuICAgIGdldCBfZWxlbWVudCgpOiBIVE1MRWxlbWVudDtcbiAgICBnZXQgb25SZW5kZXJSb3dzKCk6IE9ic2VydmFibGU8RGF0YVJvd091dGxldD47XG4gICAgZ2V0IG1pbldpZHRoKCk6IG51bWJlciB8IG51bGw7XG4gICAgc2V0IG1pbldpZHRoKHZhbHVlOiBudW1iZXIgfCBudWxsKTtcbiAgICBwcml2YXRlIF9taW5XaWR0aDtcbiAgICBwcml2YXRlIG9uUmVuZGVyUm93cyQ7XG4gICAgcHJpdmF0ZSBfbGFzdFN0aWNreTtcbiAgICBwcml2YXRlIF9sYXN0U3RpY2t5RW5kO1xuICAgIHByaXZhdGUgX2lzU3RpY2t5UGVuZGluZztcbiAgICBjb25zdHJ1Y3RvcihfZGlmZmVyczogSXRlcmFibGVEaWZmZXJzLCBfY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLCBfZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sIHJvbGU6IHN0cmluZywgX2RpcjogRGlyZWN0aW9uYWxpdHksIGluamVjdG9yOiBJbmplY3RvciwgZ3JpZDogUGJsTmdyaWRDb21wb25lbnQ8VD4sIGV4dEFwaTogUGJsTmdyaWRFeHRlbnNpb25BcGk8VD4sIF9kb2N1bWVudD86IGFueSwgcGxhdGZvcm0/OiBQbGF0Zm9ybSk7XG4gICAgdXBkYXRlU3RpY2t5Q29sdW1uU3R5bGVzKCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBhZGRDbGFzcyhjc3NDbGFzc05hbWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgcmVtb3ZlQ2xhc3MoY3NzQ2xhc3NOYW1lOiBzdHJpbmcpOiB2b2lkO1xuICAgIHByaXZhdGUgX2NhY2hlZFJvd0RlZnM7XG4gICAgYWRkSGVhZGVyUm93RGVmKGhlYWRlclJvd0RlZjogQ2RrSGVhZGVyUm93RGVmKTogdm9pZDtcbiAgICBjbGVhckhlYWRlclJvd0RlZnMoKTogdm9pZDtcbiAgICBhZGRGb290ZXJSb3dEZWYoZm9vdGVyUm93RGVmOiBDZGtGb290ZXJSb3dEZWYpOiB2b2lkO1xuICAgIGNsZWFyRm9vdGVyUm93RGVmcygpOiB2b2lkO1xuICAgIHByaXZhdGUgZm9yT2Y7XG4gICAgYXR0YWNoVmlld1BvcnQoKTogdm9pZDtcbiAgICBkZXRhY2hWaWV3UG9ydCgpOiB2b2lkO1xuICAgIHByaXZhdGUgdmlydHVhbFNjcm9sbERlc3Ryb3k7XG4gICAgLyoqXG4gICAgICogQW4gYWxpYXMgZm9yIGBfY2FjaGVSb3dEZWZzKClgXG4gICAgICovXG4gICAgdXBkYXRlUm93RGVmQ2FjaGUoKTogdm9pZDtcbiAgICByZW5kZXJSb3dzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRm9yY2UgcnVuIGNoYW5nZSBkZXRlY3Rpb24gZm9yIHJvd3MuXG4gICAgICogWW91IGNhbiBydW4gaXQgZm9yIHNwZWNpZmljIGdyb3VwcyBvciBmb3IgYWxsIHJvd3MuXG4gICAgICovXG4gICAgc3luY1Jvd3Mocm93VHlwZT86ICdhbGwnIHwgYm9vbGVhbiwgZGV0ZWN0Q2hhbmdlcz86IGJvb2xlYW4pOiB2b2lkO1xuICAgIHN5bmNSb3dzKHJvd1R5cGU6ICdoZWFkZXInIHwgJ2RhdGEnIHwgJ2Zvb3RlcicsIGRldGVjdENoYW5nZXM6IGJvb2xlYW4sIC4uLnJvd3M6IG51bWJlcltdKTogdm9pZDtcbiAgICBzeW5jUm93cyhyb3dUeXBlOiAnaGVhZGVyJyB8ICdkYXRhJyB8ICdmb290ZXInLCAuLi5yb3dzOiBudW1iZXJbXSk6IHZvaWQ7XG4gICAgcGJsRm9yY2VSZW5kZXJEYXRhUm93cygpOiB2b2lkO1xuICAgIHByaXZhdGUgX3VwZGF0ZVN0aWNreUNvbHVtblN0eWxlcztcbn1cbiJdfQ==