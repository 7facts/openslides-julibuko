import { ElementRef } from '@angular/core';
/**
 * Bind to the class / style attributes of the container of a cell template.
 * For class bindings use [ngridCellClass] and for style bindings use [ngridCellStyle].
 *
 * This is like [ngClass] or [ngStyle] but not for the host of the directive but to it's parent.
 *
 * - [ngridCellClass] accepts the same type of values that [ngClass] does.
 * - [ngridCellStyle] accepts the same type of values that [ngStyle] does.
 *
 * ## Example
 *
 * We want to create a new cell type called "balance" that represents the balance of a bank account.
 * We also want to have different background color, green if the account balance if positive and red if it's negative.
 *
 * ```html
 * <div *pblNgridCellTypeDef="'balance'; value as value"
 *      [ngClass]="value < 0 ? 'balance-negative' : 'balance-positive'">{{ value  }}
 * </div>
 * ```
 *
 * The example above will work but the background will not fill the entire cell, only the `div` it is applied on.
 * This is because the container of the `div` has internal styling that apply padding (among other styles) to the cell.
 *
 * The container is controlled internally by ngrid, but you can access it's style / class attributes using this directive.
 *
 * ```html
 * <div *pblNgridCellTypeDef="'balance'; value as value"
 *      [ngridCellClass]="value < 0 ? 'balance-negative' : 'balance-positive'">{{ value  }}
 * </div>
 * ```
 *
 * > Because style / class is applied on the parent and the parent can have multiple children it is possible to apply this directive
 * on multiple children, do not do this as it will have unexpected results.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PblNgridCellStyling {
    private elRef;
    set style(value: {
        [key: string]: string;
    });
    set klass(value: string | string[] | Set<string> | {
        [klass: string]: any;
    });
    private _styleDiffer;
    private _classDiffer;
    private _parent;
    private _lastStyle;
    private _lastClass;
    constructor(elRef: ElementRef<HTMLElement>);
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    private updateParent;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PblNgridCellStyling, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PblNgridCellStyling, "[ngridCellStyle], [ngridCellClass]", never, { "style": "ngridCellStyle"; "klass": "ngridCellClass"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBCaW5kIHRvIHRoZSBjbGFzcyAvIHN0eWxlIGF0dHJpYnV0ZXMgb2YgdGhlIGNvbnRhaW5lciBvZiBhIGNlbGwgdGVtcGxhdGUuXG4gKiBGb3IgY2xhc3MgYmluZGluZ3MgdXNlIFtuZ3JpZENlbGxDbGFzc10gYW5kIGZvciBzdHlsZSBiaW5kaW5ncyB1c2UgW25ncmlkQ2VsbFN0eWxlXS5cbiAqXG4gKiBUaGlzIGlzIGxpa2UgW25nQ2xhc3NdIG9yIFtuZ1N0eWxlXSBidXQgbm90IGZvciB0aGUgaG9zdCBvZiB0aGUgZGlyZWN0aXZlIGJ1dCB0byBpdCdzIHBhcmVudC5cbiAqXG4gKiAtIFtuZ3JpZENlbGxDbGFzc10gYWNjZXB0cyB0aGUgc2FtZSB0eXBlIG9mIHZhbHVlcyB0aGF0IFtuZ0NsYXNzXSBkb2VzLlxuICogLSBbbmdyaWRDZWxsU3R5bGVdIGFjY2VwdHMgdGhlIHNhbWUgdHlwZSBvZiB2YWx1ZXMgdGhhdCBbbmdTdHlsZV0gZG9lcy5cbiAqXG4gKiAjIyBFeGFtcGxlXG4gKlxuICogV2Ugd2FudCB0byBjcmVhdGUgYSBuZXcgY2VsbCB0eXBlIGNhbGxlZCBcImJhbGFuY2VcIiB0aGF0IHJlcHJlc2VudHMgdGhlIGJhbGFuY2Ugb2YgYSBiYW5rIGFjY291bnQuXG4gKiBXZSBhbHNvIHdhbnQgdG8gaGF2ZSBkaWZmZXJlbnQgYmFja2dyb3VuZCBjb2xvciwgZ3JlZW4gaWYgdGhlIGFjY291bnQgYmFsYW5jZSBpZiBwb3NpdGl2ZSBhbmQgcmVkIGlmIGl0J3MgbmVnYXRpdmUuXG4gKlxuICogYGBgaHRtbFxuICogPGRpdiAqcGJsTmdyaWRDZWxsVHlwZURlZj1cIidiYWxhbmNlJzsgdmFsdWUgYXMgdmFsdWVcIlxuICogICAgICBbbmdDbGFzc109XCJ2YWx1ZSA8IDAgPyAnYmFsYW5jZS1uZWdhdGl2ZScgOiAnYmFsYW5jZS1wb3NpdGl2ZSdcIj57eyB2YWx1ZSAgfX1cbiAqIDwvZGl2PlxuICogYGBgXG4gKlxuICogVGhlIGV4YW1wbGUgYWJvdmUgd2lsbCB3b3JrIGJ1dCB0aGUgYmFja2dyb3VuZCB3aWxsIG5vdCBmaWxsIHRoZSBlbnRpcmUgY2VsbCwgb25seSB0aGUgYGRpdmAgaXQgaXMgYXBwbGllZCBvbi5cbiAqIFRoaXMgaXMgYmVjYXVzZSB0aGUgY29udGFpbmVyIG9mIHRoZSBgZGl2YCBoYXMgaW50ZXJuYWwgc3R5bGluZyB0aGF0IGFwcGx5IHBhZGRpbmcgKGFtb25nIG90aGVyIHN0eWxlcykgdG8gdGhlIGNlbGwuXG4gKlxuICogVGhlIGNvbnRhaW5lciBpcyBjb250cm9sbGVkIGludGVybmFsbHkgYnkgbmdyaWQsIGJ1dCB5b3UgY2FuIGFjY2VzcyBpdCdzIHN0eWxlIC8gY2xhc3MgYXR0cmlidXRlcyB1c2luZyB0aGlzIGRpcmVjdGl2ZS5cbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2ICpwYmxOZ3JpZENlbGxUeXBlRGVmPVwiJ2JhbGFuY2UnOyB2YWx1ZSBhcyB2YWx1ZVwiXG4gKiAgICAgIFtuZ3JpZENlbGxDbGFzc109XCJ2YWx1ZSA8IDAgPyAnYmFsYW5jZS1uZWdhdGl2ZScgOiAnYmFsYW5jZS1wb3NpdGl2ZSdcIj57eyB2YWx1ZSAgfX1cbiAqIDwvZGl2PlxuICogYGBgXG4gKlxuICogPiBCZWNhdXNlIHN0eWxlIC8gY2xhc3MgaXMgYXBwbGllZCBvbiB0aGUgcGFyZW50IGFuZCB0aGUgcGFyZW50IGNhbiBoYXZlIG11bHRpcGxlIGNoaWxkcmVuIGl0IGlzIHBvc3NpYmxlIHRvIGFwcGx5IHRoaXMgZGlyZWN0aXZlXG4gKiBvbiBtdWx0aXBsZSBjaGlsZHJlbiwgZG8gbm90IGRvIHRoaXMgYXMgaXQgd2lsbCBoYXZlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUGJsTmdyaWRDZWxsU3R5bGluZyB7XG4gICAgcHJpdmF0ZSBlbFJlZjtcbiAgICBzZXQgc3R5bGUodmFsdWU6IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xuICAgIH0pO1xuICAgIHNldCBrbGFzcyh2YWx1ZTogc3RyaW5nIHwgc3RyaW5nW10gfCBTZXQ8c3RyaW5nPiB8IHtcbiAgICAgICAgW2tsYXNzOiBzdHJpbmddOiBhbnk7XG4gICAgfSk7XG4gICAgcHJpdmF0ZSBfc3R5bGVEaWZmZXI7XG4gICAgcHJpdmF0ZSBfY2xhc3NEaWZmZXI7XG4gICAgcHJpdmF0ZSBfcGFyZW50O1xuICAgIHByaXZhdGUgX2xhc3RTdHlsZTtcbiAgICBwcml2YXRlIF9sYXN0Q2xhc3M7XG4gICAgY29uc3RydWN0b3IoZWxSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+KTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICBwcml2YXRlIHVwZGF0ZVBhcmVudDtcbn1cbiJdfQ==