import { TemplateRef, OnInit, OnDestroy, ComponentFactory, ComponentRef, Injector } from '@angular/core';
import { PblColumn } from '../columns/column';
import { PblNgridComponent } from '../ngrid.component';
import { MetaCellContext, PblNgridMetaCellContext } from '../context/index';
import { PblNgridHeaderCellComponent } from './cell';
import { PblNgridSingleRegistryMap, PblNgridMultiRegistryMap, PblNgridRegistryService } from '../services/grid-registry.service';
import * as ɵngcc0 from '@angular/core';
export declare abstract class PblNgridSingleTemplateRegistry<T, TKind extends keyof PblNgridSingleRegistryMap> implements OnInit, OnDestroy {
    tRef: TemplateRef<T>;
    protected registry: PblNgridRegistryService;
    abstract readonly kind: TKind;
    constructor(tRef: TemplateRef<T>, registry: PblNgridRegistryService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PblNgridSingleTemplateRegistry<any, any>, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PblNgridSingleTemplateRegistry<any, any>, never, never, {}, {}, never>;
}
export declare abstract class PblNgridMultiTemplateRegistry<T, TKind extends keyof PblNgridMultiRegistryMap> implements OnInit, OnDestroy {
    tRef: TemplateRef<T>;
    protected registry: PblNgridRegistryService;
    abstract readonly name: string;
    abstract readonly kind: TKind;
    constructor(tRef: TemplateRef<T>, registry: PblNgridRegistryService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PblNgridMultiTemplateRegistry<any, any>, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PblNgridMultiTemplateRegistry<any, any>, never, never, {}, {}, never>;
}
export declare abstract class PblNgridMultiComponentRegistry<T, TKind extends keyof PblNgridMultiRegistryMap> {
    abstract readonly name: string;
    abstract readonly kind: TKind;
    /**
     * When set to true the component will be created with projected content.
     * Setting to true does not ensure projection, the projection is determined by the context creating the component.
     *
     * For example, In the context of `dataHeaderExtensions` the projection will be the content of the cell, other implementations
     * might not include a projection.
     */
    readonly projectContent?: boolean;
    abstract getFactory(context: PblNgridMetaCellContext<any, PblColumn>): ComponentFactory<T>;
    onCreated?(context: PblNgridMetaCellContext<any, PblColumn>, cmpRef: ComponentRef<T>): void;
}
export declare class PblNgridDataHeaderExtensionContext<T = any> extends MetaCellContext<T, PblColumn> {
    readonly injector: Injector;
    protected constructor();
    static createDateHeaderCtx<T = any>(headerCell: PblNgridHeaderCellComponent<PblColumn>, injector: Injector): PblNgridDataHeaderExtensionContext<T>;
}
export interface PblNgridDataHeaderExtensionRef<T = any> {
    shouldRender?(context: PblNgridDataHeaderExtensionContext<T>): boolean;
}
/**
 * A generic, multi-purpose template reference for data header extensions.
 * The template's context is `PblNgridDataHeaderExtensionContext`:
 *
 * ```ts
 * interface PblNgridDataHeaderExtensionContext {
 *   col: PblMetaColumn;
 *   grid: PblNgridComponent<any>;
 *   injector: Injector;
 * }
 * ```
 *
 * By default it will render if registered but it is possible to provide a predicate to conditionally load it.
 *
 * ```html
 * <div *pblNgridHeaderExtensionRef="let ctx"></div>
 * ````
 *
 * Or with a `shouldRender` predicate:
 *
 * ```html
 * <div *pblNgridHeaderExtensionRef="shouldRender; let ctx"></div>
 * ```
 *
 * And in the component the template is defined on:
 *
 * ```ts
 * class MyComponent {
 *
 *   shouldRender = (context: PblNgridDataHeaderExtensionContext) => {
 *     // Some code returning true or false
 *   }
 * }
 * ```
 *
 * Note that the `shouldRender` predicate is run once when the header initialize.
 */
export declare class PblNgridHeaderExtensionRefDirective extends PblNgridMultiTemplateRegistry<PblNgridDataHeaderExtensionContext, 'dataHeaderExtensions'> implements PblNgridDataHeaderExtensionRef {
    private static _id;
    readonly name: string;
    readonly kind: 'dataHeaderExtensions';
    shouldRender?: (context: PblNgridDataHeaderExtensionContext) => boolean;
    constructor(tRef: TemplateRef<PblNgridDataHeaderExtensionContext>, registry: PblNgridRegistryService);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PblNgridHeaderExtensionRefDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PblNgridHeaderExtensionRefDirective, "[pblNgridHeaderExtensionRef]", never, { "shouldRender": "pblNgridHeaderExtensionRef"; }, {}, never>;
}
/**
 * Marks the element as the display element for pagination
 */
export declare class PblNgridPaginatorRefDirective extends PblNgridSingleTemplateRegistry<{
    $implicit: PblNgridComponent<any>;
}, 'paginator'> {
    readonly kind: 'paginator';
    constructor(tRef: TemplateRef<{
        $implicit: PblNgridComponent<any>;
    }>, registry: PblNgridRegistryService);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PblNgridPaginatorRefDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PblNgridPaginatorRefDirective, "[pblNgridPaginatorRef]", never, {}, {}, never>;
}
/**
 * Marks the element as the display element when grid has no data.
 *
 * @example
 * ```html
 *   <pbl-ngrid>
 *     <div *pblNgridNoDataRef style="height: 100%; display: flex; align-items: center; justify-content: center">
 *       <span>No Data</span>
 *     </div>
 *   </pbl-ngrid>
 * ```
 */
export declare class PblNgridNoDataRefDirective extends PblNgridSingleTemplateRegistry<{
    $implicit: PblNgridComponent<any>;
}, 'noData'> {
    readonly kind: 'noData';
    constructor(tRef: TemplateRef<{
        $implicit: PblNgridComponent<any>;
    }>, registry: PblNgridRegistryService);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PblNgridNoDataRefDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PblNgridNoDataRefDirective, "[pblNgridNoDataRef]", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0cnkuZGlyZWN0aXZlcy5kLnRzIiwic291cmNlcyI6WyJyZWdpc3RyeS5kaXJlY3RpdmVzLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZW1wbGF0ZVJlZiwgT25Jbml0LCBPbkRlc3Ryb3ksIENvbXBvbmVudEZhY3RvcnksIENvbXBvbmVudFJlZiwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBibENvbHVtbiB9IGZyb20gJy4uL2NvbHVtbnMvY29sdW1uJztcbmltcG9ydCB7IFBibE5ncmlkQ29tcG9uZW50IH0gZnJvbSAnLi4vbmdyaWQuY29tcG9uZW50JztcbmltcG9ydCB7IE1ldGFDZWxsQ29udGV4dCwgUGJsTmdyaWRNZXRhQ2VsbENvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L2luZGV4JztcbmltcG9ydCB7IFBibE5ncmlkSGVhZGVyQ2VsbENvbXBvbmVudCB9IGZyb20gJy4vY2VsbCc7XG5pbXBvcnQgeyBQYmxOZ3JpZFNpbmdsZVJlZ2lzdHJ5TWFwLCBQYmxOZ3JpZE11bHRpUmVnaXN0cnlNYXAsIFBibE5ncmlkUmVnaXN0cnlTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZ3JpZC1yZWdpc3RyeS5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIFBibE5ncmlkU2luZ2xlVGVtcGxhdGVSZWdpc3RyeTxULCBUS2luZCBleHRlbmRzIGtleW9mIFBibE5ncmlkU2luZ2xlUmVnaXN0cnlNYXA+IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHRSZWY6IFRlbXBsYXRlUmVmPFQ+O1xuICAgIHByb3RlY3RlZCByZWdpc3RyeTogUGJsTmdyaWRSZWdpc3RyeVNlcnZpY2U7XG4gICAgYWJzdHJhY3QgcmVhZG9ubHkga2luZDogVEtpbmQ7XG4gICAgY29uc3RydWN0b3IodFJlZjogVGVtcGxhdGVSZWY8VD4sIHJlZ2lzdHJ5OiBQYmxOZ3JpZFJlZ2lzdHJ5U2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgUGJsTmdyaWRNdWx0aVRlbXBsYXRlUmVnaXN0cnk8VCwgVEtpbmQgZXh0ZW5kcyBrZXlvZiBQYmxOZ3JpZE11bHRpUmVnaXN0cnlNYXA+IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHRSZWY6IFRlbXBsYXRlUmVmPFQ+O1xuICAgIHByb3RlY3RlZCByZWdpc3RyeTogUGJsTmdyaWRSZWdpc3RyeVNlcnZpY2U7XG4gICAgYWJzdHJhY3QgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICAgIGFic3RyYWN0IHJlYWRvbmx5IGtpbmQ6IFRLaW5kO1xuICAgIGNvbnN0cnVjdG9yKHRSZWY6IFRlbXBsYXRlUmVmPFQ+LCByZWdpc3RyeTogUGJsTmdyaWRSZWdpc3RyeVNlcnZpY2UpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIFBibE5ncmlkTXVsdGlDb21wb25lbnRSZWdpc3RyeTxULCBUS2luZCBleHRlbmRzIGtleW9mIFBibE5ncmlkTXVsdGlSZWdpc3RyeU1hcD4ge1xuICAgIGFic3RyYWN0IHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgICBhYnN0cmFjdCByZWFkb25seSBraW5kOiBUS2luZDtcbiAgICAvKipcbiAgICAgKiBXaGVuIHNldCB0byB0cnVlIHRoZSBjb21wb25lbnQgd2lsbCBiZSBjcmVhdGVkIHdpdGggcHJvamVjdGVkIGNvbnRlbnQuXG4gICAgICogU2V0dGluZyB0byB0cnVlIGRvZXMgbm90IGVuc3VyZSBwcm9qZWN0aW9uLCB0aGUgcHJvamVjdGlvbiBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBjb250ZXh0IGNyZWF0aW5nIHRoZSBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBGb3IgZXhhbXBsZSwgSW4gdGhlIGNvbnRleHQgb2YgYGRhdGFIZWFkZXJFeHRlbnNpb25zYCB0aGUgcHJvamVjdGlvbiB3aWxsIGJlIHRoZSBjb250ZW50IG9mIHRoZSBjZWxsLCBvdGhlciBpbXBsZW1lbnRhdGlvbnNcbiAgICAgKiBtaWdodCBub3QgaW5jbHVkZSBhIHByb2plY3Rpb24uXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJvamVjdENvbnRlbnQ/OiBib29sZWFuO1xuICAgIGFic3RyYWN0IGdldEZhY3RvcnkoY29udGV4dDogUGJsTmdyaWRNZXRhQ2VsbENvbnRleHQ8YW55LCBQYmxDb2x1bW4+KTogQ29tcG9uZW50RmFjdG9yeTxUPjtcbiAgICBvbkNyZWF0ZWQ/KGNvbnRleHQ6IFBibE5ncmlkTWV0YUNlbGxDb250ZXh0PGFueSwgUGJsQ29sdW1uPiwgY21wUmVmOiBDb21wb25lbnRSZWY8VD4pOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUGJsTmdyaWREYXRhSGVhZGVyRXh0ZW5zaW9uQ29udGV4dDxUID0gYW55PiBleHRlbmRzIE1ldGFDZWxsQ29udGV4dDxULCBQYmxDb2x1bW4+IHtcbiAgICByZWFkb25seSBpbmplY3RvcjogSW5qZWN0b3I7XG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKCk7XG4gICAgc3RhdGljIGNyZWF0ZURhdGVIZWFkZXJDdHg8VCA9IGFueT4oaGVhZGVyQ2VsbDogUGJsTmdyaWRIZWFkZXJDZWxsQ29tcG9uZW50PFBibENvbHVtbj4sIGluamVjdG9yOiBJbmplY3Rvcik6IFBibE5ncmlkRGF0YUhlYWRlckV4dGVuc2lvbkNvbnRleHQ8VD47XG59XG5leHBvcnQgaW50ZXJmYWNlIFBibE5ncmlkRGF0YUhlYWRlckV4dGVuc2lvblJlZjxUID0gYW55PiB7XG4gICAgc2hvdWxkUmVuZGVyPyhjb250ZXh0OiBQYmxOZ3JpZERhdGFIZWFkZXJFeHRlbnNpb25Db250ZXh0PFQ+KTogYm9vbGVhbjtcbn1cbi8qKlxuICogQSBnZW5lcmljLCBtdWx0aS1wdXJwb3NlIHRlbXBsYXRlIHJlZmVyZW5jZSBmb3IgZGF0YSBoZWFkZXIgZXh0ZW5zaW9ucy5cbiAqIFRoZSB0ZW1wbGF0ZSdzIGNvbnRleHQgaXMgYFBibE5ncmlkRGF0YUhlYWRlckV4dGVuc2lvbkNvbnRleHRgOlxuICpcbiAqIGBgYHRzXG4gKiBpbnRlcmZhY2UgUGJsTmdyaWREYXRhSGVhZGVyRXh0ZW5zaW9uQ29udGV4dCB7XG4gKiAgIGNvbDogUGJsTWV0YUNvbHVtbjtcbiAqICAgZ3JpZDogUGJsTmdyaWRDb21wb25lbnQ8YW55PjtcbiAqICAgaW5qZWN0b3I6IEluamVjdG9yO1xuICogfVxuICogYGBgXG4gKlxuICogQnkgZGVmYXVsdCBpdCB3aWxsIHJlbmRlciBpZiByZWdpc3RlcmVkIGJ1dCBpdCBpcyBwb3NzaWJsZSB0byBwcm92aWRlIGEgcHJlZGljYXRlIHRvIGNvbmRpdGlvbmFsbHkgbG9hZCBpdC5cbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2ICpwYmxOZ3JpZEhlYWRlckV4dGVuc2lvblJlZj1cImxldCBjdHhcIj48L2Rpdj5cbiAqIGBgYGBcbiAqXG4gKiBPciB3aXRoIGEgYHNob3VsZFJlbmRlcmAgcHJlZGljYXRlOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgKnBibE5ncmlkSGVhZGVyRXh0ZW5zaW9uUmVmPVwic2hvdWxkUmVuZGVyOyBsZXQgY3R4XCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBBbmQgaW4gdGhlIGNvbXBvbmVudCB0aGUgdGVtcGxhdGUgaXMgZGVmaW5lZCBvbjpcbiAqXG4gKiBgYGB0c1xuICogY2xhc3MgTXlDb21wb25lbnQge1xuICpcbiAqICAgc2hvdWxkUmVuZGVyID0gKGNvbnRleHQ6IFBibE5ncmlkRGF0YUhlYWRlckV4dGVuc2lvbkNvbnRleHQpID0+IHtcbiAqICAgICAvLyBTb21lIGNvZGUgcmV0dXJuaW5nIHRydWUgb3IgZmFsc2VcbiAqICAgfVxuICogfVxuICogYGBgXG4gKlxuICogTm90ZSB0aGF0IHRoZSBgc2hvdWxkUmVuZGVyYCBwcmVkaWNhdGUgaXMgcnVuIG9uY2Ugd2hlbiB0aGUgaGVhZGVyIGluaXRpYWxpemUuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBibE5ncmlkSGVhZGVyRXh0ZW5zaW9uUmVmRGlyZWN0aXZlIGV4dGVuZHMgUGJsTmdyaWRNdWx0aVRlbXBsYXRlUmVnaXN0cnk8UGJsTmdyaWREYXRhSGVhZGVyRXh0ZW5zaW9uQ29udGV4dCwgJ2RhdGFIZWFkZXJFeHRlbnNpb25zJz4gaW1wbGVtZW50cyBQYmxOZ3JpZERhdGFIZWFkZXJFeHRlbnNpb25SZWYge1xuICAgIHByaXZhdGUgc3RhdGljIF9pZDtcbiAgICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkga2luZDogJ2RhdGFIZWFkZXJFeHRlbnNpb25zJztcbiAgICBzaG91bGRSZW5kZXI/OiAoY29udGV4dDogUGJsTmdyaWREYXRhSGVhZGVyRXh0ZW5zaW9uQ29udGV4dCkgPT4gYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3Rvcih0UmVmOiBUZW1wbGF0ZVJlZjxQYmxOZ3JpZERhdGFIZWFkZXJFeHRlbnNpb25Db250ZXh0PiwgcmVnaXN0cnk6IFBibE5ncmlkUmVnaXN0cnlTZXJ2aWNlKTtcbn1cbi8qKlxuICogTWFya3MgdGhlIGVsZW1lbnQgYXMgdGhlIGRpc3BsYXkgZWxlbWVudCBmb3IgcGFnaW5hdGlvblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQYmxOZ3JpZFBhZ2luYXRvclJlZkRpcmVjdGl2ZSBleHRlbmRzIFBibE5ncmlkU2luZ2xlVGVtcGxhdGVSZWdpc3RyeTx7XG4gICAgJGltcGxpY2l0OiBQYmxOZ3JpZENvbXBvbmVudDxhbnk+O1xufSwgJ3BhZ2luYXRvcic+IHtcbiAgICByZWFkb25seSBraW5kOiAncGFnaW5hdG9yJztcbiAgICBjb25zdHJ1Y3Rvcih0UmVmOiBUZW1wbGF0ZVJlZjx7XG4gICAgICAgICRpbXBsaWNpdDogUGJsTmdyaWRDb21wb25lbnQ8YW55PjtcbiAgICB9PiwgcmVnaXN0cnk6IFBibE5ncmlkUmVnaXN0cnlTZXJ2aWNlKTtcbn1cbi8qKlxuICogTWFya3MgdGhlIGVsZW1lbnQgYXMgdGhlIGRpc3BsYXkgZWxlbWVudCB3aGVuIGdyaWQgaGFzIG5vIGRhdGEuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGh0bWxcbiAqICAgPHBibC1uZ3JpZD5cbiAqICAgICA8ZGl2ICpwYmxOZ3JpZE5vRGF0YVJlZiBzdHlsZT1cImhlaWdodDogMTAwJTsgZGlzcGxheTogZmxleDsgYWxpZ24taXRlbXM6IGNlbnRlcjsganVzdGlmeS1jb250ZW50OiBjZW50ZXJcIj5cbiAqICAgICAgIDxzcGFuPk5vIERhdGE8L3NwYW4+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvcGJsLW5ncmlkPlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBibE5ncmlkTm9EYXRhUmVmRGlyZWN0aXZlIGV4dGVuZHMgUGJsTmdyaWRTaW5nbGVUZW1wbGF0ZVJlZ2lzdHJ5PHtcbiAgICAkaW1wbGljaXQ6IFBibE5ncmlkQ29tcG9uZW50PGFueT47XG59LCAnbm9EYXRhJz4ge1xuICAgIHJlYWRvbmx5IGtpbmQ6ICdub0RhdGEnO1xuICAgIGNvbnN0cnVjdG9yKHRSZWY6IFRlbXBsYXRlUmVmPHtcbiAgICAgICAgJGltcGxpY2l0OiBQYmxOZ3JpZENvbXBvbmVudDxhbnk+O1xuICAgIH0+LCByZWdpc3RyeTogUGJsTmdyaWRSZWdpc3RyeVNlcnZpY2UpO1xufVxuIl19