import { ElementRef, AfterViewInit, OnDestroy } from '@angular/core';
import { PblNgridComponent } from '../../ngrid.component';
import { PblColumn, ColumnSizeInfo } from '../../columns/index';
/**
 * A directive that listen to size changes from the element of a cell, using ResizeObserver.
 * When a change occurs it will emit it to the PblTable host of this directive, along with all other observed columns for the table.
 *
 * In other words, all columns of a table, marked with `PblColumnSizeObserver`, will be sent.
 *
 * Because most of the size changes concern all columns of a row and because ResizeObserver will emit them all in the same event
 * an entire row should emit once, with all columns.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PblColumnSizeObserver extends ColumnSizeInfo implements AfterViewInit, OnDestroy {
    get column(): PblColumn;
    set column(value: PblColumn);
    private controller;
    constructor(el: ElementRef, table: PblNgridComponent<any>);
    attachColumn(column: PblColumn): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PblColumnSizeObserver, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PblColumnSizeObserver, "pbl-ngrid-cell[observeSize], pbl-ngrid-header-cell[observeSize]", never, { "column": "observeSize"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLXNpemUtb2JzZXJ2ZXIuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImNvbHVtbi1zaXplLW9ic2VydmVyLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGJsTmdyaWRDb21wb25lbnQgfSBmcm9tICcuLi8uLi9uZ3JpZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgUGJsQ29sdW1uLCBDb2x1bW5TaXplSW5mbyB9IGZyb20gJy4uLy4uL2NvbHVtbnMvaW5kZXgnO1xuLyoqXG4gKiBBIGRpcmVjdGl2ZSB0aGF0IGxpc3RlbiB0byBzaXplIGNoYW5nZXMgZnJvbSB0aGUgZWxlbWVudCBvZiBhIGNlbGwsIHVzaW5nIFJlc2l6ZU9ic2VydmVyLlxuICogV2hlbiBhIGNoYW5nZSBvY2N1cnMgaXQgd2lsbCBlbWl0IGl0IHRvIHRoZSBQYmxUYWJsZSBob3N0IG9mIHRoaXMgZGlyZWN0aXZlLCBhbG9uZyB3aXRoIGFsbCBvdGhlciBvYnNlcnZlZCBjb2x1bW5zIGZvciB0aGUgdGFibGUuXG4gKlxuICogSW4gb3RoZXIgd29yZHMsIGFsbCBjb2x1bW5zIG9mIGEgdGFibGUsIG1hcmtlZCB3aXRoIGBQYmxDb2x1bW5TaXplT2JzZXJ2ZXJgLCB3aWxsIGJlIHNlbnQuXG4gKlxuICogQmVjYXVzZSBtb3N0IG9mIHRoZSBzaXplIGNoYW5nZXMgY29uY2VybiBhbGwgY29sdW1ucyBvZiBhIHJvdyBhbmQgYmVjYXVzZSBSZXNpemVPYnNlcnZlciB3aWxsIGVtaXQgdGhlbSBhbGwgaW4gdGhlIHNhbWUgZXZlbnRcbiAqIGFuIGVudGlyZSByb3cgc2hvdWxkIGVtaXQgb25jZSwgd2l0aCBhbGwgY29sdW1ucy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUGJsQ29sdW1uU2l6ZU9ic2VydmVyIGV4dGVuZHMgQ29sdW1uU2l6ZUluZm8gaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICAgIGdldCBjb2x1bW4oKTogUGJsQ29sdW1uO1xuICAgIHNldCBjb2x1bW4odmFsdWU6IFBibENvbHVtbik7XG4gICAgcHJpdmF0ZSBjb250cm9sbGVyO1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCB0YWJsZTogUGJsTmdyaWRDb21wb25lbnQ8YW55Pik7XG4gICAgYXR0YWNoQ29sdW1uKGNvbHVtbjogUGJsQ29sdW1uKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19