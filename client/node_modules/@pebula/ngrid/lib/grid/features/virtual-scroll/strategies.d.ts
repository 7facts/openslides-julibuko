import { Observable } from 'rxjs';
import { OnInit, OnChanges, ElementRef } from '@angular/core';
import { ListRange } from '@angular/cdk/collections';
import { CdkVirtualScrollViewport, FixedSizeVirtualScrollStrategy, VirtualScrollStrategy } from '@angular/cdk/scrolling';
import { AutoSizeVirtualScrollStrategy, ItemSizeAverager } from '@angular/cdk-experimental/scrolling';
import { PblNgridComponent } from '../../ngrid.component';
import { NgeVirtualTableRowInfo } from './virtual-scroll-for-of';
import * as ɵngcc0 from '@angular/core';
export declare class NoVirtualScrollStrategy implements VirtualScrollStrategy {
    scrolledIndexChange: any;
    attach: (viewport: CdkVirtualScrollViewport) => void;
    detach: () => void;
    onContentScrolled: () => void;
    onDataLengthChanged: () => void;
    onContentRendered: () => void;
    onRenderedOffsetChanged: () => void;
    scrollToIndex: (index: number, behavior: ScrollBehavior) => void;
}
export declare class TableItemSizeAverager extends ItemSizeAverager {
    private rowInfo;
    addSample(range: ListRange, size: number): void;
    /**
     * A temp workaround to solve the actual vs wanted rendered row issue in `CdkVirtualScrollViewport`
     *
     * `CdkVirtualScrollViewport.getRenderedRange()` return the rows that the virtual container want's the grid to render
     * however, the actual rendered rows might be different. This is a problem especially in init, when the rendered rows are actually 0
     * but `CdkVirtualScrollViewport.getRenderedRange()` return the initial range of rows that should be rendered. This results in a wrong
     * calculation of the average item size in `ItemSizeAverager`
     *
     * SEE: https://github.com/angular/material2/blob/a9e550e5bf93cd68c342d1a50d8576d8f3812ebe/src/cdk/scrolling/virtual-scroll-viewport.ts#L212-L220
     */
    setRowInfo(rowInfo: NgeVirtualTableRowInfo): void;
}
export declare class PblNgridFixedSizeVirtualScrollStrategy extends FixedSizeVirtualScrollStrategy {
    private itemSize;
    private _ngridViewport;
    constructor(itemSize: number, minBufferPx: number, maxBufferPx: number);
    attach(viewport: CdkVirtualScrollViewport): void;
    onContentScrolled(): void;
}
export declare class TableAutoSizeVirtualScrollStrategy extends AutoSizeVirtualScrollStrategy {
    readonly averager: TableItemSizeAverager;
    constructor(minBufferPx: number, maxBufferPx: number, averager?: TableItemSizeAverager);
}
export declare function _vScrollStrategyFactory(directive: {
    _scrollStrategy: VirtualScrollStrategy;
}): VirtualScrollStrategy;
/** A virtual scroll strategy that supports unknown or dynamic size items. */
export declare class PblCdkVirtualScrollDirective implements OnInit, OnChanges, VirtualScrollStrategy {
    private grid;
    /**
   * The size of the items in the list (in pixels).
   * Valid for `vScrollFixed` only!
   *
   * Default: 20
   */
    get vScrollAuto(): number;
    set vScrollAuto(value: number);
    _vScrollAuto: number;
    /**
     * The size of the items in the list (in pixels).
     * Valid for `vScrollFixed` only!
     *
     * Default: 20
     */
    get vScrollFixed(): number;
    set vScrollFixed(value: number);
    _vScrollFixed: number;
    /**
     * The minimum amount of buffer rendered beyond the viewport (in pixels).
     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.
     *
     * Valid for `vScrollAuto` and `vScrollFixed` only!
     * Default: 100
     */
    get minBufferPx(): number;
    set minBufferPx(value: number);
    _minBufferPx: number;
    /**
     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.
     *
     * Valid for `vScrollAuto` and `vScrollFixed` only!
     * Default: 100
     */
    get maxBufferPx(): number;
    set maxBufferPx(value: number);
    _maxBufferPx: number;
    get wheelMode(): 'passive' | 'blocking' | number;
    set wheelMode(value: 'passive' | 'blocking' | number);
    _wheelMode: 'passive' | 'blocking' | number;
    /** The scroll strategy used by this directive. */
    _scrollStrategy: VirtualScrollStrategy;
    get type(): 'vScrollFixed' | 'vScrollAuto' | 'vScrollNone';
    private _type;
    constructor(el: ElementRef<HTMLElement>, grid: PblNgridComponent<any>);
    ngOnInit(): void;
    ngOnChanges(): void;
    get scrolledIndexChange(): Observable<number>;
    set scrolledIndexChange(value: Observable<number>);
    attach(viewport: CdkVirtualScrollViewport): void;
    detach(): void;
    onContentScrolled(): void;
    onDataLengthChanged(): void;
    onContentRendered(): void;
    onRenderedOffsetChanged(): void;
    scrollToIndex(index: number, behavior: ScrollBehavior): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PblCdkVirtualScrollDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PblCdkVirtualScrollDirective, "pbl-ngrid[vScrollAuto], pbl-ngrid[vScrollFixed], pbl-ngrid[vScrollNone]", never, { "vScrollAuto": "vScrollAuto"; "vScrollFixed": "vScrollFixed"; "minBufferPx": "minBufferPx"; "maxBufferPx": "maxBufferPx"; "wheelMode": "wheelMode"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyYXRlZ2llcy5kLnRzIiwic291cmNlcyI6WyJzdHJhdGVnaWVzLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBPbkluaXQsIE9uQ2hhbmdlcywgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTGlzdFJhbmdlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvbGxlY3Rpb25zJztcbmltcG9ydCB7IENka1ZpcnR1YWxTY3JvbGxWaWV3cG9ydCwgRml4ZWRTaXplVmlydHVhbFNjcm9sbFN0cmF0ZWd5LCBWaXJ0dWFsU2Nyb2xsU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jZGsvc2Nyb2xsaW5nJztcbmltcG9ydCB7IEF1dG9TaXplVmlydHVhbFNjcm9sbFN0cmF0ZWd5LCBJdGVtU2l6ZUF2ZXJhZ2VyIH0gZnJvbSAnQGFuZ3VsYXIvY2RrLWV4cGVyaW1lbnRhbC9zY3JvbGxpbmcnO1xuaW1wb3J0IHsgUGJsTmdyaWRDb21wb25lbnQgfSBmcm9tICcuLi8uLi9uZ3JpZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmdlVmlydHVhbFRhYmxlUm93SW5mbyB9IGZyb20gJy4vdmlydHVhbC1zY3JvbGwtZm9yLW9mJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5vVmlydHVhbFNjcm9sbFN0cmF0ZWd5IGltcGxlbWVudHMgVmlydHVhbFNjcm9sbFN0cmF0ZWd5IHtcbiAgICBzY3JvbGxlZEluZGV4Q2hhbmdlOiBhbnk7XG4gICAgYXR0YWNoOiAodmlld3BvcnQ6IENka1ZpcnR1YWxTY3JvbGxWaWV3cG9ydCkgPT4gdm9pZDtcbiAgICBkZXRhY2g6ICgpID0+IHZvaWQ7XG4gICAgb25Db250ZW50U2Nyb2xsZWQ6ICgpID0+IHZvaWQ7XG4gICAgb25EYXRhTGVuZ3RoQ2hhbmdlZDogKCkgPT4gdm9pZDtcbiAgICBvbkNvbnRlbnRSZW5kZXJlZDogKCkgPT4gdm9pZDtcbiAgICBvblJlbmRlcmVkT2Zmc2V0Q2hhbmdlZDogKCkgPT4gdm9pZDtcbiAgICBzY3JvbGxUb0luZGV4OiAoaW5kZXg6IG51bWJlciwgYmVoYXZpb3I6IFNjcm9sbEJlaGF2aW9yKSA9PiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGFibGVJdGVtU2l6ZUF2ZXJhZ2VyIGV4dGVuZHMgSXRlbVNpemVBdmVyYWdlciB7XG4gICAgcHJpdmF0ZSByb3dJbmZvO1xuICAgIGFkZFNhbXBsZShyYW5nZTogTGlzdFJhbmdlLCBzaXplOiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEEgdGVtcCB3b3JrYXJvdW5kIHRvIHNvbHZlIHRoZSBhY3R1YWwgdnMgd2FudGVkIHJlbmRlcmVkIHJvdyBpc3N1ZSBpbiBgQ2RrVmlydHVhbFNjcm9sbFZpZXdwb3J0YFxuICAgICAqXG4gICAgICogYENka1ZpcnR1YWxTY3JvbGxWaWV3cG9ydC5nZXRSZW5kZXJlZFJhbmdlKClgIHJldHVybiB0aGUgcm93cyB0aGF0IHRoZSB2aXJ0dWFsIGNvbnRhaW5lciB3YW50J3MgdGhlIGdyaWQgdG8gcmVuZGVyXG4gICAgICogaG93ZXZlciwgdGhlIGFjdHVhbCByZW5kZXJlZCByb3dzIG1pZ2h0IGJlIGRpZmZlcmVudC4gVGhpcyBpcyBhIHByb2JsZW0gZXNwZWNpYWxseSBpbiBpbml0LCB3aGVuIHRoZSByZW5kZXJlZCByb3dzIGFyZSBhY3R1YWxseSAwXG4gICAgICogYnV0IGBDZGtWaXJ0dWFsU2Nyb2xsVmlld3BvcnQuZ2V0UmVuZGVyZWRSYW5nZSgpYCByZXR1cm4gdGhlIGluaXRpYWwgcmFuZ2Ugb2Ygcm93cyB0aGF0IHNob3VsZCBiZSByZW5kZXJlZC4gVGhpcyByZXN1bHRzIGluIGEgd3JvbmdcbiAgICAgKiBjYWxjdWxhdGlvbiBvZiB0aGUgYXZlcmFnZSBpdGVtIHNpemUgaW4gYEl0ZW1TaXplQXZlcmFnZXJgXG4gICAgICpcbiAgICAgKiBTRUU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsMi9ibG9iL2E5ZTU1MGU1YmY5M2NkNjhjMzQyZDFhNTBkODU3NmQ4ZjM4MTJlYmUvc3JjL2Nkay9zY3JvbGxpbmcvdmlydHVhbC1zY3JvbGwtdmlld3BvcnQudHMjTDIxMi1MMjIwXG4gICAgICovXG4gICAgc2V0Um93SW5mbyhyb3dJbmZvOiBOZ2VWaXJ0dWFsVGFibGVSb3dJbmZvKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBibE5ncmlkRml4ZWRTaXplVmlydHVhbFNjcm9sbFN0cmF0ZWd5IGV4dGVuZHMgRml4ZWRTaXplVmlydHVhbFNjcm9sbFN0cmF0ZWd5IHtcbiAgICBwcml2YXRlIGl0ZW1TaXplO1xuICAgIHByaXZhdGUgX25ncmlkVmlld3BvcnQ7XG4gICAgY29uc3RydWN0b3IoaXRlbVNpemU6IG51bWJlciwgbWluQnVmZmVyUHg6IG51bWJlciwgbWF4QnVmZmVyUHg6IG51bWJlcik7XG4gICAgYXR0YWNoKHZpZXdwb3J0OiBDZGtWaXJ0dWFsU2Nyb2xsVmlld3BvcnQpOiB2b2lkO1xuICAgIG9uQ29udGVudFNjcm9sbGVkKCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUYWJsZUF1dG9TaXplVmlydHVhbFNjcm9sbFN0cmF0ZWd5IGV4dGVuZHMgQXV0b1NpemVWaXJ0dWFsU2Nyb2xsU3RyYXRlZ3kge1xuICAgIHJlYWRvbmx5IGF2ZXJhZ2VyOiBUYWJsZUl0ZW1TaXplQXZlcmFnZXI7XG4gICAgY29uc3RydWN0b3IobWluQnVmZmVyUHg6IG51bWJlciwgbWF4QnVmZmVyUHg6IG51bWJlciwgYXZlcmFnZXI/OiBUYWJsZUl0ZW1TaXplQXZlcmFnZXIpO1xufVxuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gX3ZTY3JvbGxTdHJhdGVneUZhY3RvcnkoZGlyZWN0aXZlOiB7XG4gICAgX3Njcm9sbFN0cmF0ZWd5OiBWaXJ0dWFsU2Nyb2xsU3RyYXRlZ3k7XG59KTogVmlydHVhbFNjcm9sbFN0cmF0ZWd5O1xuLyoqIEEgdmlydHVhbCBzY3JvbGwgc3RyYXRlZ3kgdGhhdCBzdXBwb3J0cyB1bmtub3duIG9yIGR5bmFtaWMgc2l6ZSBpdGVtcy4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBibENka1ZpcnR1YWxTY3JvbGxEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgVmlydHVhbFNjcm9sbFN0cmF0ZWd5IHtcbiAgICBwcml2YXRlIGdyaWQ7XG4gICAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBpdGVtcyBpbiB0aGUgbGlzdCAoaW4gcGl4ZWxzKS5cbiAgICogVmFsaWQgZm9yIGB2U2Nyb2xsRml4ZWRgIG9ubHkhXG4gICAqXG4gICAqIERlZmF1bHQ6IDIwXG4gICAqL1xuICAgIGdldCB2U2Nyb2xsQXV0bygpOiBudW1iZXI7XG4gICAgc2V0IHZTY3JvbGxBdXRvKHZhbHVlOiBudW1iZXIpO1xuICAgIF92U2Nyb2xsQXV0bzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBzaXplIG9mIHRoZSBpdGVtcyBpbiB0aGUgbGlzdCAoaW4gcGl4ZWxzKS5cbiAgICAgKiBWYWxpZCBmb3IgYHZTY3JvbGxGaXhlZGAgb25seSFcbiAgICAgKlxuICAgICAqIERlZmF1bHQ6IDIwXG4gICAgICovXG4gICAgZ2V0IHZTY3JvbGxGaXhlZCgpOiBudW1iZXI7XG4gICAgc2V0IHZTY3JvbGxGaXhlZCh2YWx1ZTogbnVtYmVyKTtcbiAgICBfdlNjcm9sbEZpeGVkOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIG1pbmltdW0gYW1vdW50IG9mIGJ1ZmZlciByZW5kZXJlZCBiZXlvbmQgdGhlIHZpZXdwb3J0IChpbiBwaXhlbHMpLlxuICAgICAqIElmIHRoZSBhbW91bnQgb2YgYnVmZmVyIGRpcHMgYmVsb3cgdGhpcyBudW1iZXIsIG1vcmUgaXRlbXMgd2lsbCBiZSByZW5kZXJlZC4gRGVmYXVsdHMgdG8gMTAwcHguXG4gICAgICpcbiAgICAgKiBWYWxpZCBmb3IgYHZTY3JvbGxBdXRvYCBhbmQgYHZTY3JvbGxGaXhlZGAgb25seSFcbiAgICAgKiBEZWZhdWx0OiAxMDBcbiAgICAgKi9cbiAgICBnZXQgbWluQnVmZmVyUHgoKTogbnVtYmVyO1xuICAgIHNldCBtaW5CdWZmZXJQeCh2YWx1ZTogbnVtYmVyKTtcbiAgICBfbWluQnVmZmVyUHg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIHBpeGVscyB3b3J0aCBvZiBidWZmZXIgdG8gcmVuZGVyIGZvciB3aGVuIHJlbmRlcmluZyBuZXcgaXRlbXMuIERlZmF1bHRzIHRvIDIwMHB4LlxuICAgICAqXG4gICAgICogVmFsaWQgZm9yIGB2U2Nyb2xsQXV0b2AgYW5kIGB2U2Nyb2xsRml4ZWRgIG9ubHkhXG4gICAgICogRGVmYXVsdDogMTAwXG4gICAgICovXG4gICAgZ2V0IG1heEJ1ZmZlclB4KCk6IG51bWJlcjtcbiAgICBzZXQgbWF4QnVmZmVyUHgodmFsdWU6IG51bWJlcik7XG4gICAgX21heEJ1ZmZlclB4OiBudW1iZXI7XG4gICAgZ2V0IHdoZWVsTW9kZSgpOiAncGFzc2l2ZScgfCAnYmxvY2tpbmcnIHwgbnVtYmVyO1xuICAgIHNldCB3aGVlbE1vZGUodmFsdWU6ICdwYXNzaXZlJyB8ICdibG9ja2luZycgfCBudW1iZXIpO1xuICAgIF93aGVlbE1vZGU6ICdwYXNzaXZlJyB8ICdibG9ja2luZycgfCBudW1iZXI7XG4gICAgLyoqIFRoZSBzY3JvbGwgc3RyYXRlZ3kgdXNlZCBieSB0aGlzIGRpcmVjdGl2ZS4gKi9cbiAgICBfc2Nyb2xsU3RyYXRlZ3k6IFZpcnR1YWxTY3JvbGxTdHJhdGVneTtcbiAgICBnZXQgdHlwZSgpOiAndlNjcm9sbEZpeGVkJyB8ICd2U2Nyb2xsQXV0bycgfCAndlNjcm9sbE5vbmUnO1xuICAgIHByaXZhdGUgX3R5cGU7XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LCBncmlkOiBQYmxOZ3JpZENvbXBvbmVudDxhbnk+KTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQ7XG4gICAgZ2V0IHNjcm9sbGVkSW5kZXhDaGFuZ2UoKTogT2JzZXJ2YWJsZTxudW1iZXI+O1xuICAgIHNldCBzY3JvbGxlZEluZGV4Q2hhbmdlKHZhbHVlOiBPYnNlcnZhYmxlPG51bWJlcj4pO1xuICAgIGF0dGFjaCh2aWV3cG9ydDogQ2RrVmlydHVhbFNjcm9sbFZpZXdwb3J0KTogdm9pZDtcbiAgICBkZXRhY2goKTogdm9pZDtcbiAgICBvbkNvbnRlbnRTY3JvbGxlZCgpOiB2b2lkO1xuICAgIG9uRGF0YUxlbmd0aENoYW5nZWQoKTogdm9pZDtcbiAgICBvbkNvbnRlbnRSZW5kZXJlZCgpOiB2b2lkO1xuICAgIG9uUmVuZGVyZWRPZmZzZXRDaGFuZ2VkKCk6IHZvaWQ7XG4gICAgc2Nyb2xsVG9JbmRleChpbmRleDogbnVtYmVyLCBiZWhhdmlvcjogU2Nyb2xsQmVoYXZpb3IpOiB2b2lkO1xufVxuIl19