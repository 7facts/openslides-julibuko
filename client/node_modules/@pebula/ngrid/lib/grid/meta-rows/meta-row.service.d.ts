import { Observable } from 'rxjs';
import { PblNgridExtensionApi } from '../../ext/grid-ext-api';
import { PblMetaRowDefinitions } from '../columns/types';
import { PblMetaRowDirective } from './meta-row.directive';
import * as ɵngcc0 from '@angular/core';
export interface MetaRowSection {
    fixed: Array<{
        index: number;
        rowDef: PblMetaRowDefinitions;
        el?: HTMLElement;
    }>;
    row: Array<{
        index: number;
        rowDef: PblMetaRowDefinitions;
        el?: HTMLElement;
    }>;
    sticky: Array<{
        index: number;
        rowDef: PblMetaRowDefinitions;
        el?: HTMLElement;
    }>;
    all: PblMetaRowDefinitions[];
}
export declare class PblNgridMetaRowService<T = any> {
    readonly extApi: PblNgridExtensionApi<T>;
    gridWidthRow: {
        rowDef: PblMetaRowDefinitions;
        el: HTMLElement;
    };
    header: MetaRowSection;
    footer: MetaRowSection;
    readonly sync: Observable<void>;
    readonly hzScroll: Observable<number>;
    private sync$;
    private hzScroll$;
    constructor(extApi: PblNgridExtensionApi<T>);
    addMetaRow(metaRow: PblMetaRowDirective): void;
    removeMetaRow(metaRow: PblMetaRowDirective): void;
    private addToSection;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PblNgridMetaRowService<any>, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<PblNgridMetaRowService<any>>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YS1yb3cuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJtZXRhLXJvdy5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUGJsTmdyaWRFeHRlbnNpb25BcGkgfSBmcm9tICcuLi8uLi9leHQvZ3JpZC1leHQtYXBpJztcbmltcG9ydCB7IFBibE1ldGFSb3dEZWZpbml0aW9ucyB9IGZyb20gJy4uL2NvbHVtbnMvdHlwZXMnO1xuaW1wb3J0IHsgUGJsTWV0YVJvd0RpcmVjdGl2ZSB9IGZyb20gJy4vbWV0YS1yb3cuZGlyZWN0aXZlJztcbmV4cG9ydCBpbnRlcmZhY2UgTWV0YVJvd1NlY3Rpb24ge1xuICAgIGZpeGVkOiBBcnJheTx7XG4gICAgICAgIGluZGV4OiBudW1iZXI7XG4gICAgICAgIHJvd0RlZjogUGJsTWV0YVJvd0RlZmluaXRpb25zO1xuICAgICAgICBlbD86IEhUTUxFbGVtZW50O1xuICAgIH0+O1xuICAgIHJvdzogQXJyYXk8e1xuICAgICAgICBpbmRleDogbnVtYmVyO1xuICAgICAgICByb3dEZWY6IFBibE1ldGFSb3dEZWZpbml0aW9ucztcbiAgICAgICAgZWw/OiBIVE1MRWxlbWVudDtcbiAgICB9PjtcbiAgICBzdGlja3k6IEFycmF5PHtcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcbiAgICAgICAgcm93RGVmOiBQYmxNZXRhUm93RGVmaW5pdGlvbnM7XG4gICAgICAgIGVsPzogSFRNTEVsZW1lbnQ7XG4gICAgfT47XG4gICAgYWxsOiBQYmxNZXRhUm93RGVmaW5pdGlvbnNbXTtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBibE5ncmlkTWV0YVJvd1NlcnZpY2U8VCA9IGFueT4ge1xuICAgIHJlYWRvbmx5IGV4dEFwaTogUGJsTmdyaWRFeHRlbnNpb25BcGk8VD47XG4gICAgZ3JpZFdpZHRoUm93OiB7XG4gICAgICAgIHJvd0RlZjogUGJsTWV0YVJvd0RlZmluaXRpb25zO1xuICAgICAgICBlbDogSFRNTEVsZW1lbnQ7XG4gICAgfTtcbiAgICBoZWFkZXI6IE1ldGFSb3dTZWN0aW9uO1xuICAgIGZvb3RlcjogTWV0YVJvd1NlY3Rpb247XG4gICAgcmVhZG9ubHkgc3luYzogT2JzZXJ2YWJsZTx2b2lkPjtcbiAgICByZWFkb25seSBoelNjcm9sbDogT2JzZXJ2YWJsZTxudW1iZXI+O1xuICAgIHByaXZhdGUgc3luYyQ7XG4gICAgcHJpdmF0ZSBoelNjcm9sbCQ7XG4gICAgY29uc3RydWN0b3IoZXh0QXBpOiBQYmxOZ3JpZEV4dGVuc2lvbkFwaTxUPik7XG4gICAgYWRkTWV0YVJvdyhtZXRhUm93OiBQYmxNZXRhUm93RGlyZWN0aXZlKTogdm9pZDtcbiAgICByZW1vdmVNZXRhUm93KG1ldGFSb3c6IFBibE1ldGFSb3dEaXJlY3RpdmUpOiB2b2lkO1xuICAgIHByaXZhdGUgYWRkVG9TZWN0aW9uO1xufVxuIl19