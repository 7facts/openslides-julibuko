import { IterableDiffers, IterableDiffer, OnDestroy } from '@angular/core';
import { PblNgridComponent, PblNgridPluginController } from '@pebula/ngrid';
import * as ɵngcc0 from '@angular/core';
declare module '@pebula/ngrid/lib/ext/types' {
    interface PblNgridPluginExtension {
        sticky?: PblNgridStickyPluginDirective;
    }
}
export declare const PLUGIN_KEY: 'sticky';
export declare function setStickyRow(grid: PblNgridComponent<any>, type: 'header' | 'footer', bulk: Array<['table' | number, boolean]>): void;
export declare function setStickyRow(grid: PblNgridComponent<any>, type: 'header' | 'footer', value: 'table' | number, state: boolean): void;
export declare function setStickyColumns(grid: PblNgridComponent<any>, type: 'start' | 'end', bulk: Array<[string | number, boolean]>): void;
export declare function setStickyColumns(grid: PblNgridComponent<any>, type: 'start' | 'end', value: string | number, state: boolean): void;
export declare class PblNgridStickyPluginDirective implements OnDestroy {
    protected readonly grid: PblNgridComponent<any>;
    protected readonly _differs: IterableDiffers;
    protected readonly pluginCtrl: PblNgridPluginController;
    /**
     * Set the header rows you want to apply sticky positioning to.
     * Valid values are:
     *   - `grid` - Literal string `grid` that will set the grid's main header row.
     *   - number  - The index of the row, for multi-header row. The index refers to the order you defined the header/headerGroup rows (base 0);
     *
     * For performance considerations only new values will trigger a change (i.e. the array should be treated as immutable).
     * Manipulating the array will not trigger a change (the sticky state will not change) unless sending a copy of it (replacing it, e.g. Array.slice())
     */
    set stickyColumnStart(value: Array<string | number>);
    /**
     * Set the footer rows you want to apply sticky positioning to.
     * Valid values are:
     *   - `grid` - Literal string `grid` that will set the grid's main footer row.
     *   - number  - The index of the row, for multi-footer row. The index refers to the order you defined the footer rows (base 0);
     *
     * For performance considerations only new values will trigger a change (i.e. the array should be treated as immutable).
     * Manipulating the array will not trigger a change (the sticky state will not change) unless sending a copy of it (replacing it, e.g. Array.slice())
     */
    set stickyColumnEnd(value: Array<string | number>);
    /**
   * Set the header rows you want to apply sticky positioning to.
   * Valid values are:
   *   - `grid` - Literal string `grid` that will set the grid's main header row.
   *   - number  - The index of the row, for multi-header row. The index refers to the order you defined the header/headerGroup rows (base 0);
   *
   * For performance considerations only new values will trigger a change (i.e. the array should be treated as immutable).
   * Manipulating the array will not trigger a change (the sticky state will not change) unless sending a copy of it (replacing it, e.g. Array.slice())
   */
    set stickyHeader(value: Array<'table' | number>);
    /**
     * Set the footer rows you want to apply sticky positioning to.
     * Valid values are:
     *   - `grid` - Literal string `grid` that will set the grid's main footer row.
     *   - number  - The index of the row, for multi-footer row. The index refers to the order you defined the footer rows (base 0);
     *
     * For performance considerations only new values will trigger a change (i.e. the array should be treated as immutable).
     * Manipulating the array will not trigger a change (the sticky state will not change) unless sending a copy of it (replacing it, e.g. Array.slice())
     */
    set stickyFooter(value: Array<'table' | number>);
    private _startDiffer;
    private _endDiffer;
    private _headerDiffer;
    private _footerDiffer;
    private _columnCache;
    private _removePlugin;
    constructor(grid: PblNgridComponent<any>, _differs: IterableDiffers, pluginCtrl: PblNgridPluginController);
    ngOnDestroy(): void;
    protected applyColumnDiff(type: 'start' | 'end', value: Array<string | number>, differ: IterableDiffer<string | number>): void;
    protected applyRowDiff(type: 'header' | 'footer', value: Array<'table' | number>, differ: IterableDiffer<'table' | number>): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PblNgridStickyPluginDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PblNgridStickyPluginDirective, "pbl-ngrid[stickyColumnStart], pbl-ngrid[stickyColumnEnd], pbl-ngrid[stickyHeader], pbl-ngrid[stickyFooter]", never, { "stickyColumnStart": "stickyColumnStart"; "stickyColumnEnd": "stickyColumnEnd"; "stickyHeader": "stickyHeader"; "stickyFooter": "stickyFooter"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RpY2t5LXBsdWdpbi5kLnRzIiwic291cmNlcyI6WyJzdGlja3ktcGx1Z2luLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJdGVyYWJsZURpZmZlcnMsIEl0ZXJhYmxlRGlmZmVyLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBibE5ncmlkQ29tcG9uZW50LCBQYmxOZ3JpZFBsdWdpbkNvbnRyb2xsZXIgfSBmcm9tICdAcGVidWxhL25ncmlkJztcbmRlY2xhcmUgbW9kdWxlICdAcGVidWxhL25ncmlkL2xpYi9leHQvdHlwZXMnIHtcbiAgICBpbnRlcmZhY2UgUGJsTmdyaWRQbHVnaW5FeHRlbnNpb24ge1xuICAgICAgICBzdGlja3k/OiBQYmxOZ3JpZFN0aWNreVBsdWdpbkRpcmVjdGl2ZTtcbiAgICB9XG59XG5leHBvcnQgZGVjbGFyZSBjb25zdCBQTFVHSU5fS0VZOiAnc3RpY2t5JztcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIHNldFN0aWNreVJvdyhncmlkOiBQYmxOZ3JpZENvbXBvbmVudDxhbnk+LCB0eXBlOiAnaGVhZGVyJyB8ICdmb290ZXInLCBidWxrOiBBcnJheTxbJ3RhYmxlJyB8IG51bWJlciwgYm9vbGVhbl0+KTogdm9pZDtcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIHNldFN0aWNreVJvdyhncmlkOiBQYmxOZ3JpZENvbXBvbmVudDxhbnk+LCB0eXBlOiAnaGVhZGVyJyB8ICdmb290ZXInLCB2YWx1ZTogJ3RhYmxlJyB8IG51bWJlciwgc3RhdGU6IGJvb2xlYW4pOiB2b2lkO1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gc2V0U3RpY2t5Q29sdW1ucyhncmlkOiBQYmxOZ3JpZENvbXBvbmVudDxhbnk+LCB0eXBlOiAnc3RhcnQnIHwgJ2VuZCcsIGJ1bGs6IEFycmF5PFtzdHJpbmcgfCBudW1iZXIsIGJvb2xlYW5dPik6IHZvaWQ7XG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBzZXRTdGlja3lDb2x1bW5zKGdyaWQ6IFBibE5ncmlkQ29tcG9uZW50PGFueT4sIHR5cGU6ICdzdGFydCcgfCAnZW5kJywgdmFsdWU6IHN0cmluZyB8IG51bWJlciwgc3RhdGU6IGJvb2xlYW4pOiB2b2lkO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUGJsTmdyaWRTdGlja3lQbHVnaW5EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByb3RlY3RlZCByZWFkb25seSBncmlkOiBQYmxOZ3JpZENvbXBvbmVudDxhbnk+O1xuICAgIHByb3RlY3RlZCByZWFkb25seSBfZGlmZmVyczogSXRlcmFibGVEaWZmZXJzO1xuICAgIHByb3RlY3RlZCByZWFkb25seSBwbHVnaW5DdHJsOiBQYmxOZ3JpZFBsdWdpbkNvbnRyb2xsZXI7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBoZWFkZXIgcm93cyB5b3Ugd2FudCB0byBhcHBseSBzdGlja3kgcG9zaXRpb25pbmcgdG8uXG4gICAgICogVmFsaWQgdmFsdWVzIGFyZTpcbiAgICAgKiAgIC0gYGdyaWRgIC0gTGl0ZXJhbCBzdHJpbmcgYGdyaWRgIHRoYXQgd2lsbCBzZXQgdGhlIGdyaWQncyBtYWluIGhlYWRlciByb3cuXG4gICAgICogICAtIG51bWJlciAgLSBUaGUgaW5kZXggb2YgdGhlIHJvdywgZm9yIG11bHRpLWhlYWRlciByb3cuIFRoZSBpbmRleCByZWZlcnMgdG8gdGhlIG9yZGVyIHlvdSBkZWZpbmVkIHRoZSBoZWFkZXIvaGVhZGVyR3JvdXAgcm93cyAoYmFzZSAwKTtcbiAgICAgKlxuICAgICAqIEZvciBwZXJmb3JtYW5jZSBjb25zaWRlcmF0aW9ucyBvbmx5IG5ldyB2YWx1ZXMgd2lsbCB0cmlnZ2VyIGEgY2hhbmdlIChpLmUuIHRoZSBhcnJheSBzaG91bGQgYmUgdHJlYXRlZCBhcyBpbW11dGFibGUpLlxuICAgICAqIE1hbmlwdWxhdGluZyB0aGUgYXJyYXkgd2lsbCBub3QgdHJpZ2dlciBhIGNoYW5nZSAodGhlIHN0aWNreSBzdGF0ZSB3aWxsIG5vdCBjaGFuZ2UpIHVubGVzcyBzZW5kaW5nIGEgY29weSBvZiBpdCAocmVwbGFjaW5nIGl0LCBlLmcuIEFycmF5LnNsaWNlKCkpXG4gICAgICovXG4gICAgc2V0IHN0aWNreUNvbHVtblN0YXJ0KHZhbHVlOiBBcnJheTxzdHJpbmcgfCBudW1iZXI+KTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGZvb3RlciByb3dzIHlvdSB3YW50IHRvIGFwcGx5IHN0aWNreSBwb3NpdGlvbmluZyB0by5cbiAgICAgKiBWYWxpZCB2YWx1ZXMgYXJlOlxuICAgICAqICAgLSBgZ3JpZGAgLSBMaXRlcmFsIHN0cmluZyBgZ3JpZGAgdGhhdCB3aWxsIHNldCB0aGUgZ3JpZCdzIG1haW4gZm9vdGVyIHJvdy5cbiAgICAgKiAgIC0gbnVtYmVyICAtIFRoZSBpbmRleCBvZiB0aGUgcm93LCBmb3IgbXVsdGktZm9vdGVyIHJvdy4gVGhlIGluZGV4IHJlZmVycyB0byB0aGUgb3JkZXIgeW91IGRlZmluZWQgdGhlIGZvb3RlciByb3dzIChiYXNlIDApO1xuICAgICAqXG4gICAgICogRm9yIHBlcmZvcm1hbmNlIGNvbnNpZGVyYXRpb25zIG9ubHkgbmV3IHZhbHVlcyB3aWxsIHRyaWdnZXIgYSBjaGFuZ2UgKGkuZS4gdGhlIGFycmF5IHNob3VsZCBiZSB0cmVhdGVkIGFzIGltbXV0YWJsZSkuXG4gICAgICogTWFuaXB1bGF0aW5nIHRoZSBhcnJheSB3aWxsIG5vdCB0cmlnZ2VyIGEgY2hhbmdlICh0aGUgc3RpY2t5IHN0YXRlIHdpbGwgbm90IGNoYW5nZSkgdW5sZXNzIHNlbmRpbmcgYSBjb3B5IG9mIGl0IChyZXBsYWNpbmcgaXQsIGUuZy4gQXJyYXkuc2xpY2UoKSlcbiAgICAgKi9cbiAgICBzZXQgc3RpY2t5Q29sdW1uRW5kKHZhbHVlOiBBcnJheTxzdHJpbmcgfCBudW1iZXI+KTtcbiAgICAvKipcbiAgICogU2V0IHRoZSBoZWFkZXIgcm93cyB5b3Ugd2FudCB0byBhcHBseSBzdGlja3kgcG9zaXRpb25pbmcgdG8uXG4gICAqIFZhbGlkIHZhbHVlcyBhcmU6XG4gICAqICAgLSBgZ3JpZGAgLSBMaXRlcmFsIHN0cmluZyBgZ3JpZGAgdGhhdCB3aWxsIHNldCB0aGUgZ3JpZCdzIG1haW4gaGVhZGVyIHJvdy5cbiAgICogICAtIG51bWJlciAgLSBUaGUgaW5kZXggb2YgdGhlIHJvdywgZm9yIG11bHRpLWhlYWRlciByb3cuIFRoZSBpbmRleCByZWZlcnMgdG8gdGhlIG9yZGVyIHlvdSBkZWZpbmVkIHRoZSBoZWFkZXIvaGVhZGVyR3JvdXAgcm93cyAoYmFzZSAwKTtcbiAgICpcbiAgICogRm9yIHBlcmZvcm1hbmNlIGNvbnNpZGVyYXRpb25zIG9ubHkgbmV3IHZhbHVlcyB3aWxsIHRyaWdnZXIgYSBjaGFuZ2UgKGkuZS4gdGhlIGFycmF5IHNob3VsZCBiZSB0cmVhdGVkIGFzIGltbXV0YWJsZSkuXG4gICAqIE1hbmlwdWxhdGluZyB0aGUgYXJyYXkgd2lsbCBub3QgdHJpZ2dlciBhIGNoYW5nZSAodGhlIHN0aWNreSBzdGF0ZSB3aWxsIG5vdCBjaGFuZ2UpIHVubGVzcyBzZW5kaW5nIGEgY29weSBvZiBpdCAocmVwbGFjaW5nIGl0LCBlLmcuIEFycmF5LnNsaWNlKCkpXG4gICAqL1xuICAgIHNldCBzdGlja3lIZWFkZXIodmFsdWU6IEFycmF5PCd0YWJsZScgfCBudW1iZXI+KTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGZvb3RlciByb3dzIHlvdSB3YW50IHRvIGFwcGx5IHN0aWNreSBwb3NpdGlvbmluZyB0by5cbiAgICAgKiBWYWxpZCB2YWx1ZXMgYXJlOlxuICAgICAqICAgLSBgZ3JpZGAgLSBMaXRlcmFsIHN0cmluZyBgZ3JpZGAgdGhhdCB3aWxsIHNldCB0aGUgZ3JpZCdzIG1haW4gZm9vdGVyIHJvdy5cbiAgICAgKiAgIC0gbnVtYmVyICAtIFRoZSBpbmRleCBvZiB0aGUgcm93LCBmb3IgbXVsdGktZm9vdGVyIHJvdy4gVGhlIGluZGV4IHJlZmVycyB0byB0aGUgb3JkZXIgeW91IGRlZmluZWQgdGhlIGZvb3RlciByb3dzIChiYXNlIDApO1xuICAgICAqXG4gICAgICogRm9yIHBlcmZvcm1hbmNlIGNvbnNpZGVyYXRpb25zIG9ubHkgbmV3IHZhbHVlcyB3aWxsIHRyaWdnZXIgYSBjaGFuZ2UgKGkuZS4gdGhlIGFycmF5IHNob3VsZCBiZSB0cmVhdGVkIGFzIGltbXV0YWJsZSkuXG4gICAgICogTWFuaXB1bGF0aW5nIHRoZSBhcnJheSB3aWxsIG5vdCB0cmlnZ2VyIGEgY2hhbmdlICh0aGUgc3RpY2t5IHN0YXRlIHdpbGwgbm90IGNoYW5nZSkgdW5sZXNzIHNlbmRpbmcgYSBjb3B5IG9mIGl0IChyZXBsYWNpbmcgaXQsIGUuZy4gQXJyYXkuc2xpY2UoKSlcbiAgICAgKi9cbiAgICBzZXQgc3RpY2t5Rm9vdGVyKHZhbHVlOiBBcnJheTwndGFibGUnIHwgbnVtYmVyPik7XG4gICAgcHJpdmF0ZSBfc3RhcnREaWZmZXI7XG4gICAgcHJpdmF0ZSBfZW5kRGlmZmVyO1xuICAgIHByaXZhdGUgX2hlYWRlckRpZmZlcjtcbiAgICBwcml2YXRlIF9mb290ZXJEaWZmZXI7XG4gICAgcHJpdmF0ZSBfY29sdW1uQ2FjaGU7XG4gICAgcHJpdmF0ZSBfcmVtb3ZlUGx1Z2luO1xuICAgIGNvbnN0cnVjdG9yKGdyaWQ6IFBibE5ncmlkQ29tcG9uZW50PGFueT4sIF9kaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMsIHBsdWdpbkN0cmw6IFBibE5ncmlkUGx1Z2luQ29udHJvbGxlcik7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgYXBwbHlDb2x1bW5EaWZmKHR5cGU6ICdzdGFydCcgfCAnZW5kJywgdmFsdWU6IEFycmF5PHN0cmluZyB8IG51bWJlcj4sIGRpZmZlcjogSXRlcmFibGVEaWZmZXI8c3RyaW5nIHwgbnVtYmVyPik6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGFwcGx5Um93RGlmZih0eXBlOiAnaGVhZGVyJyB8ICdmb290ZXInLCB2YWx1ZTogQXJyYXk8J3RhYmxlJyB8IG51bWJlcj4sIGRpZmZlcjogSXRlcmFibGVEaWZmZXI8J3RhYmxlJyB8IG51bWJlcj4pOiB2b2lkO1xufVxuIl19