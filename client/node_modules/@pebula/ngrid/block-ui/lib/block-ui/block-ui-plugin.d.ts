import { Observable } from 'rxjs';
import { OnDestroy } from '@angular/core';
import { PblNgridComponent, PblNgridPluginController } from '@pebula/ngrid';
import * as ɵngcc0 from '@angular/core';
declare module '@pebula/ngrid/lib/ext/types' {
    interface PblNgridPluginExtension {
        blockUi?: {
            blockUi: boolean | 'auto' | Observable<boolean>;
        };
    }
}
export declare class PblNgridBlockUiPluginDirective<T> implements OnDestroy {
    private grid;
    /**
     * Blocks the UI with the template defined via `PblNgridBlockUiDefDirective`.
     * If a template does not exist blocking is ignored.
     *
     * There are 3 operation modes, the modes are set based on the input value:
     *   - Auto mode (INPUT: 'auto')
     *     The UI will be blocked automatically based on datasource changes.
     *
     *    - Manual mode (INPUT: boolean)
     *     The UI will be block is toggled based on the value, i.e. `true` will block and false will unblock.
     *
     *   - Notification mode (INPUT: Observable<boolean>)
     *     Similar to Manual mode but controlled by a stream boolean value.
     *
     * **Note about Notification mode**
     * Notification mode accepts an observable, at the point where the value is set the block state does not change (if it was "on" it will stay "on" and vice versa)
     * It will only change on the first emission, this is important to understand.
     *
     * For example, if the current block state is off and we pass a `Subject`, the state remains off until the next emission
     * of the `Subject` is `true`. If it already emitted `true` before the assignment it will not be taken into account. This is why
     * using `BehaviouralSubject` is preferred.
     *
     * Also note that when sending an observable it is treated as "notifier", do not send cold observable as they get subscribed to.
     * For example, sending the returned value from `HttpClient` will probably result in 2 HTTP calls, if you already subscribed to it
     * > The default value is `auto` which means that `<pbl-ngrid blockUi>` is similar to `<pbl-ngrid blockUi="auto">`
     */
    get blockUi(): boolean | 'auto' | Observable<boolean>;
    set blockUi(value: boolean | 'auto' | Observable<boolean>);
    private _blockInProgress;
    private _blockUi;
    private _blockerEmbeddedVRef;
    private _removePlugin;
    constructor(grid: PblNgridComponent<any>, pluginCtrl: PblNgridPluginController<T>);
    ngOnDestroy(): void;
    private setupBlocker;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PblNgridBlockUiPluginDirective<any>, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PblNgridBlockUiPluginDirective<any>, "pbl-ngrid[blockUi]", ["blockUi"], { "blockUi": "blockUi"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWktcGx1Z2luLmQudHMiLCJzb3VyY2VzIjpbImJsb2NrLXVpLXBsdWdpbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGJsTmdyaWRDb21wb25lbnQsIFBibE5ncmlkUGx1Z2luQ29udHJvbGxlciB9IGZyb20gJ0BwZWJ1bGEvbmdyaWQnO1xuZGVjbGFyZSBtb2R1bGUgJ0BwZWJ1bGEvbmdyaWQvbGliL2V4dC90eXBlcycge1xuICAgIGludGVyZmFjZSBQYmxOZ3JpZFBsdWdpbkV4dGVuc2lvbiB7XG4gICAgICAgIGJsb2NrVWk/OiB7XG4gICAgICAgICAgICBibG9ja1VpOiBib29sZWFuIHwgJ2F1dG8nIHwgT2JzZXJ2YWJsZTxib29sZWFuPjtcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQYmxOZ3JpZEJsb2NrVWlQbHVnaW5EaXJlY3RpdmU8VD4gaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgZ3JpZDtcbiAgICAvKipcbiAgICAgKiBCbG9ja3MgdGhlIFVJIHdpdGggdGhlIHRlbXBsYXRlIGRlZmluZWQgdmlhIGBQYmxOZ3JpZEJsb2NrVWlEZWZEaXJlY3RpdmVgLlxuICAgICAqIElmIGEgdGVtcGxhdGUgZG9lcyBub3QgZXhpc3QgYmxvY2tpbmcgaXMgaWdub3JlZC5cbiAgICAgKlxuICAgICAqIFRoZXJlIGFyZSAzIG9wZXJhdGlvbiBtb2RlcywgdGhlIG1vZGVzIGFyZSBzZXQgYmFzZWQgb24gdGhlIGlucHV0IHZhbHVlOlxuICAgICAqICAgLSBBdXRvIG1vZGUgKElOUFVUOiAnYXV0bycpXG4gICAgICogICAgIFRoZSBVSSB3aWxsIGJlIGJsb2NrZWQgYXV0b21hdGljYWxseSBiYXNlZCBvbiBkYXRhc291cmNlIGNoYW5nZXMuXG4gICAgICpcbiAgICAgKiAgICAtIE1hbnVhbCBtb2RlIChJTlBVVDogYm9vbGVhbilcbiAgICAgKiAgICAgVGhlIFVJIHdpbGwgYmUgYmxvY2sgaXMgdG9nZ2xlZCBiYXNlZCBvbiB0aGUgdmFsdWUsIGkuZS4gYHRydWVgIHdpbGwgYmxvY2sgYW5kIGZhbHNlIHdpbGwgdW5ibG9jay5cbiAgICAgKlxuICAgICAqICAgLSBOb3RpZmljYXRpb24gbW9kZSAoSU5QVVQ6IE9ic2VydmFibGU8Ym9vbGVhbj4pXG4gICAgICogICAgIFNpbWlsYXIgdG8gTWFudWFsIG1vZGUgYnV0IGNvbnRyb2xsZWQgYnkgYSBzdHJlYW0gYm9vbGVhbiB2YWx1ZS5cbiAgICAgKlxuICAgICAqICoqTm90ZSBhYm91dCBOb3RpZmljYXRpb24gbW9kZSoqXG4gICAgICogTm90aWZpY2F0aW9uIG1vZGUgYWNjZXB0cyBhbiBvYnNlcnZhYmxlLCBhdCB0aGUgcG9pbnQgd2hlcmUgdGhlIHZhbHVlIGlzIHNldCB0aGUgYmxvY2sgc3RhdGUgZG9lcyBub3QgY2hhbmdlIChpZiBpdCB3YXMgXCJvblwiIGl0IHdpbGwgc3RheSBcIm9uXCIgYW5kIHZpY2UgdmVyc2EpXG4gICAgICogSXQgd2lsbCBvbmx5IGNoYW5nZSBvbiB0aGUgZmlyc3QgZW1pc3Npb24sIHRoaXMgaXMgaW1wb3J0YW50IHRvIHVuZGVyc3RhbmQuXG4gICAgICpcbiAgICAgKiBGb3IgZXhhbXBsZSwgaWYgdGhlIGN1cnJlbnQgYmxvY2sgc3RhdGUgaXMgb2ZmIGFuZCB3ZSBwYXNzIGEgYFN1YmplY3RgLCB0aGUgc3RhdGUgcmVtYWlucyBvZmYgdW50aWwgdGhlIG5leHQgZW1pc3Npb25cbiAgICAgKiBvZiB0aGUgYFN1YmplY3RgIGlzIGB0cnVlYC4gSWYgaXQgYWxyZWFkeSBlbWl0dGVkIGB0cnVlYCBiZWZvcmUgdGhlIGFzc2lnbm1lbnQgaXQgd2lsbCBub3QgYmUgdGFrZW4gaW50byBhY2NvdW50LiBUaGlzIGlzIHdoeVxuICAgICAqIHVzaW5nIGBCZWhhdmlvdXJhbFN1YmplY3RgIGlzIHByZWZlcnJlZC5cbiAgICAgKlxuICAgICAqIEFsc28gbm90ZSB0aGF0IHdoZW4gc2VuZGluZyBhbiBvYnNlcnZhYmxlIGl0IGlzIHRyZWF0ZWQgYXMgXCJub3RpZmllclwiLCBkbyBub3Qgc2VuZCBjb2xkIG9ic2VydmFibGUgYXMgdGhleSBnZXQgc3Vic2NyaWJlZCB0by5cbiAgICAgKiBGb3IgZXhhbXBsZSwgc2VuZGluZyB0aGUgcmV0dXJuZWQgdmFsdWUgZnJvbSBgSHR0cENsaWVudGAgd2lsbCBwcm9iYWJseSByZXN1bHQgaW4gMiBIVFRQIGNhbGxzLCBpZiB5b3UgYWxyZWFkeSBzdWJzY3JpYmVkIHRvIGl0XG4gICAgICogPiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBgYXV0b2Agd2hpY2ggbWVhbnMgdGhhdCBgPHBibC1uZ3JpZCBibG9ja1VpPmAgaXMgc2ltaWxhciB0byBgPHBibC1uZ3JpZCBibG9ja1VpPVwiYXV0b1wiPmBcbiAgICAgKi9cbiAgICBnZXQgYmxvY2tVaSgpOiBib29sZWFuIHwgJ2F1dG8nIHwgT2JzZXJ2YWJsZTxib29sZWFuPjtcbiAgICBzZXQgYmxvY2tVaSh2YWx1ZTogYm9vbGVhbiB8ICdhdXRvJyB8IE9ic2VydmFibGU8Ym9vbGVhbj4pO1xuICAgIHByaXZhdGUgX2Jsb2NrSW5Qcm9ncmVzcztcbiAgICBwcml2YXRlIF9ibG9ja1VpO1xuICAgIHByaXZhdGUgX2Jsb2NrZXJFbWJlZGRlZFZSZWY7XG4gICAgcHJpdmF0ZSBfcmVtb3ZlUGx1Z2luO1xuICAgIGNvbnN0cnVjdG9yKGdyaWQ6IFBibE5ncmlkQ29tcG9uZW50PGFueT4sIHBsdWdpbkN0cmw6IFBibE5ncmlkUGx1Z2luQ29udHJvbGxlcjxUPik7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcml2YXRlIHNldHVwQmxvY2tlcjtcbn1cbiJdfQ==