import { Injector, OnDestroy } from '@angular/core';
import { PblNgridComponent, PblNgridPluginController } from '@pebula/ngrid';
import * as ɵngcc0 from '@angular/core';
declare module '@pebula/ngrid/lib/ext/types' {
    interface PblNgridPluginExtension {
        clipboard?: PblNgridClipboardPlugin;
    }
    interface PblNgridPluginExtensionFactories {
        clipboard: keyof typeof PblNgridClipboardPlugin;
    }
}
declare module '@pebula/ngrid/lib/grid/services/config' {
    interface PblNgridConfig {
        clipboard?: {
            /** When set to true will enable the clipboard plugin on all grid instances by default. */
            autoEnable?: boolean;
            /**
             * The separator to use when multiple cells are copied
             * @default \t
             */
            cellSeparator?: string;
            /**
             * The separator to use when multiple rows are copied
             * @default \n
             */
            rowSeparator?: string;
        };
    }
}
export declare const PLUGIN_KEY: 'clipboard';
export declare class PblNgridClipboardPlugin implements OnDestroy {
    grid: PblNgridComponent<any>;
    protected injector: Injector;
    protected pluginCtrl: PblNgridPluginController;
    static create(grid: PblNgridComponent, injector: Injector): PblNgridClipboardPlugin;
    /**
     * The separator to use when multiple cells are copied.
     * If not set, taken from `PblNgridConfig.clipboard.cellSeparator`
     * @default \t
     */
    clpCellSep: string;
    /**
     * The separator to use when multiple rows are copied
     * If not set, taken from `PblNgridConfig.clipboard.rowSeparator`
     * @default \n
     */
    clpRowSep: string;
    private config;
    private clipboard;
    private _removePlugin;
    constructor(grid: PblNgridComponent<any>, injector: Injector, pluginCtrl: PblNgridPluginController);
    ngOnDestroy(): void;
    protected isCopyEvent(event: Event): boolean;
    protected doCopy(): void;
    protected getSelectedRowData(grid: PblNgridComponent): {
        minIndex: number;
        rows: any[][];
    };
    private init;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PblNgridClipboardPlugin, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PblNgridClipboardPlugin, "pbl-ngrid[clipboard]", ["pblNgridClipboard"], { "clpCellSep": "clpCellSep"; "clpRowSep": "clpRowSep"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpcGJvYXJkLnBsdWdpbi5kLnRzIiwic291cmNlcyI6WyJjbGlwYm9hcmQucGx1Z2luLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdG9yLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBibE5ncmlkQ29tcG9uZW50LCBQYmxOZ3JpZFBsdWdpbkNvbnRyb2xsZXIgfSBmcm9tICdAcGVidWxhL25ncmlkJztcbmRlY2xhcmUgbW9kdWxlICdAcGVidWxhL25ncmlkL2xpYi9leHQvdHlwZXMnIHtcbiAgICBpbnRlcmZhY2UgUGJsTmdyaWRQbHVnaW5FeHRlbnNpb24ge1xuICAgICAgICBjbGlwYm9hcmQ/OiBQYmxOZ3JpZENsaXBib2FyZFBsdWdpbjtcbiAgICB9XG4gICAgaW50ZXJmYWNlIFBibE5ncmlkUGx1Z2luRXh0ZW5zaW9uRmFjdG9yaWVzIHtcbiAgICAgICAgY2xpcGJvYXJkOiBrZXlvZiB0eXBlb2YgUGJsTmdyaWRDbGlwYm9hcmRQbHVnaW47XG4gICAgfVxufVxuZGVjbGFyZSBtb2R1bGUgJ0BwZWJ1bGEvbmdyaWQvbGliL2dyaWQvc2VydmljZXMvY29uZmlnJyB7XG4gICAgaW50ZXJmYWNlIFBibE5ncmlkQ29uZmlnIHtcbiAgICAgICAgY2xpcGJvYXJkPzoge1xuICAgICAgICAgICAgLyoqIFdoZW4gc2V0IHRvIHRydWUgd2lsbCBlbmFibGUgdGhlIGNsaXBib2FyZCBwbHVnaW4gb24gYWxsIGdyaWQgaW5zdGFuY2VzIGJ5IGRlZmF1bHQuICovXG4gICAgICAgICAgICBhdXRvRW5hYmxlPzogYm9vbGVhbjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhlIHNlcGFyYXRvciB0byB1c2Ugd2hlbiBtdWx0aXBsZSBjZWxscyBhcmUgY29waWVkXG4gICAgICAgICAgICAgKiBAZGVmYXVsdCBcXHRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY2VsbFNlcGFyYXRvcj86IHN0cmluZztcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhlIHNlcGFyYXRvciB0byB1c2Ugd2hlbiBtdWx0aXBsZSByb3dzIGFyZSBjb3BpZWRcbiAgICAgICAgICAgICAqIEBkZWZhdWx0IFxcblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICByb3dTZXBhcmF0b3I/OiBzdHJpbmc7XG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGRlY2xhcmUgY29uc3QgUExVR0lOX0tFWTogJ2NsaXBib2FyZCc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQYmxOZ3JpZENsaXBib2FyZFBsdWdpbiBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgZ3JpZDogUGJsTmdyaWRDb21wb25lbnQ8YW55PjtcbiAgICBwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yO1xuICAgIHByb3RlY3RlZCBwbHVnaW5DdHJsOiBQYmxOZ3JpZFBsdWdpbkNvbnRyb2xsZXI7XG4gICAgc3RhdGljIGNyZWF0ZShncmlkOiBQYmxOZ3JpZENvbXBvbmVudCwgaW5qZWN0b3I6IEluamVjdG9yKTogUGJsTmdyaWRDbGlwYm9hcmRQbHVnaW47XG4gICAgLyoqXG4gICAgICogVGhlIHNlcGFyYXRvciB0byB1c2Ugd2hlbiBtdWx0aXBsZSBjZWxscyBhcmUgY29waWVkLlxuICAgICAqIElmIG5vdCBzZXQsIHRha2VuIGZyb20gYFBibE5ncmlkQ29uZmlnLmNsaXBib2FyZC5jZWxsU2VwYXJhdG9yYFxuICAgICAqIEBkZWZhdWx0IFxcdFxuICAgICAqL1xuICAgIGNscENlbGxTZXA6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgc2VwYXJhdG9yIHRvIHVzZSB3aGVuIG11bHRpcGxlIHJvd3MgYXJlIGNvcGllZFxuICAgICAqIElmIG5vdCBzZXQsIHRha2VuIGZyb20gYFBibE5ncmlkQ29uZmlnLmNsaXBib2FyZC5yb3dTZXBhcmF0b3JgXG4gICAgICogQGRlZmF1bHQgXFxuXG4gICAgICovXG4gICAgY2xwUm93U2VwOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBjb25maWc7XG4gICAgcHJpdmF0ZSBjbGlwYm9hcmQ7XG4gICAgcHJpdmF0ZSBfcmVtb3ZlUGx1Z2luO1xuICAgIGNvbnN0cnVjdG9yKGdyaWQ6IFBibE5ncmlkQ29tcG9uZW50PGFueT4sIGluamVjdG9yOiBJbmplY3RvciwgcGx1Z2luQ3RybDogUGJsTmdyaWRQbHVnaW5Db250cm9sbGVyKTtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBpc0NvcHlFdmVudChldmVudDogRXZlbnQpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBkb0NvcHkoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgZ2V0U2VsZWN0ZWRSb3dEYXRhKGdyaWQ6IFBibE5ncmlkQ29tcG9uZW50KToge1xuICAgICAgICBtaW5JbmRleDogbnVtYmVyO1xuICAgICAgICByb3dzOiBhbnlbXVtdO1xuICAgIH07XG4gICAgcHJpdmF0ZSBpbml0O1xufVxuIl19