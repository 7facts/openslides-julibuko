import { ElementRef } from '@angular/core';
import { Directionality } from '@angular/cdk/bidi';
import { Overlay } from '@angular/cdk/overlay';
import { PblNgridComponent, PblNgridMultiTemplateRegistry } from '@pebula/ngrid';
import { PblNgridOverlayPanelComponentExtension } from './component-registry-extension';
import { PblNgridOverlayPanelRef } from './overlay-panel-ref';
import * as ɵngcc0 from '@angular/core';
declare module '@pebula/ngrid/lib/grid/services/grid-registry.service' {
    interface PblNgridMultiRegistryMap {
        overlayPanels?: PblNgridMultiTemplateRegistry<any, 'overlayPanels'> | PblNgridOverlayPanelComponentExtension<any>;
    }
}
export interface PblNgridOverlayPanelConfig {
    hasBackdrop?: boolean;
    backdropClass?: string;
    xPos?: 'before' | 'center' | 'after';
    yPos?: 'above' | 'center' | 'below';
    insetPos?: boolean;
}
export declare class PblNgridOverlayPanelFactory {
    private _overlay;
    private _dir;
    constructor(_overlay: Overlay, _dir: Directionality);
    create<T>(grid: PblNgridComponent<T>): PblNgridOverlayPanel<T>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PblNgridOverlayPanelFactory, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<PblNgridOverlayPanelFactory>;
}
export declare class PblNgridOverlayPanel<T = any> {
    private _overlay;
    private _dir;
    readonly grid: PblNgridComponent<T>;
    private vcRef;
    private injector;
    private _scrollStrategy;
    constructor(_overlay: Overlay, _dir: Directionality, grid: PblNgridComponent<T>);
    /**
     * Opens a panel relative to a cell element using the overlay panel extension registry template/component with the name provided in `extName`.
     * The cell element is referenced by the `columnId` and the `rowRenderPosition`.
     *
     * If the `rowRenderPosition` is "header" or "footer" then the grid's header / footer rows are targeted, otherwise the number provided should reference
     * the rendered row index to use to get the cell from.
     *
     * > Note that this helper method does not allow targeting meta cells.
     */
    openGridCell<T = any>(extName: string, columnId: string, rowRenderPosition: number | 'header' | 'footer', config?: PblNgridOverlayPanelConfig, data?: T): PblNgridOverlayPanelRef<T>;
    open<T = any>(extName: string, source: ElementRef<HTMLElement>, config?: PblNgridOverlayPanelConfig, data?: T): PblNgridOverlayPanelRef<T>;
    /**
     * This method creates the overlay from the provided menu's template and saves its
     * OverlayRef so that it can be attached to the DOM when openMenu is called.
     */
    private _createOverlay;
    /**
     * This method builds the configuration object needed to create the overlay, the OverlayState.
     * @returns OverlayConfig
     */
    private _getOverlayConfig;
    private _getTemplatePortal;
    private _getComponentPortal;
    private _setPosition;
    private findNamesExtension;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS1wYW5lbC5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbIm92ZXJsYXktcGFuZWwuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGlyZWN0aW9uYWxpdHkgfSBmcm9tICdAYW5ndWxhci9jZGsvYmlkaSc7XG5pbXBvcnQgeyBPdmVybGF5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgUGJsTmdyaWRDb21wb25lbnQsIFBibE5ncmlkTXVsdGlUZW1wbGF0ZVJlZ2lzdHJ5IH0gZnJvbSAnQHBlYnVsYS9uZ3JpZCc7XG5pbXBvcnQgeyBQYmxOZ3JpZE92ZXJsYXlQYW5lbENvbXBvbmVudEV4dGVuc2lvbiB9IGZyb20gJy4vY29tcG9uZW50LXJlZ2lzdHJ5LWV4dGVuc2lvbic7XG5pbXBvcnQgeyBQYmxOZ3JpZE92ZXJsYXlQYW5lbFJlZiB9IGZyb20gJy4vb3ZlcmxheS1wYW5lbC1yZWYnO1xuZGVjbGFyZSBtb2R1bGUgJ0BwZWJ1bGEvbmdyaWQvbGliL2dyaWQvc2VydmljZXMvZ3JpZC1yZWdpc3RyeS5zZXJ2aWNlJyB7XG4gICAgaW50ZXJmYWNlIFBibE5ncmlkTXVsdGlSZWdpc3RyeU1hcCB7XG4gICAgICAgIG92ZXJsYXlQYW5lbHM/OiBQYmxOZ3JpZE11bHRpVGVtcGxhdGVSZWdpc3RyeTxhbnksICdvdmVybGF5UGFuZWxzJz4gfCBQYmxOZ3JpZE92ZXJsYXlQYW5lbENvbXBvbmVudEV4dGVuc2lvbjxhbnk+O1xuICAgIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgUGJsTmdyaWRPdmVybGF5UGFuZWxDb25maWcge1xuICAgIGhhc0JhY2tkcm9wPzogYm9vbGVhbjtcbiAgICBiYWNrZHJvcENsYXNzPzogc3RyaW5nO1xuICAgIHhQb3M/OiAnYmVmb3JlJyB8ICdjZW50ZXInIHwgJ2FmdGVyJztcbiAgICB5UG9zPzogJ2Fib3ZlJyB8ICdjZW50ZXInIHwgJ2JlbG93JztcbiAgICBpbnNldFBvcz86IGJvb2xlYW47XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQYmxOZ3JpZE92ZXJsYXlQYW5lbEZhY3Rvcnkge1xuICAgIHByaXZhdGUgX292ZXJsYXk7XG4gICAgcHJpdmF0ZSBfZGlyO1xuICAgIGNvbnN0cnVjdG9yKF9vdmVybGF5OiBPdmVybGF5LCBfZGlyOiBEaXJlY3Rpb25hbGl0eSk7XG4gICAgY3JlYXRlPFQ+KGdyaWQ6IFBibE5ncmlkQ29tcG9uZW50PFQ+KTogUGJsTmdyaWRPdmVybGF5UGFuZWw8VD47XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQYmxOZ3JpZE92ZXJsYXlQYW5lbDxUID0gYW55PiB7XG4gICAgcHJpdmF0ZSBfb3ZlcmxheTtcbiAgICBwcml2YXRlIF9kaXI7XG4gICAgcmVhZG9ubHkgZ3JpZDogUGJsTmdyaWRDb21wb25lbnQ8VD47XG4gICAgcHJpdmF0ZSB2Y1JlZjtcbiAgICBwcml2YXRlIGluamVjdG9yO1xuICAgIHByaXZhdGUgX3Njcm9sbFN0cmF0ZWd5O1xuICAgIGNvbnN0cnVjdG9yKF9vdmVybGF5OiBPdmVybGF5LCBfZGlyOiBEaXJlY3Rpb25hbGl0eSwgZ3JpZDogUGJsTmdyaWRDb21wb25lbnQ8VD4pO1xuICAgIC8qKlxuICAgICAqIE9wZW5zIGEgcGFuZWwgcmVsYXRpdmUgdG8gYSBjZWxsIGVsZW1lbnQgdXNpbmcgdGhlIG92ZXJsYXkgcGFuZWwgZXh0ZW5zaW9uIHJlZ2lzdHJ5IHRlbXBsYXRlL2NvbXBvbmVudCB3aXRoIHRoZSBuYW1lIHByb3ZpZGVkIGluIGBleHROYW1lYC5cbiAgICAgKiBUaGUgY2VsbCBlbGVtZW50IGlzIHJlZmVyZW5jZWQgYnkgdGhlIGBjb2x1bW5JZGAgYW5kIHRoZSBgcm93UmVuZGVyUG9zaXRpb25gLlxuICAgICAqXG4gICAgICogSWYgdGhlIGByb3dSZW5kZXJQb3NpdGlvbmAgaXMgXCJoZWFkZXJcIiBvciBcImZvb3RlclwiIHRoZW4gdGhlIGdyaWQncyBoZWFkZXIgLyBmb290ZXIgcm93cyBhcmUgdGFyZ2V0ZWQsIG90aGVyd2lzZSB0aGUgbnVtYmVyIHByb3ZpZGVkIHNob3VsZCByZWZlcmVuY2VcbiAgICAgKiB0aGUgcmVuZGVyZWQgcm93IGluZGV4IHRvIHVzZSB0byBnZXQgdGhlIGNlbGwgZnJvbS5cbiAgICAgKlxuICAgICAqID4gTm90ZSB0aGF0IHRoaXMgaGVscGVyIG1ldGhvZCBkb2VzIG5vdCBhbGxvdyB0YXJnZXRpbmcgbWV0YSBjZWxscy5cbiAgICAgKi9cbiAgICBvcGVuR3JpZENlbGw8VCA9IGFueT4oZXh0TmFtZTogc3RyaW5nLCBjb2x1bW5JZDogc3RyaW5nLCByb3dSZW5kZXJQb3NpdGlvbjogbnVtYmVyIHwgJ2hlYWRlcicgfCAnZm9vdGVyJywgY29uZmlnPzogUGJsTmdyaWRPdmVybGF5UGFuZWxDb25maWcsIGRhdGE/OiBUKTogUGJsTmdyaWRPdmVybGF5UGFuZWxSZWY8VD47XG4gICAgb3BlbjxUID0gYW55PihleHROYW1lOiBzdHJpbmcsIHNvdXJjZTogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sIGNvbmZpZz86IFBibE5ncmlkT3ZlcmxheVBhbmVsQ29uZmlnLCBkYXRhPzogVCk6IFBibE5ncmlkT3ZlcmxheVBhbmVsUmVmPFQ+O1xuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGNyZWF0ZXMgdGhlIG92ZXJsYXkgZnJvbSB0aGUgcHJvdmlkZWQgbWVudSdzIHRlbXBsYXRlIGFuZCBzYXZlcyBpdHNcbiAgICAgKiBPdmVybGF5UmVmIHNvIHRoYXQgaXQgY2FuIGJlIGF0dGFjaGVkIHRvIHRoZSBET00gd2hlbiBvcGVuTWVudSBpcyBjYWxsZWQuXG4gICAgICovXG4gICAgcHJpdmF0ZSBfY3JlYXRlT3ZlcmxheTtcbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBidWlsZHMgdGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IG5lZWRlZCB0byBjcmVhdGUgdGhlIG92ZXJsYXksIHRoZSBPdmVybGF5U3RhdGUuXG4gICAgICogQHJldHVybnMgT3ZlcmxheUNvbmZpZ1xuICAgICAqL1xuICAgIHByaXZhdGUgX2dldE92ZXJsYXlDb25maWc7XG4gICAgcHJpdmF0ZSBfZ2V0VGVtcGxhdGVQb3J0YWw7XG4gICAgcHJpdmF0ZSBfZ2V0Q29tcG9uZW50UG9ydGFsO1xuICAgIHByaXZhdGUgX3NldFBvc2l0aW9uO1xuICAgIHByaXZhdGUgZmluZE5hbWVzRXh0ZW5zaW9uO1xufVxuIl19