import { AfterViewInit, ChangeDetectorRef } from '@angular/core';
import { SelectionModel } from '@angular/cdk/collections';
import { ThemePalette } from '@angular/material/core';
import { PblNgridComponent, PblNgridHeaderCellDefDirective, PblNgridCellDefDirective, PblNgridFooterCellDefDirective } from '@pebula/ngrid';
import * as ɵngcc0 from '@angular/core';
export declare class PblNgridCheckboxComponent implements AfterViewInit {
    table: PblNgridComponent<any>;
    private cdr;
    /**
     * Unique name for the checkbox column.
     * When not set, the name 'checkbox' is used.
     *
     **/
    name: string;
    /**
     * Defines the behavior when clicking on the bulk select checkbox (header).
     * There are 2 options:
     *
     * - all: Will select all items in the current collection
     * - view: Will select only the rendered items in the view
     *
     * The default value is `all`
     */
    get bulkSelectMode(): 'all' | 'view' | 'none';
    set bulkSelectMode(value: 'all' | 'view' | 'none');
    /**
     * A Custom selection model, optional.
     * If not set, the selection model from the DataSource is used.
     */
    get selection(): SelectionModel<any>;
    set selection(value: SelectionModel<any>);
    get isCheckboxDisabled(): (row: any) => boolean;
    set isCheckboxDisabled(value: (row: any) => boolean);
    get color(): ThemePalette;
    set color(value: ThemePalette);
    headerDef: PblNgridHeaderCellDefDirective<any>;
    cellDef: PblNgridCellDefDirective<any>;
    footerDef: PblNgridFooterCellDefDirective<any>;
    allSelected: boolean;
    length: number;
    private _selection;
    private _bulkSelectMode;
    private _isCheckboxDisabled;
    private _color;
    constructor(table: PblNgridComponent<any>, cdr: ChangeDetectorRef);
    ngAfterViewInit(): void;
    masterToggle(): void;
    rowItemChange(row: any): void;
    private getCollection;
    private setupSelection;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PblNgridCheckboxComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PblNgridCheckboxComponent, "pbl-ngrid-checkbox", never, { "selection": "selection"; "bulkSelectMode": "bulkSelectMode"; "isCheckboxDisabled": "isCheckboxDisabled"; "color": "color"; "name": "name"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtY2hlY2tib3guY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRhYmxlLWNoZWNrYm94LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2VsZWN0aW9uTW9kZWwgfSBmcm9tICdAYW5ndWxhci9jZGsvY29sbGVjdGlvbnMnO1xuaW1wb3J0IHsgVGhlbWVQYWxldHRlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvY29yZSc7XG5pbXBvcnQgeyBQYmxOZ3JpZENvbXBvbmVudCwgUGJsTmdyaWRIZWFkZXJDZWxsRGVmRGlyZWN0aXZlLCBQYmxOZ3JpZENlbGxEZWZEaXJlY3RpdmUsIFBibE5ncmlkRm9vdGVyQ2VsbERlZkRpcmVjdGl2ZSB9IGZyb20gJ0BwZWJ1bGEvbmdyaWQnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUGJsTmdyaWRDaGVja2JveENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICAgIHRhYmxlOiBQYmxOZ3JpZENvbXBvbmVudDxhbnk+O1xuICAgIHByaXZhdGUgY2RyO1xuICAgIC8qKlxuICAgICAqIFVuaXF1ZSBuYW1lIGZvciB0aGUgY2hlY2tib3ggY29sdW1uLlxuICAgICAqIFdoZW4gbm90IHNldCwgdGhlIG5hbWUgJ2NoZWNrYm94JyBpcyB1c2VkLlxuICAgICAqXG4gICAgICoqL1xuICAgIG5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBiZWhhdmlvciB3aGVuIGNsaWNraW5nIG9uIHRoZSBidWxrIHNlbGVjdCBjaGVja2JveCAoaGVhZGVyKS5cbiAgICAgKiBUaGVyZSBhcmUgMiBvcHRpb25zOlxuICAgICAqXG4gICAgICogLSBhbGw6IFdpbGwgc2VsZWN0IGFsbCBpdGVtcyBpbiB0aGUgY3VycmVudCBjb2xsZWN0aW9uXG4gICAgICogLSB2aWV3OiBXaWxsIHNlbGVjdCBvbmx5IHRoZSByZW5kZXJlZCBpdGVtcyBpbiB0aGUgdmlld1xuICAgICAqXG4gICAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgYGFsbGBcbiAgICAgKi9cbiAgICBnZXQgYnVsa1NlbGVjdE1vZGUoKTogJ2FsbCcgfCAndmlldycgfCAnbm9uZSc7XG4gICAgc2V0IGJ1bGtTZWxlY3RNb2RlKHZhbHVlOiAnYWxsJyB8ICd2aWV3JyB8ICdub25lJyk7XG4gICAgLyoqXG4gICAgICogQSBDdXN0b20gc2VsZWN0aW9uIG1vZGVsLCBvcHRpb25hbC5cbiAgICAgKiBJZiBub3Qgc2V0LCB0aGUgc2VsZWN0aW9uIG1vZGVsIGZyb20gdGhlIERhdGFTb3VyY2UgaXMgdXNlZC5cbiAgICAgKi9cbiAgICBnZXQgc2VsZWN0aW9uKCk6IFNlbGVjdGlvbk1vZGVsPGFueT47XG4gICAgc2V0IHNlbGVjdGlvbih2YWx1ZTogU2VsZWN0aW9uTW9kZWw8YW55Pik7XG4gICAgZ2V0IGlzQ2hlY2tib3hEaXNhYmxlZCgpOiAocm93OiBhbnkpID0+IGJvb2xlYW47XG4gICAgc2V0IGlzQ2hlY2tib3hEaXNhYmxlZCh2YWx1ZTogKHJvdzogYW55KSA9PiBib29sZWFuKTtcbiAgICBnZXQgY29sb3IoKTogVGhlbWVQYWxldHRlO1xuICAgIHNldCBjb2xvcih2YWx1ZTogVGhlbWVQYWxldHRlKTtcbiAgICBoZWFkZXJEZWY6IFBibE5ncmlkSGVhZGVyQ2VsbERlZkRpcmVjdGl2ZTxhbnk+O1xuICAgIGNlbGxEZWY6IFBibE5ncmlkQ2VsbERlZkRpcmVjdGl2ZTxhbnk+O1xuICAgIGZvb3RlckRlZjogUGJsTmdyaWRGb290ZXJDZWxsRGVmRGlyZWN0aXZlPGFueT47XG4gICAgYWxsU2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgbGVuZ3RoOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfc2VsZWN0aW9uO1xuICAgIHByaXZhdGUgX2J1bGtTZWxlY3RNb2RlO1xuICAgIHByaXZhdGUgX2lzQ2hlY2tib3hEaXNhYmxlZDtcbiAgICBwcml2YXRlIF9jb2xvcjtcbiAgICBjb25zdHJ1Y3Rvcih0YWJsZTogUGJsTmdyaWRDb21wb25lbnQ8YW55PiwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbWFzdGVyVG9nZ2xlKCk6IHZvaWQ7XG4gICAgcm93SXRlbUNoYW5nZShyb3c6IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBnZXRDb2xsZWN0aW9uO1xuICAgIHByaXZhdGUgc2V0dXBTZWxlY3Rpb247XG59XG4iXX0=