/**
 * @fileoverview added by tsickle
 * Generated from: lib/checkbox-plugin.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __decorate, __metadata } from "tslib";
import { Directive, Injector, Input, ComponentFactoryResolver } from '@angular/core';
import { UnRx } from '@pebula/utils';
import { PblNgridComponent, PblNgridPluginController, NgridPlugin } from '@pebula/ngrid';
import { PblNgridCheckboxComponent } from './table-checkbox.component';
/** @type {?} */
var PLUGIN_KEY = 'matCheckboxSelection';
var PblNgridMatCheckboxSelectionDirective = /** @class */ (function () {
    function PblNgridMatCheckboxSelectionDirective(table, cfr, injector, pluginCtrl) {
        this.table = table;
        this.cfr = cfr;
        this.injector = injector;
        this._color = 'primary';
        this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);
    }
    Object.defineProperty(PblNgridMatCheckboxSelectionDirective.prototype, "isCheckboxDisabled", {
        get: /**
         * @return {?}
         */
        function () { return this._isCheckboxDisabled; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._isCheckboxDisabled) {
                this._isCheckboxDisabled = value;
                if (this.cmpRef && value) {
                    this.cmpRef.instance.isCheckboxDisabled = value;
                    this.cmpRef.changeDetectorRef.detectChanges();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PblNgridMatCheckboxSelectionDirective.prototype, "matCheckboxSelection", {
        /**
         * Add's a selection column using material's `mat-checkbox` in the column specified.
         */
        get: /**
         * Add's a selection column using material's `mat-checkbox` in the column specified.
         * @return {?}
         */
        function () { return this._name; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._name) {
                this._name = value;
                if (!value) {
                    if (this.cmpRef) {
                        this.cmpRef.destroy();
                        this.cmpRef = undefined;
                    }
                }
                else {
                    if (!this.cmpRef) {
                        this.cmpRef = this.cfr.resolveComponentFactory(PblNgridCheckboxComponent).create(this.injector);
                        this.cmpRef.instance.table = this.table;
                        if (this._bulkSelectMode) {
                            this.cmpRef.instance.bulkSelectMode = this._bulkSelectMode;
                        }
                        this.cmpRef.instance.color = this._color;
                    }
                    if (this.isCheckboxDisabled) {
                        this.cmpRef.instance.isCheckboxDisabled = this.isCheckboxDisabled;
                    }
                    this.cmpRef.instance.name = value;
                    this.cmpRef.changeDetectorRef.detectChanges();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PblNgridMatCheckboxSelectionDirective.prototype, "bulkSelectMode", {
        /**
         * Defines the behavior when clicking on the bulk select checkbox (header).
         * There are 2 options:
         *
         * - all: Will select all items in the current collection
         * - view: Will select only the rendered items in the view
         *
         * The default value is `all`
         */
        get: /**
         * Defines the behavior when clicking on the bulk select checkbox (header).
         * There are 2 options:
         *
         * - all: Will select all items in the current collection
         * - view: Will select only the rendered items in the view
         *
         * The default value is `all`
         * @return {?}
         */
        function () { return this._bulkSelectMode; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._bulkSelectMode) {
                this._bulkSelectMode = value;
                if (this.cmpRef) {
                    this.cmpRef.instance.bulkSelectMode = value;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PblNgridMatCheckboxSelectionDirective.prototype, "matCheckboxSelectionColor", {
        get: /**
         * @return {?}
         */
        function () { return this._color; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this._color) {
                this._color = value;
                if (this.cmpRef) {
                    this.cmpRef.instance.color = value;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PblNgridMatCheckboxSelectionDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.cmpRef) {
            this.cmpRef.destroy();
        }
        this._removePlugin(this.table);
    };
    PblNgridMatCheckboxSelectionDirective.decorators = [
        { type: Directive, args: [{ selector: 'pbl-ngrid[matCheckboxSelection]' },] }
    ];
    /** @nocollapse */
    PblNgridMatCheckboxSelectionDirective.ctorParameters = function () { return [
        { type: PblNgridComponent },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: PblNgridPluginController }
    ]; };
    PblNgridMatCheckboxSelectionDirective.propDecorators = {
        isCheckboxDisabled: [{ type: Input }],
        matCheckboxSelection: [{ type: Input }],
        bulkSelectMode: [{ type: Input }],
        matCheckboxSelectionColor: [{ type: Input }]
    };
    PblNgridMatCheckboxSelectionDirective = __decorate([
        NgridPlugin({ id: PLUGIN_KEY }),
        UnRx(),
        __metadata("design:paramtypes", [PblNgridComponent,
            ComponentFactoryResolver,
            Injector,
            PblNgridPluginController])
    ], PblNgridMatCheckboxSelectionDirective);
    return PblNgridMatCheckboxSelectionDirective;
}());
export { PblNgridMatCheckboxSelectionDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PblNgridMatCheckboxSelectionDirective.prototype._name;
    /**
     * @type {?}
     * @private
     */
    PblNgridMatCheckboxSelectionDirective.prototype._bulkSelectMode;
    /**
     * @type {?}
     * @private
     */
    PblNgridMatCheckboxSelectionDirective.prototype._color;
    /**
     * @type {?}
     * @private
     */
    PblNgridMatCheckboxSelectionDirective.prototype.cmpRef;
    /**
     * @type {?}
     * @private
     */
    PblNgridMatCheckboxSelectionDirective.prototype._removePlugin;
    /**
     * @type {?}
     * @private
     */
    PblNgridMatCheckboxSelectionDirective.prototype._isCheckboxDisabled;
    /**
     * @type {?}
     * @private
     */
    PblNgridMatCheckboxSelectionDirective.prototype.table;
    /**
     * @type {?}
     * @private
     */
    PblNgridMatCheckboxSelectionDirective.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    PblNgridMatCheckboxSelectionDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,