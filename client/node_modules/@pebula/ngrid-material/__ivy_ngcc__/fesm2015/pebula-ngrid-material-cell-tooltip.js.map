{"version":3,"file":"pebula-ngrid-material-cell-tooltip.js","sources":["ng:/@pebula/ngrid-material/cell-tooltip/lib/cell-tooltip.directive.ts","ng:/@pebula/ngrid-material/cell-tooltip/lib/cell-tooltip.module.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  Injector,\n  OnDestroy,\n  Input,\n  NgZone,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { AriaDescriber, FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { Platform} from '@angular/cdk/platform';\nimport { TooltipPosition, MatTooltipDefaultOptions, MatTooltip, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_DEFAULT_OPTIONS } from '@angular/material/tooltip';\n\nimport { UnRx } from '@pebula/utils';\nimport { PblNgridComponent, PblNgridPluginController, NgridPlugin, PblNgridConfigService } from '@pebula/ngrid';\nimport { PblNgridCellEvent } from '@pebula/ngrid/target-events';\n\ndeclare module '@pebula/ngrid/lib/grid/services/config' {\n  interface PblNgridConfig {\n    cellTooltip?: CellTooltipOptions & {\n      /** When set to true will apply the default cell tooltip to ALL tables */\n      autoSetAll?: boolean;\n    };\n  }\n}\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    cellTooltip?: PblNgridCellTooltipDirective<any>;\n  }\n  interface PblNgridPluginExtensionFactories {\n    cellTooltip: keyof typeof PblNgridCellTooltipDirective;\n  }\n}\n\nconst PLUGIN_KEY: 'cellTooltip' = 'cellTooltip';\n\nconst DEFAULT_OPTIONS: CellTooltipOptions = {\n  canShow: (event: PblNgridCellEvent<any>): boolean => {\n    const element = (event.cellTarget.firstElementChild || event.cellTarget) as HTMLElement;\n    return element.scrollWidth > element.offsetWidth;\n  },\n  message: (event: PblNgridCellEvent<any>): string => {\n    return event.cellTarget.innerText;\n  }\n};\n\nexport interface CellTooltipOptions {\n  canShow?: boolean | ( (event: PblNgridCellEvent<any>) => boolean );\n  message?: (event: PblNgridCellEvent<any>) => string;\n}\n\n@NgridPlugin({ id: PLUGIN_KEY, factory: 'create' })\n@Directive({ selector: '[cellTooltip]', exportAs: 'pblOverflowTooltip' })\n@UnRx()\nexport class PblNgridCellTooltipDirective<T> implements CellTooltipOptions, OnDestroy {\n  static readonly PLUGIN_KEY: 'cellTooltip' = PLUGIN_KEY;\n\n  // tslint:disable-next-line:no-input-rename\n  @Input('cellTooltip') set canShow(value: boolean | ( (event: PblNgridCellEvent<T>) => boolean )) {\n    if (typeof value === 'function') {\n      this._canShow = value;\n    } else if ( (value as any) === '') {\n      this._canShow = undefined;\n    } else {\n      this._canShow = coerceBooleanProperty(value) ? e => true : e => false;\n    }\n  }\n\n  @Input() message: (event: PblNgridCellEvent<T>) => string;\n\n  /** See Material docs for MatTooltip */\n  @Input() position: TooltipPosition;\n  /** See Material docs for MatTooltip */\n  @Input() tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  /** See Material docs for MatTooltip */\n  @Input() showDelay: number;\n  /** See Material docs for MatTooltip */\n  @Input() hideDelay: number;\n\n  private initArgs: [ Overlay, ElementRef<any>, ScrollDispatcher, ViewContainerRef, NgZone, Platform, AriaDescriber, FocusMonitor, any, Directionality, MatTooltipDefaultOptions ];\n\n  private toolTip: MatTooltip;\n  private lastConfig: CellTooltipOptions;\n  private _removePlugin: (table: PblNgridComponent<any>) => void;\n  private _canShow: (event: PblNgridCellEvent<T>) => boolean;\n\n  constructor(private table: PblNgridComponent<any>, private injector: Injector, pluginCtrl: PblNgridPluginController) {\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n\n    const configService = injector.get(PblNgridConfigService);\n\n    this.initArgs = [\n      injector.get(Overlay),\n      null,\n      injector.get(ScrollDispatcher),\n      injector.get(ViewContainerRef),\n      injector.get(NgZone),\n      injector.get(Platform),\n      injector.get(AriaDescriber),\n      injector.get(FocusMonitor),\n      injector.get(MAT_TOOLTIP_SCROLL_STRATEGY),\n      injector.get(Directionality),\n      injector.get(MAT_TOOLTIP_DEFAULT_OPTIONS),\n    ];\n\n    configService.onUpdate('cellTooltip')\n      .pipe(UnRx(this))\n      .subscribe( cfg => this.lastConfig = cfg.curr );\n\n    if (table.isInit) {\n      this.init(pluginCtrl);\n    } else {\n      let subscription = pluginCtrl.events\n        .subscribe( event => {\n          if (event.kind === 'onInit') {\n            this.init(pluginCtrl);\n            subscription.unsubscribe();\n            subscription = undefined;\n          }\n        });\n    }\n  }\n\n  static create<T = any>(table: PblNgridComponent<any>, injector: Injector): PblNgridCellTooltipDirective<T> {\n    return new PblNgridCellTooltipDirective<T>(table, injector, PblNgridPluginController.find(table));\n  }\n\n  ngOnDestroy(): void {\n    this._removePlugin(this.table);\n    this.killTooltip();\n  }\n\n  private init(pluginCtrl: PblNgridPluginController): void {\n    // Depends on target-events plugin\n    // if it's not set, create it.\n    const targetEventsPlugin = pluginCtrl.getPlugin('targetEvents') || pluginCtrl.createPlugin('targetEvents');\n    targetEventsPlugin.cellEnter\n      .pipe(UnRx(this))\n      .subscribe( event => this.cellEnter(event) );\n\n    targetEventsPlugin.cellLeave\n      .pipe(UnRx(this))\n      .subscribe( event => this.cellLeave(event) );\n  }\n\n  private cellEnter(event: PblNgridCellEvent<T>): void {\n    this.killTooltip();\n\n    if (!this._canShow) {\n      // TODO: this will set lastConfig / default option once\n      // but if user changes lastConfig it will never update again...\n      this.canShow = (this.lastConfig && this.lastConfig.canShow) || DEFAULT_OPTIONS.canShow;\n    }\n\n    if (this._canShow(event)) {\n      const params = this.initArgs.slice() as PblNgridCellTooltipDirective<any>['initArgs'];\n      params[1] = new ElementRef<any>(event.cellTarget);\n\n      this.toolTip = new MatTooltip(...params);\n\n      const message = this.message || (this.lastConfig && this.lastConfig.message) || DEFAULT_OPTIONS.message;\n      this.toolTip.message = message(event);\n\n      if (this.position) {\n        this.toolTip.position = this.position;\n      }\n      if (this.tooltipClass) {\n        this.toolTip.tooltipClass = this.tooltipClass;\n      }\n      if (this.showDelay >= 0) {\n        this.toolTip.showDelay = this.showDelay;\n      }\n      if (this.hideDelay >= 0) {\n        this.toolTip.hideDelay = this.hideDelay;\n      }\n      this.toolTip.show();\n    }\n  }\n\n  private cellLeave(event: PblNgridCellEvent<T>): void {\n    this.killTooltip();\n  }\n\n  private killTooltip(): void {\n    if (this.toolTip) {\n      this.toolTip.hide();\n      this.toolTip.ngOnDestroy();\n      this.toolTip = undefined;\n    }\n  }\n}\n","import { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\nimport { PblNgridModule, PblNgridPluginController, PblNgridConfigService } from '@pebula/ngrid';\nimport { PblNgridTargetEventsModule } from '@pebula/ngrid/target-events';\n\nimport { PblNgridCellTooltipDirective } from './cell-tooltip.directive';\n\n@NgModule({\n  imports: [ CommonModule, MatTooltipModule, OverlayModule, PblNgridModule, PblNgridTargetEventsModule ],\n  declarations: [ PblNgridCellTooltipDirective ],\n  exports: [ PblNgridCellTooltipDirective, MatTooltipModule ],\n})\nexport class PblNgridCellTooltipModule {\n  constructor(@Optional() @SkipSelf() parentModule: PblNgridCellTooltipModule,\n              configService: PblNgridConfigService) {\n    if (parentModule) {\n      return;\n    }\n\n    PblNgridPluginController.created\n      .subscribe( event => {\n        // Do not remove the explicit reference to `PblNgridCellTooltipDirective`\n        // We use `PblNgridCellTooltipDirective.PLUGIN_KEY` to create a direct reference to `PblNgridCellTooltipDirective`\n        // which will disable dead code elimination for the `PblNgridCellTooltipDirective` plugin.\n        // If it is not set, using the plugin will only work when it is used in templates, other wise, if used programmatically (`autoSetAll`)\n        // CLI prod builds will remove the plugin's code.\n        const cellTooltipConfig = configService.get(PblNgridCellTooltipDirective.PLUGIN_KEY);\n        if (cellTooltipConfig && cellTooltipConfig.autoSetAll === true) {\n          const pluginCtrl = event.controller;\n          let subscription = pluginCtrl.events\n            .subscribe( evt => {\n              if (evt.kind === 'onInit') {\n                if (!pluginCtrl.hasPlugin(PblNgridCellTooltipDirective.PLUGIN_KEY)) {\n                  pluginCtrl.createPlugin(PblNgridCellTooltipDirective.PLUGIN_KEY);\n                }\n                subscription.unsubscribe();\n                subscription = undefined;\n              }\n            });\n        }\n      });\n  }\n}\n"]}