import { Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Input, ViewChild, Directive, ComponentFactoryResolver, Injector, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { PblNgridPluginController, PblNgridComponent, PblNgridHeaderCellDefDirective, PblNgridCellDefDirective, PblNgridFooterCellDefDirective, NgridPlugin, PblNgridModule } from '@pebula/ngrid';
import { __decorate, __metadata } from 'tslib';
import { UnRx } from '@pebula/utils';
import '@angular/cdk/collections';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/table-checkbox.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@pebula/ngrid';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/material/checkbox';

function PblNgridCheckboxComponent_ng_container_0_mat_checkbox_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-checkbox", 4);
    ɵngcc0.ɵɵlistener("click", function PblNgridCheckboxComponent_ng_container_0_mat_checkbox_1_Template_mat_checkbox_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); return $event.stopPropagation(); })("change", function PblNgridCheckboxComponent_ng_container_0_mat_checkbox_1_Template_mat_checkbox_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return $event ? ctx_r7.masterToggle() : null; });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("color", ctx_r4.color)("checked", ctx_r4.allSelected)("indeterminate", ctx_r4.length > 0 && !ctx_r4.allSelected);
} }
function PblNgridCheckboxComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, PblNgridCheckboxComponent_ng_container_0_mat_checkbox_1_Template, 1, 3, "mat-checkbox", 3);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.bulkSelectMode !== "none");
} }
function PblNgridCheckboxComponent_mat_checkbox_1_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "mat-checkbox", 5);
    ɵngcc0.ɵɵlistener("click", function PblNgridCheckboxComponent_mat_checkbox_1_Template_mat_checkbox_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); return $event.stopPropagation(); })("change", function PblNgridCheckboxComponent_mat_checkbox_1_Template_mat_checkbox_change_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const row_r8 = ctx.row; const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.rowItemChange(row_r8); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const row_r8 = ctx.row;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("color", ctx_r1.color)("disabled", ctx_r1.isCheckboxDisabled(row_r8))("checked", ctx_r1.selection.isSelected(row_r8));
} }
function PblNgridCheckboxComponent_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.length ? ctx_r2.length : "");
} }
const ALWAYS_FALSE_FN = (/**
 * @return {?}
 */
() => false);
const ɵ0 = ALWAYS_FALSE_FN;
let PblNgridCheckboxComponent = class PblNgridCheckboxComponent {
    /**
     * @param {?} table
     * @param {?} cdr
     */
    constructor(table, cdr) {
        this.table = table;
        this.cdr = cdr;
        this.allSelected = false;
        this._isCheckboxDisabled = ALWAYS_FALSE_FN;
        /** @type {?} */
        const pluginCtrl = PblNgridPluginController.find(table);
        pluginCtrl.events
            .pipe(UnRx(this))
            .subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            if (e.kind === 'onDataSource') {
                this.selection = e.curr.selection;
            }
        }));
    }
    /**
     * Defines the behavior when clicking on the bulk select checkbox (header).
     * There are 2 options:
     *
     * - all: Will select all items in the current collection
     * - view: Will select only the rendered items in the view
     *
     * The default value is `all`
     * @return {?}
     */
    get bulkSelectMode() { return this._bulkSelectMode; }
    /**
     * @param {?} value
     * @return {?}
     */
    set bulkSelectMode(value) {
        if (value !== this._bulkSelectMode) {
            this._bulkSelectMode = value;
            this.cdr.markForCheck();
            this.cdr.detectChanges();
        }
    }
    /**
     * A Custom selection model, optional.
     * If not set, the selection model from the DataSource is used.
     * @return {?}
     */
    get selection() {
        return this._selection;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selection(value) {
        if (value !== this._selection) {
            this._selection = value;
            this.setupSelection();
        }
    }
    /**
     * @return {?}
     */
    get isCheckboxDisabled() { return this._isCheckboxDisabled; }
    /**
     * @param {?} value
     * @return {?}
     */
    set isCheckboxDisabled(value) {
        if (value !== this._isCheckboxDisabled) {
            this._isCheckboxDisabled = value;
            if (!this._isCheckboxDisabled || typeof this._isCheckboxDisabled !== 'function') {
                this._isCheckboxDisabled = ALWAYS_FALSE_FN;
            }
        }
    }
    /**
     * @return {?}
     */
    get color() { return this._color; }
    /**
     * @param {?} value
     * @return {?}
     */
    set color(value) {
        if (value !== this._color) {
            this._color = value;
            if (this.table.isInit) {
                this.cdr.markForCheck();
                this.cdr.detectChanges();
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.selection && this.table.ds) {
            this.selection = this.table.ds.selection;
        }
        /** @type {?} */
        const registry = this.table.registry;
        registry.addMulti('headerCell', this.headerDef);
        registry.addMulti('tableCell', this.cellDef);
        registry.addMulti('footerCell', this.footerDef);
    }
    /**
     * @return {?}
     */
    masterToggle() {
        if (this.allSelected) {
            this.selection.clear();
        }
        else {
            /** @type {?} */
            const selected = this.getCollection().filter((/**
             * @param {?} data
             * @return {?}
             */
            data => !this._isCheckboxDisabled(data)));
            this.selection.select(...selected);
        }
    }
    /**
     * @param {?} row
     * @return {?}
     */
    rowItemChange(row) {
        this.selection.toggle(row);
        this.cdr.markForCheck();
        this.cdr.detectChanges();
    }
    /**
     * @private
     * @return {?}
     */
    getCollection() {
        const { ds } = this.table;
        return this.bulkSelectMode === 'view' ? ds.renderedData : ds.source;
    }
    /**
     * @private
     * @return {?}
     */
    setupSelection() {
        UnRx.kill(this, this.table);
        if (this._selection) {
            this.length = this.selection.selected.length;
            this.selection.changed
                .pipe(UnRx(this, this.table))
                .subscribe((/**
             * @return {?}
             */
            () => {
                const { length } = this.getCollection().filter((/**
                 * @param {?} data
                 * @return {?}
                 */
                data => !this._isCheckboxDisabled(data)));
                this.allSelected = !this.selection.isEmpty() && this.selection.selected.length === length;
                this.length = this.selection.selected.length;
                this.cdr.markForCheck();
                this.cdr.detectChanges();
            }));
        }
        else {
            this.length = 0;
        }
    }
};
PblNgridCheckboxComponent.ɵfac = function PblNgridCheckboxComponent_Factory(t) { return new (t || PblNgridCheckboxComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.PblNgridComponent), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
PblNgridCheckboxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PblNgridCheckboxComponent, selectors: [["pbl-ngrid-checkbox"]], viewQuery: function PblNgridCheckboxComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(PblNgridHeaderCellDefDirective, true);
        ɵngcc0.ɵɵstaticViewQuery(PblNgridCellDefDirective, true);
        ɵngcc0.ɵɵstaticViewQuery(PblNgridFooterCellDefDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerDef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cellDef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerDef = _t.first);
    } }, inputs: { selection: "selection", bulkSelectMode: "bulkSelectMode", isCheckboxDisabled: "isCheckboxDisabled", color: "color", name: "name" }, decls: 3, vars: 3, consts: [[4, "pblNgridHeaderCellDef"], ["style", "overflow: initial", 3, "color", "disabled", "checked", "click", "change", 4, "pblNgridCellDef"], [4, "pblNgridFooterCellDef"], ["style", "overflow: initial", 3, "color", "checked", "indeterminate", "click", "change", 4, "ngIf"], [2, "overflow", "initial", 3, "color", "checked", "indeterminate", "click", "change"], [2, "overflow", "initial", 3, "color", "disabled", "checked", "click", "change"]], template: function PblNgridCheckboxComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, PblNgridCheckboxComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
        ɵngcc0.ɵɵtemplate(1, PblNgridCheckboxComponent_mat_checkbox_1_Template, 1, 3, "mat-checkbox", 1);
        ɵngcc0.ɵɵtemplate(2, PblNgridCheckboxComponent_span_2_Template, 2, 1, "span", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("pblNgridHeaderCellDef", ctx.name);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("pblNgridCellDef", ctx.name);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("pblNgridFooterCellDef", ctx.name);
    } }, directives: [ɵngcc1.PblNgridHeaderCellDefDirective, ɵngcc1.PblNgridCellDefDirective, ɵngcc1.PblNgridFooterCellDefDirective, ɵngcc2.NgIf, ɵngcc3.MatCheckbox], styles: [".mat-cell.pbl-ngrid-checkbox,.mat-header-cell.pbl-ngrid-checkbox{box-sizing:content-box;flex:0 0 24px;overflow:visible}"], encapsulation: 2, changeDetection: 0 });
/** @nocollapse */
PblNgridCheckboxComponent.ctorParameters = () => [
    { type: PblNgridComponent },
    { type: ChangeDetectorRef }
];
PblNgridCheckboxComponent.propDecorators = {
    name: [{ type: Input }],
    bulkSelectMode: [{ type: Input }],
    selection: [{ type: Input }],
    isCheckboxDisabled: [{ type: Input }],
    color: [{ type: Input }],
    headerDef: [{ type: ViewChild, args: [PblNgridHeaderCellDefDirective, { static: true },] }],
    cellDef: [{ type: ViewChild, args: [PblNgridCellDefDirective, { static: true },] }],
    footerDef: [{ type: ViewChild, args: [PblNgridFooterCellDefDirective, { static: true },] }]
};
PblNgridCheckboxComponent = __decorate([
    UnRx(),
    __metadata("design:paramtypes", [PblNgridComponent, ChangeDetectorRef])
], PblNgridCheckboxComponent);
if (false) {
    /**
     * Unique name for the checkbox column.
     * When not set, the name 'checkbox' is used.
     *
     *
     * @type {?}
     */
    PblNgridCheckboxComponent.prototype.name;
    /** @type {?} */
    PblNgridCheckboxComponent.prototype.headerDef;
    /** @type {?} */
    PblNgridCheckboxComponent.prototype.cellDef;
    /** @type {?} */
    PblNgridCheckboxComponent.prototype.footerDef;
    /** @type {?} */
    PblNgridCheckboxComponent.prototype.allSelected;
    /** @type {?} */
    PblNgridCheckboxComponent.prototype.length;
    /**
     * @type {?}
     * @private
     */
    PblNgridCheckboxComponent.prototype._selection;
    /**
     * @type {?}
     * @private
     */
    PblNgridCheckboxComponent.prototype._bulkSelectMode;
    /**
     * @type {?}
     * @private
     */
    PblNgridCheckboxComponent.prototype._isCheckboxDisabled;
    /**
     * @type {?}
     * @private
     */
    PblNgridCheckboxComponent.prototype._color;
    /** @type {?} */
    PblNgridCheckboxComponent.prototype.table;
    /**
     * @type {?}
     * @private
     */
    PblNgridCheckboxComponent.prototype.cdr;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/checkbox-plugin.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const PLUGIN_KEY = 'matCheckboxSelection';
let PblNgridMatCheckboxSelectionDirective = class PblNgridMatCheckboxSelectionDirective {
    /**
     * @param {?} table
     * @param {?} cfr
     * @param {?} injector
     * @param {?} pluginCtrl
     */
    constructor(table, cfr, injector, pluginCtrl) {
        this.table = table;
        this.cfr = cfr;
        this.injector = injector;
        this._color = 'primary';
        this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);
    }
    /**
     * @return {?}
     */
    get isCheckboxDisabled() { return this._isCheckboxDisabled; }
    /**
     * @param {?} value
     * @return {?}
     */
    set isCheckboxDisabled(value) {
        if (value !== this._isCheckboxDisabled) {
            this._isCheckboxDisabled = value;
            if (this.cmpRef && value) {
                this.cmpRef.instance.isCheckboxDisabled = value;
                this.cmpRef.changeDetectorRef.detectChanges();
            }
        }
    }
    /**
     * Add's a selection column using material's `mat-checkbox` in the column specified.
     * @return {?}
     */
    get matCheckboxSelection() { return this._name; }
    /**
     * @param {?} value
     * @return {?}
     */
    set matCheckboxSelection(value) {
        if (value !== this._name) {
            this._name = value;
            if (!value) {
                if (this.cmpRef) {
                    this.cmpRef.destroy();
                    this.cmpRef = undefined;
                }
            }
            else {
                if (!this.cmpRef) {
                    this.cmpRef = this.cfr.resolveComponentFactory(PblNgridCheckboxComponent).create(this.injector);
                    this.cmpRef.instance.table = this.table;
                    if (this._bulkSelectMode) {
                        this.cmpRef.instance.bulkSelectMode = this._bulkSelectMode;
                    }
                    this.cmpRef.instance.color = this._color;
                }
                if (this.isCheckboxDisabled) {
                    this.cmpRef.instance.isCheckboxDisabled = this.isCheckboxDisabled;
                }
                this.cmpRef.instance.name = value;
                this.cmpRef.changeDetectorRef.detectChanges();
            }
        }
    }
    /**
     * Defines the behavior when clicking on the bulk select checkbox (header).
     * There are 2 options:
     *
     * - all: Will select all items in the current collection
     * - view: Will select only the rendered items in the view
     *
     * The default value is `all`
     * @return {?}
     */
    get bulkSelectMode() { return this._bulkSelectMode; }
    /**
     * @param {?} value
     * @return {?}
     */
    set bulkSelectMode(value) {
        if (value !== this._bulkSelectMode) {
            this._bulkSelectMode = value;
            if (this.cmpRef) {
                this.cmpRef.instance.bulkSelectMode = value;
            }
        }
    }
    /**
     * @return {?}
     */
    get matCheckboxSelectionColor() { return this._color; }
    /**
     * @param {?} value
     * @return {?}
     */
    set matCheckboxSelectionColor(value) {
        if (value !== this._color) {
            this._color = value;
            if (this.cmpRef) {
                this.cmpRef.instance.color = value;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.cmpRef) {
            this.cmpRef.destroy();
        }
        this._removePlugin(this.table);
    }
};
PblNgridMatCheckboxSelectionDirective.ɵfac = function PblNgridMatCheckboxSelectionDirective_Factory(t) { return new (t || PblNgridMatCheckboxSelectionDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.PblNgridComponent), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.PblNgridPluginController)); };
PblNgridMatCheckboxSelectionDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PblNgridMatCheckboxSelectionDirective, selectors: [["pbl-ngrid", "matCheckboxSelection", ""]], inputs: { isCheckboxDisabled: "isCheckboxDisabled", matCheckboxSelection: "matCheckboxSelection", bulkSelectMode: "bulkSelectMode", matCheckboxSelectionColor: "matCheckboxSelectionColor" } });
/** @nocollapse */
PblNgridMatCheckboxSelectionDirective.ctorParameters = () => [
    { type: PblNgridComponent },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: PblNgridPluginController }
];
PblNgridMatCheckboxSelectionDirective.propDecorators = {
    isCheckboxDisabled: [{ type: Input }],
    matCheckboxSelection: [{ type: Input }],
    bulkSelectMode: [{ type: Input }],
    matCheckboxSelectionColor: [{ type: Input }]
};
PblNgridMatCheckboxSelectionDirective = __decorate([
    NgridPlugin({ id: PLUGIN_KEY }),
    UnRx(),
    __metadata("design:paramtypes", [PblNgridComponent,
        ComponentFactoryResolver,
        Injector,
        PblNgridPluginController])
], PblNgridMatCheckboxSelectionDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PblNgridCheckboxComponent, [{
        type: Component,
        args: [{
                selector: 'pbl-ngrid-checkbox',
                template: "<ng-container *pblNgridHeaderCellDef=\"name; col as col;\">\n  <mat-checkbox *ngIf=\"bulkSelectMode !== 'none'\"\n                style=\"overflow: initial\"\n                [color]=\"color\"\n                (click)=\"$event.stopPropagation()\"\n                (change)=\"$event ? masterToggle() : null\"\n                [checked]=\"allSelected\"\n                [indeterminate]=\"length > 0 && !allSelected\">\n  </mat-checkbox>\n</ng-container>\n<mat-checkbox *pblNgridCellDef=\"name; row as row;\"\n              style=\"overflow: initial\"\n              [color]=\"color\"\n              [disabled]=isCheckboxDisabled(row)\n              (click)=\"$event.stopPropagation()\"\n              (change)=\"rowItemChange(row)\"\n              [checked]=\"selection.isSelected(row)\">\n</mat-checkbox>\n<span *pblNgridFooterCellDef=\"name; col as col;\">{{ length ? length : '' }}</span>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: [".mat-cell.pbl-ngrid-checkbox,.mat-header-cell.pbl-ngrid-checkbox{box-sizing:content-box;flex:0 0 24px;overflow:visible}"]
            }]
    }], function () { return [{ type: ɵngcc1.PblNgridComponent }, { type: ɵngcc0.ChangeDetectorRef }]; }, { selection: [{
            type: Input
        }], bulkSelectMode: [{
            type: Input
        }], isCheckboxDisabled: [{
            type: Input
        }], color: [{
            type: Input
        }], name: [{
            type: Input
        }], headerDef: [{
            type: ViewChild,
            args: [PblNgridHeaderCellDefDirective, { static: true }]
        }], cellDef: [{
            type: ViewChild,
            args: [PblNgridCellDefDirective, { static: true }]
        }], footerDef: [{
            type: ViewChild,
            args: [PblNgridFooterCellDefDirective, { static: true }]
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PblNgridMatCheckboxSelectionDirective, [{
        type: Directive,
        args: [{ selector: 'pbl-ngrid[matCheckboxSelection]' }]
    }], function () { return [{ type: ɵngcc1.PblNgridComponent }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.Injector }, { type: ɵngcc1.PblNgridPluginController }]; }, { isCheckboxDisabled: [{
            type: Input
        }], matCheckboxSelection: [{
            type: Input
        }], bulkSelectMode: [{
            type: Input
        }], matCheckboxSelectionColor: [{
            type: Input
        }] }); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    PblNgridMatCheckboxSelectionDirective.prototype._name;
    /**
     * @type {?}
     * @private
     */
    PblNgridMatCheckboxSelectionDirective.prototype._bulkSelectMode;
    /**
     * @type {?}
     * @private
     */
    PblNgridMatCheckboxSelectionDirective.prototype._color;
    /**
     * @type {?}
     * @private
     */
    PblNgridMatCheckboxSelectionDirective.prototype.cmpRef;
    /**
     * @type {?}
     * @private
     */
    PblNgridMatCheckboxSelectionDirective.prototype._removePlugin;
    /**
     * @type {?}
     * @private
     */
    PblNgridMatCheckboxSelectionDirective.prototype._isCheckboxDisabled;
    /**
     * @type {?}
     * @private
     */
    PblNgridMatCheckboxSelectionDirective.prototype.table;
    /**
     * @type {?}
     * @private
     */
    PblNgridMatCheckboxSelectionDirective.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    PblNgridMatCheckboxSelectionDirective.prototype.injector;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/table-checkbox.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PblNgridCheckboxModule {
}
PblNgridCheckboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PblNgridCheckboxModule });
PblNgridCheckboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PblNgridCheckboxModule_Factory(t) { return new (t || PblNgridCheckboxModule)(); }, imports: [[CommonModule, MatCheckboxModule, PblNgridModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PblNgridCheckboxModule, { declarations: function () { return [PblNgridMatCheckboxSelectionDirective,
        PblNgridCheckboxComponent]; }, imports: function () { return [CommonModule, MatCheckboxModule, PblNgridModule]; }, exports: function () { return [PblNgridMatCheckboxSelectionDirective,
        PblNgridCheckboxComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PblNgridCheckboxModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, MatCheckboxModule, PblNgridModule],
                declarations: [PblNgridMatCheckboxSelectionDirective, PblNgridCheckboxComponent],
                exports: [PblNgridMatCheckboxSelectionDirective, PblNgridCheckboxComponent],
                // TODO: remove when ViewEngine is no longer supported by angular (V11 ???)
                entryComponents: [PblNgridCheckboxComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: pebula-ngrid-material-selection-column.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { PblNgridCheckboxModule, PblNgridMatCheckboxSelectionDirective as ɵa, PblNgridCheckboxComponent as ɵb };

//# sourceMappingURL=pebula-ngrid-material-selection-column.js.map