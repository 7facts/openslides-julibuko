{"version":3,"file":"pebula-ngrid-material-sort.js","sources":["ng:/@pebula/ngrid-material/sort/lib/mat-sort.directive.ts","ng:/@pebula/ngrid-material/sort/lib/mat-sort-component-extension.ts","ng:/@pebula/ngrid-material/sort/lib/mat-sort.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, OnDestroy } from '@angular/core';\nimport { Sort, MatSort, MatSortHeader, SortDirection } from '@angular/material/sort';\n\nimport { UnRx } from '@pebula/utils';\nimport { PblNgridComponent, PblNgridPluginController, NgridPlugin, PblNgridSortDefinition, PblDataSource } from '@pebula/ngrid';\n\ndeclare module '@pebula/ngrid/lib/ext/types' {\n  interface PblNgridPluginExtension {\n    matSort?: PblNgridMatSortDirective;\n  }\n}\nconst PLUGIN_KEY: 'matSort' = 'matSort';\n\n@NgridPlugin({ id: PLUGIN_KEY })\n@Directive({ selector: 'pbl-ngrid[matSort]', exportAs: 'pblMatSort' })\n@UnRx()\nexport class PblNgridMatSortDirective implements OnDestroy {\n  private _removePlugin: (table: PblNgridComponent<any>) => void;\n\n  constructor(public table: PblNgridComponent<any>, private pluginCtrl: PblNgridPluginController, public sort: MatSort) {\n    this._removePlugin = pluginCtrl.setPlugin(PLUGIN_KEY, this);\n\n    let origin: 'ds' | 'click' = 'click';\n    this.sort.sortChange\n      .pipe(UnRx(this))\n      .subscribe( s => {\n        this.onSort(s, origin);\n        origin = 'click';\n      });\n\n    const handleDataSourceSortChange = (sortChange: PblDataSource['sort']) => {\n      const { column } = sortChange;\n      const order = sortChange.sort ? sortChange.sort.order : undefined;\n\n      if (this.sort && column) {\n        if (this.sort.active === column.id && this.sort.direction === (order || '')) { return; }\n        const sortable: MatSortHeader = this.sort.sortables.get(column.id) as any;\n        if (sortable) {\n          origin = 'ds';\n          this.sort.active = undefined;\n          sortable.start = order || 'asc';\n          sortable._handleClick();\n        }\n      } else if (this.sort.active) { // clear mode (hit from code, not click).\n        const sortable: MatSortHeader = this.sort.sortables.get(this.sort.active) as any;\n        if (sortable ) {\n          if (!sortable.disableClear) {\n            let nextSortDir: SortDirection;\n            while (nextSortDir = this.sort.getNextSortDirection(sortable)) {\n              this.sort.direction = nextSortDir;\n            }\n          }\n          origin = 'ds';\n          sortable._handleClick();\n        }\n      }\n    }\n\n    pluginCtrl.events\n      .subscribe( e => {\n        if (e.kind === 'onInvalidateHeaders') {\n          const hasActiveSort = this.sort && this.sort.active;\n          if (table.ds && table.ds.sort) {\n            if (!table.ds.sort.column && hasActiveSort) {\n              this.onSort({ active: this.sort.active, direction: this.sort.direction || 'asc' }, origin);\n            } else if (table.ds.sort.column && !hasActiveSort) {\n              setTimeout(() => handleDataSourceSortChange(table.ds.sort));\n            }\n          }\n        }\n        if (e.kind === 'onDataSource') {\n          UnRx.kill(this, e.prev);\n          if (this.sort && this.sort.active) {\n            this.onSort({ active: this.sort.active, direction: this.sort.direction || 'asc' }, origin);\n          }\n          table.ds.sortChange\n            .pipe(UnRx(this, e.curr))\n            .subscribe( event => { handleDataSourceSortChange(event); });\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this._removePlugin(this.table);\n  }\n\n  private onSort(sort: Sort, origin: 'ds' | 'click'): void {\n    const table = this.table;\n    const column = table.columnApi.visibleColumns.find(c => c.id === sort.active);\n\n    if ( origin !== 'click' || !column || !column.sort ) {\n      return;\n    } else {\n      const newSort: PblNgridSortDefinition = { };\n      const sortFn = typeof column.sort === 'function' && column.sort;\n      if (sort.direction) {\n        newSort.order = sort.direction;\n      }\n      if (sortFn) {\n        newSort.sortFn = sortFn;\n      }\n      const currentSort = table.ds.sort;\n      if (column === currentSort.column) {\n        const _sort = currentSort.sort || {};\n        if (newSort.order === _sort.order) {\n          return;\n        }\n      }\n      table.ds.setSort(column, newSort);\n    }\n  }\n\n}\n","import { ComponentFactory, ComponentRef, ComponentFactoryResolver } from '@angular/core';\nimport { MatSort, MatSortHeader } from '@angular/material/sort';\n\nimport { PblNgridMultiComponentRegistry, PblNgridDataHeaderExtensionContext } from '@pebula/ngrid';\n\nexport class MatSortExtension extends PblNgridMultiComponentRegistry<MatSortHeader, 'dataHeaderExtensions'> {\n  readonly name: 'sortContainer' = 'sortContainer';\n  readonly kind: 'dataHeaderExtensions' = 'dataHeaderExtensions';\n  readonly projectContent = true;\n\n  constructor(private cfr: ComponentFactoryResolver) {\n    super();\n  }\n\n  shouldRender(context: PblNgridDataHeaderExtensionContext): boolean {\n    return !!context.col.sort && !!context.injector.get(MatSort, false);\n  }\n\n  getFactory(context: PblNgridDataHeaderExtensionContext): ComponentFactory<MatSortHeader> {\n    return this.cfr.resolveComponentFactory(MatSortHeader);\n  }\n\n  onCreated(context: PblNgridDataHeaderExtensionContext, cmpRef: ComponentRef<MatSortHeader>): void {\n    // We assign the ID and also verify that it does not exist on the `MatSort` container\n    // It might exists on specific scenarios when a header is removed and added instantly but the \"add\" part happens before the teardown so the `MatSort` will throw.\n    this.deregisterId(context, cmpRef.instance.id = context.col.id);\n    cmpRef.changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Check that the current `MatSort` does not already have a sortable header with the provided id.\n   */\n  private deregisterId(context: PblNgridDataHeaderExtensionContext, id: any) {\n    const matSort = context.injector.get<MatSort>(MatSort);\n    const matSortHeader = matSort.sortables.get(id)\n    if (matSortHeader) {\n      matSort.deregister(matSortHeader);\n    }\n  }\n}\n","import { NgModule, ComponentFactoryResolver } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatSortModule, MatSortHeader } from '@angular/material/sort';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { PblNgridModule, PblNgridRegistryService } from '@pebula/ngrid';\nimport { PblNgridMatSortDirective } from './mat-sort.directive';\nimport { MatSortExtension } from './mat-sort-component-extension';\n\n@NgModule({\n  imports: [ CommonModule, MatButtonModule, MatSortModule, PblNgridModule ],\n  declarations: [ PblNgridMatSortDirective ],\n  exports: [ PblNgridMatSortDirective, MatSortModule ],\n  // TODO: remove when ViewEngine is no longer supported by angular (V11 ???)\n  entryComponents: [ MatSortHeader ],\n})\nexport class PblNgridMatSortModule {\n  constructor(private registry: PblNgridRegistryService, cfr: ComponentFactoryResolver) {\n    registry.addMulti('dataHeaderExtensions', new MatSortExtension(cfr));\n  }\n}\n"]}