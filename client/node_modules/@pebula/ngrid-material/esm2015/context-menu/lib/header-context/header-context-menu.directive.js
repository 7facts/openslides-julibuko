/**
 * @fileoverview added by tsickle
 * Generated from: lib/header-context/header-context-menu.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __decorate, __metadata } from "tslib";
import { Directive, Input } from '@angular/core';
import { PblNgridPluginController, NgridPlugin } from '@pebula/ngrid';
import { PblNgridOverlayPanelFactory } from '@pebula/ngrid/overlay-panel';
/** @type {?} */
const PLUGIN_KEY = 'matHeaderContextMenu';
let PblNgridMatHeaderContextMenuPlugin = class PblNgridMatHeaderContextMenuPlugin {
    /**
     * @param {?} overlayPanelFactory
     * @param {?} pluginCtrl
     */
    constructor(overlayPanelFactory, pluginCtrl) {
        this.pluginCtrl = pluginCtrl;
        this.overlayPanel = overlayPanelFactory.create(pluginCtrl.extApi.grid);
    }
};
PblNgridMatHeaderContextMenuPlugin.decorators = [
    { type: Directive, args: [{ selector: 'pbl-ngrid[matHeaderContextMenu]', providers: [PblNgridOverlayPanelFactory] },] }
];
/** @nocollapse */
PblNgridMatHeaderContextMenuPlugin.ctorParameters = () => [
    { type: PblNgridOverlayPanelFactory },
    { type: PblNgridPluginController }
];
PblNgridMatHeaderContextMenuPlugin.propDecorators = {
    style: [{ type: Input, args: ['matHeaderContextMenu',] }],
    config: [{ type: Input }]
};
PblNgridMatHeaderContextMenuPlugin = __decorate([
    NgridPlugin({ id: PLUGIN_KEY }),
    __metadata("design:paramtypes", [PblNgridOverlayPanelFactory,
        PblNgridPluginController])
], PblNgridMatHeaderContextMenuPlugin);
export { PblNgridMatHeaderContextMenuPlugin };
if (false) {
    /** @type {?} */
    PblNgridMatHeaderContextMenuPlugin.prototype.style;
    /** @type {?} */
    PblNgridMatHeaderContextMenuPlugin.prototype.config;
    /** @type {?} */
    PblNgridMatHeaderContextMenuPlugin.prototype.overlayPanel;
    /** @type {?} */
    PblNgridMatHeaderContextMenuPlugin.prototype.pluginCtrl;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLWNvbnRleHQtbWVudS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcGVidWxhL25ncmlkLW1hdGVyaWFsL2NvbnRleHQtbWVudS8iLCJzb3VyY2VzIjpbImxpYi9oZWFkZXItY29udGV4dC9oZWFkZXItY29udGV4dC1tZW51LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RFLE9BQU8sRUFBRSwyQkFBMkIsRUFBb0QsTUFBTSw2QkFBNkIsQ0FBQzs7TUFRdEgsVUFBVSxHQUEyQixzQkFBc0I7SUFJcEQsa0NBQWtDLFNBQWxDLGtDQUFrQzs7Ozs7SUFPN0MsWUFBWSxtQkFBZ0QsRUFDaEMsVUFBb0M7UUFBcEMsZUFBVSxHQUFWLFVBQVUsQ0FBMEI7UUFDOUQsSUFBSSxDQUFDLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6RSxDQUFDO0NBRUYsQ0FBQTs7WUFiQSxTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsaUNBQWlDLEVBQUUsU0FBUyxFQUFFLENBQUUsMkJBQTJCLENBQUUsRUFBRTs7OztZQVg3RiwyQkFBMkI7WUFEM0Isd0JBQXdCOzs7b0JBZTlCLEtBQUssU0FBQyxzQkFBc0I7cUJBQzVCLEtBQUs7O0FBSEssa0NBQWtDO0lBRjlDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQztxQ0FTRywyQkFBMkI7UUFDcEIsd0JBQXdCO0dBUnJELGtDQUFrQyxDQVk5QztTQVpZLGtDQUFrQzs7O0lBRTdDLG1EQUEwQzs7SUFDMUMsb0RBQTRDOztJQUU1QywwREFBNEM7O0lBR2hDLHdEQUFvRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBibE5ncmlkUGx1Z2luQ29udHJvbGxlciwgTmdyaWRQbHVnaW4gfSBmcm9tICdAcGVidWxhL25ncmlkJztcbmltcG9ydCB7IFBibE5ncmlkT3ZlcmxheVBhbmVsRmFjdG9yeSwgUGJsTmdyaWRPdmVybGF5UGFuZWwsIFBibE5ncmlkT3ZlcmxheVBhbmVsQ29uZmlnIH0gZnJvbSAnQHBlYnVsYS9uZ3JpZC9vdmVybGF5LXBhbmVsJztcblxuZGVjbGFyZSBtb2R1bGUgJ0BwZWJ1bGEvbmdyaWQvbGliL2V4dC90eXBlcycge1xuICBpbnRlcmZhY2UgUGJsTmdyaWRQbHVnaW5FeHRlbnNpb24ge1xuICAgIG1hdEhlYWRlckNvbnRleHRNZW51PzogUGJsTmdyaWRNYXRIZWFkZXJDb250ZXh0TWVudVBsdWdpbjtcbiAgfVxufVxuXG5jb25zdCBQTFVHSU5fS0VZOiAnbWF0SGVhZGVyQ29udGV4dE1lbnUnID0gJ21hdEhlYWRlckNvbnRleHRNZW51JztcblxuQE5ncmlkUGx1Z2luKHsgaWQ6IFBMVUdJTl9LRVkgfSlcbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ3BibC1uZ3JpZFttYXRIZWFkZXJDb250ZXh0TWVudV0nLCBwcm92aWRlcnM6IFsgUGJsTmdyaWRPdmVybGF5UGFuZWxGYWN0b3J5IF0gfSlcbmV4cG9ydCBjbGFzcyBQYmxOZ3JpZE1hdEhlYWRlckNvbnRleHRNZW51UGx1Z2luIHtcblxuICBASW5wdXQoJ21hdEhlYWRlckNvbnRleHRNZW51Jykgc3R5bGU6IGFueTtcbiAgQElucHV0KCkgY29uZmlnOiBQYmxOZ3JpZE92ZXJsYXlQYW5lbENvbmZpZztcblxuICByZWFkb25seSBvdmVybGF5UGFuZWw6IFBibE5ncmlkT3ZlcmxheVBhbmVsO1xuXG4gIGNvbnN0cnVjdG9yKG92ZXJsYXlQYW5lbEZhY3Rvcnk6IFBibE5ncmlkT3ZlcmxheVBhbmVsRmFjdG9yeSxcbiAgICAgICAgICAgICAgcHVibGljIHJlYWRvbmx5IHBsdWdpbkN0cmw6IFBibE5ncmlkUGx1Z2luQ29udHJvbGxlcikge1xuICAgIHRoaXMub3ZlcmxheVBhbmVsID0gb3ZlcmxheVBhbmVsRmFjdG9yeS5jcmVhdGUocGx1Z2luQ3RybC5leHRBcGkuZ3JpZCk7XG4gIH1cblxufVxuIl19