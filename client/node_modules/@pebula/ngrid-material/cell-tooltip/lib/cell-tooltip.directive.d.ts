import { Injector, OnDestroy } from '@angular/core';
import { TooltipPosition } from '@angular/material/tooltip';
import { PblNgridComponent, PblNgridPluginController } from '@pebula/ngrid';
import { PblNgridCellEvent } from '@pebula/ngrid/target-events';
import * as ɵngcc0 from '@angular/core';
declare module '@pebula/ngrid/lib/grid/services/config' {
    interface PblNgridConfig {
        cellTooltip?: CellTooltipOptions & {
            /** When set to true will apply the default cell tooltip to ALL tables */
            autoSetAll?: boolean;
        };
    }
}
declare module '@pebula/ngrid/lib/ext/types' {
    interface PblNgridPluginExtension {
        cellTooltip?: PblNgridCellTooltipDirective<any>;
    }
    interface PblNgridPluginExtensionFactories {
        cellTooltip: keyof typeof PblNgridCellTooltipDirective;
    }
}
export interface CellTooltipOptions {
    canShow?: boolean | ((event: PblNgridCellEvent<any>) => boolean);
    message?: (event: PblNgridCellEvent<any>) => string;
}
export declare class PblNgridCellTooltipDirective<T> implements CellTooltipOptions, OnDestroy {
    private table;
    private injector;
    static readonly PLUGIN_KEY: 'cellTooltip';
    set canShow(value: boolean | ((event: PblNgridCellEvent<T>) => boolean));
    message: (event: PblNgridCellEvent<T>) => string;
    /** See Material docs for MatTooltip */
    position: TooltipPosition;
    /** See Material docs for MatTooltip */
    tooltipClass: string | string[] | Set<string> | {
        [key: string]: any;
    };
    /** See Material docs for MatTooltip */
    showDelay: number;
    /** See Material docs for MatTooltip */
    hideDelay: number;
    private initArgs;
    private toolTip;
    private lastConfig;
    private _removePlugin;
    private _canShow;
    constructor(table: PblNgridComponent<any>, injector: Injector, pluginCtrl: PblNgridPluginController);
    static create<T = any>(table: PblNgridComponent<any>, injector: Injector): PblNgridCellTooltipDirective<T>;
    ngOnDestroy(): void;
    private init;
    private cellEnter;
    private cellLeave;
    private killTooltip;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PblNgridCellTooltipDirective<any>, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PblNgridCellTooltipDirective<any>, "[cellTooltip]", ["pblOverflowTooltip"], { "canShow": "cellTooltip"; "message": "message"; "position": "position"; "tooltipClass": "tooltipClass"; "showDelay": "showDelay"; "hideDelay": "hideDelay"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VsbC10b29sdGlwLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJjZWxsLXRvb2x0aXAuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdG9yLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRvb2x0aXBQb3NpdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3Rvb2x0aXAnO1xuaW1wb3J0IHsgUGJsTmdyaWRDb21wb25lbnQsIFBibE5ncmlkUGx1Z2luQ29udHJvbGxlciB9IGZyb20gJ0BwZWJ1bGEvbmdyaWQnO1xuaW1wb3J0IHsgUGJsTmdyaWRDZWxsRXZlbnQgfSBmcm9tICdAcGVidWxhL25ncmlkL3RhcmdldC1ldmVudHMnO1xuZGVjbGFyZSBtb2R1bGUgJ0BwZWJ1bGEvbmdyaWQvbGliL2dyaWQvc2VydmljZXMvY29uZmlnJyB7XG4gICAgaW50ZXJmYWNlIFBibE5ncmlkQ29uZmlnIHtcbiAgICAgICAgY2VsbFRvb2x0aXA/OiBDZWxsVG9vbHRpcE9wdGlvbnMgJiB7XG4gICAgICAgICAgICAvKiogV2hlbiBzZXQgdG8gdHJ1ZSB3aWxsIGFwcGx5IHRoZSBkZWZhdWx0IGNlbGwgdG9vbHRpcCB0byBBTEwgdGFibGVzICovXG4gICAgICAgICAgICBhdXRvU2V0QWxsPzogYm9vbGVhbjtcbiAgICAgICAgfTtcbiAgICB9XG59XG5kZWNsYXJlIG1vZHVsZSAnQHBlYnVsYS9uZ3JpZC9saWIvZXh0L3R5cGVzJyB7XG4gICAgaW50ZXJmYWNlIFBibE5ncmlkUGx1Z2luRXh0ZW5zaW9uIHtcbiAgICAgICAgY2VsbFRvb2x0aXA/OiBQYmxOZ3JpZENlbGxUb29sdGlwRGlyZWN0aXZlPGFueT47XG4gICAgfVxuICAgIGludGVyZmFjZSBQYmxOZ3JpZFBsdWdpbkV4dGVuc2lvbkZhY3RvcmllcyB7XG4gICAgICAgIGNlbGxUb29sdGlwOiBrZXlvZiB0eXBlb2YgUGJsTmdyaWRDZWxsVG9vbHRpcERpcmVjdGl2ZTtcbiAgICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIENlbGxUb29sdGlwT3B0aW9ucyB7XG4gICAgY2FuU2hvdz86IGJvb2xlYW4gfCAoKGV2ZW50OiBQYmxOZ3JpZENlbGxFdmVudDxhbnk+KSA9PiBib29sZWFuKTtcbiAgICBtZXNzYWdlPzogKGV2ZW50OiBQYmxOZ3JpZENlbGxFdmVudDxhbnk+KSA9PiBzdHJpbmc7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQYmxOZ3JpZENlbGxUb29sdGlwRGlyZWN0aXZlPFQ+IGltcGxlbWVudHMgQ2VsbFRvb2x0aXBPcHRpb25zLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgdGFibGU7XG4gICAgcHJpdmF0ZSBpbmplY3RvcjtcbiAgICBzdGF0aWMgcmVhZG9ubHkgUExVR0lOX0tFWTogJ2NlbGxUb29sdGlwJztcbiAgICBzZXQgY2FuU2hvdyh2YWx1ZTogYm9vbGVhbiB8ICgoZXZlbnQ6IFBibE5ncmlkQ2VsbEV2ZW50PFQ+KSA9PiBib29sZWFuKSk7XG4gICAgbWVzc2FnZTogKGV2ZW50OiBQYmxOZ3JpZENlbGxFdmVudDxUPikgPT4gc3RyaW5nO1xuICAgIC8qKiBTZWUgTWF0ZXJpYWwgZG9jcyBmb3IgTWF0VG9vbHRpcCAqL1xuICAgIHBvc2l0aW9uOiBUb29sdGlwUG9zaXRpb247XG4gICAgLyoqIFNlZSBNYXRlcmlhbCBkb2NzIGZvciBNYXRUb29sdGlwICovXG4gICAgdG9vbHRpcENsYXNzOiBzdHJpbmcgfCBzdHJpbmdbXSB8IFNldDxzdHJpbmc+IHwge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gICAgfTtcbiAgICAvKiogU2VlIE1hdGVyaWFsIGRvY3MgZm9yIE1hdFRvb2x0aXAgKi9cbiAgICBzaG93RGVsYXk6IG51bWJlcjtcbiAgICAvKiogU2VlIE1hdGVyaWFsIGRvY3MgZm9yIE1hdFRvb2x0aXAgKi9cbiAgICBoaWRlRGVsYXk6IG51bWJlcjtcbiAgICBwcml2YXRlIGluaXRBcmdzO1xuICAgIHByaXZhdGUgdG9vbFRpcDtcbiAgICBwcml2YXRlIGxhc3RDb25maWc7XG4gICAgcHJpdmF0ZSBfcmVtb3ZlUGx1Z2luO1xuICAgIHByaXZhdGUgX2NhblNob3c7XG4gICAgY29uc3RydWN0b3IodGFibGU6IFBibE5ncmlkQ29tcG9uZW50PGFueT4sIGluamVjdG9yOiBJbmplY3RvciwgcGx1Z2luQ3RybDogUGJsTmdyaWRQbHVnaW5Db250cm9sbGVyKTtcbiAgICBzdGF0aWMgY3JlYXRlPFQgPSBhbnk+KHRhYmxlOiBQYmxOZ3JpZENvbXBvbmVudDxhbnk+LCBpbmplY3RvcjogSW5qZWN0b3IpOiBQYmxOZ3JpZENlbGxUb29sdGlwRGlyZWN0aXZlPFQ+O1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBpbml0O1xuICAgIHByaXZhdGUgY2VsbEVudGVyO1xuICAgIHByaXZhdGUgY2VsbExlYXZlO1xuICAgIHByaXZhdGUga2lsbFRvb2x0aXA7XG59XG4iXX0=