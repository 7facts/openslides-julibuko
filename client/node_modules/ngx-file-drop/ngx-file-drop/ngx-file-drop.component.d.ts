import { ElementRef, EventEmitter, NgZone, OnDestroy, Renderer2, TemplateRef } from '@angular/core';
import { NgxFileDropEntry } from './ngx-file-drop-entry';
import * as ɵngcc0 from '@angular/core';
export declare class NgxFileDropComponent implements OnDestroy {
    private zone;
    private renderer;
    accept: string;
    directory: boolean;
    multiple: boolean;
    dropZoneLabel: string;
    dropZoneClassName: string;
    useDragEnter: boolean;
    contentClassName: string;
    get disabled(): boolean;
    set disabled(value: boolean);
    showBrowseBtn: boolean;
    browseBtnClassName: string;
    browseBtnLabel: string;
    onFileDrop: EventEmitter<NgxFileDropEntry[]>;
    onFileOver: EventEmitter<any>;
    onFileLeave: EventEmitter<any>;
    contentTemplate: TemplateRef<any>;
    fileSelector: ElementRef;
    isDraggingOverDropZone: boolean;
    private globalDraggingInProgress;
    private globalDragStartListener;
    private globalDragEndListener;
    private files;
    private numOfActiveReadEntries;
    private helperFormEl;
    private fileInputPlaceholderEl;
    private dropEventTimerSubscription;
    private _disabled;
    constructor(zone: NgZone, renderer: Renderer2);
    ngOnDestroy(): void;
    onDragOver(event: Event): void;
    onDragEnter(event: Event): void;
    onDragLeave(event: Event): void;
    dropFiles(event: DragEvent): void;
    openFileSelector: (event?: MouseEvent | undefined) => void;
    /**
     * Processes the change event of the file input and adds the given files.
     * @param Event event
     */
    uploadFiles(event: Event): void;
    private checkFiles;
    private traverseFileTree;
    /**
     * Clears any added files from the file input element so the same file can subsequently be added multiple times.
     */
    private resetFileInput;
    /**
     * Get a cached HTML form element as a helper element to clear the file input element.
     */
    private getHelperFormElement;
    /**
     * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.
     */
    private getFileInputPlaceholderElement;
    private canGetAsEntry;
    private isDropzoneDisabled;
    private addToQueue;
    private preventAndStop;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxFileDropComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxFileDropComponent, "ngx-file-drop", never, { "accept": "accept"; "directory": "directory"; "multiple": "multiple"; "dropZoneLabel": "dropZoneLabel"; "dropZoneClassName": "dropZoneClassName"; "useDragEnter": "useDragEnter"; "contentClassName": "contentClassName"; "showBrowseBtn": "showBrowseBtn"; "browseBtnClassName": "browseBtnClassName"; "browseBtnLabel": "browseBtnLabel"; "disabled": "disabled"; }, { "onFileDrop": "onFileDrop"; "onFileOver": "onFileOver"; "onFileLeave": "onFileLeave"; }, ["contentTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZpbGUtZHJvcC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibmd4LWZpbGUtZHJvcC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgT25EZXN0cm95LCBSZW5kZXJlcjIsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5neEZpbGVEcm9wRW50cnkgfSBmcm9tICcuL25neC1maWxlLWRyb3AtZW50cnknO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hGaWxlRHJvcENvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcbiAgICBwcml2YXRlIHpvbmU7XHJcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xyXG4gICAgYWNjZXB0OiBzdHJpbmc7XHJcbiAgICBkaXJlY3Rvcnk6IGJvb2xlYW47XHJcbiAgICBtdWx0aXBsZTogYm9vbGVhbjtcclxuICAgIGRyb3Bab25lTGFiZWw6IHN0cmluZztcclxuICAgIGRyb3Bab25lQ2xhc3NOYW1lOiBzdHJpbmc7XHJcbiAgICB1c2VEcmFnRW50ZXI6IGJvb2xlYW47XHJcbiAgICBjb250ZW50Q2xhc3NOYW1lOiBzdHJpbmc7XHJcbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbjtcclxuICAgIHNldCBkaXNhYmxlZCh2YWx1ZTogYm9vbGVhbik7XHJcbiAgICBzaG93QnJvd3NlQnRuOiBib29sZWFuO1xyXG4gICAgYnJvd3NlQnRuQ2xhc3NOYW1lOiBzdHJpbmc7XHJcbiAgICBicm93c2VCdG5MYWJlbDogc3RyaW5nO1xyXG4gICAgb25GaWxlRHJvcDogRXZlbnRFbWl0dGVyPE5neEZpbGVEcm9wRW50cnlbXT47XHJcbiAgICBvbkZpbGVPdmVyOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIG9uRmlsZUxlYXZlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGNvbnRlbnRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcclxuICAgIGZpbGVTZWxlY3RvcjogRWxlbWVudFJlZjtcclxuICAgIGlzRHJhZ2dpbmdPdmVyRHJvcFpvbmU6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIGdsb2JhbERyYWdnaW5nSW5Qcm9ncmVzcztcclxuICAgIHByaXZhdGUgZ2xvYmFsRHJhZ1N0YXJ0TGlzdGVuZXI7XHJcbiAgICBwcml2YXRlIGdsb2JhbERyYWdFbmRMaXN0ZW5lcjtcclxuICAgIHByaXZhdGUgZmlsZXM7XHJcbiAgICBwcml2YXRlIG51bU9mQWN0aXZlUmVhZEVudHJpZXM7XHJcbiAgICBwcml2YXRlIGhlbHBlckZvcm1FbDtcclxuICAgIHByaXZhdGUgZmlsZUlucHV0UGxhY2Vob2xkZXJFbDtcclxuICAgIHByaXZhdGUgZHJvcEV2ZW50VGltZXJTdWJzY3JpcHRpb247XHJcbiAgICBwcml2YXRlIF9kaXNhYmxlZDtcclxuICAgIGNvbnN0cnVjdG9yKHpvbmU6IE5nWm9uZSwgcmVuZGVyZXI6IFJlbmRlcmVyMik7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG4gICAgb25EcmFnT3ZlcihldmVudDogRXZlbnQpOiB2b2lkO1xyXG4gICAgb25EcmFnRW50ZXIoZXZlbnQ6IEV2ZW50KTogdm9pZDtcclxuICAgIG9uRHJhZ0xlYXZlKGV2ZW50OiBFdmVudCk6IHZvaWQ7XHJcbiAgICBkcm9wRmlsZXMoZXZlbnQ6IERyYWdFdmVudCk6IHZvaWQ7XHJcbiAgICBvcGVuRmlsZVNlbGVjdG9yOiAoZXZlbnQ/OiBNb3VzZUV2ZW50IHwgdW5kZWZpbmVkKSA9PiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzZXMgdGhlIGNoYW5nZSBldmVudCBvZiB0aGUgZmlsZSBpbnB1dCBhbmQgYWRkcyB0aGUgZ2l2ZW4gZmlsZXMuXHJcbiAgICAgKiBAcGFyYW0gRXZlbnQgZXZlbnRcclxuICAgICAqL1xyXG4gICAgdXBsb2FkRmlsZXMoZXZlbnQ6IEV2ZW50KTogdm9pZDtcclxuICAgIHByaXZhdGUgY2hlY2tGaWxlcztcclxuICAgIHByaXZhdGUgdHJhdmVyc2VGaWxlVHJlZTtcclxuICAgIC8qKlxyXG4gICAgICogQ2xlYXJzIGFueSBhZGRlZCBmaWxlcyBmcm9tIHRoZSBmaWxlIGlucHV0IGVsZW1lbnQgc28gdGhlIHNhbWUgZmlsZSBjYW4gc3Vic2VxdWVudGx5IGJlIGFkZGVkIG11bHRpcGxlIHRpbWVzLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHJlc2V0RmlsZUlucHV0O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYSBjYWNoZWQgSFRNTCBmb3JtIGVsZW1lbnQgYXMgYSBoZWxwZXIgZWxlbWVudCB0byBjbGVhciB0aGUgZmlsZSBpbnB1dCBlbGVtZW50LlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldEhlbHBlckZvcm1FbGVtZW50O1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYSBjYWNoZWQgSFRNTCBkaXYgZWxlbWVudCB0byBiZSB1c2VkIGFzIHBsYWNlaG9sZGVyIGZvciB0aGUgZmlsZSBpbnB1dCBlbGVtZW50IHdoZW4gY2xlYXJpbmcgc2FpZCBlbGVtZW50LlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldEZpbGVJbnB1dFBsYWNlaG9sZGVyRWxlbWVudDtcclxuICAgIHByaXZhdGUgY2FuR2V0QXNFbnRyeTtcclxuICAgIHByaXZhdGUgaXNEcm9wem9uZURpc2FibGVkO1xyXG4gICAgcHJpdmF0ZSBhZGRUb1F1ZXVlO1xyXG4gICAgcHJpdmF0ZSBwcmV2ZW50QW5kU3RvcDtcclxufVxyXG4iXX0=